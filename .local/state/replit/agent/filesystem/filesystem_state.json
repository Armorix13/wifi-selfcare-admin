{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# replit.md\n\n## Overview\nThis is a WiFi Self-Care Platform, a full-stack web application designed for internet service providers to manage customer complaints, engineers, customers, and service plans. It features a modern admin dashboard with role-based access control, comprehensive management capabilities, and advanced analytics. The project aims to provide a robust, client-side functional platform for development and testing, leveraging dummy data for all operations without backend dependencies.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n### Frontend\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite\n- **UI Library**: Shadcn/ui (built on Radix UI primitives)\n- **Styling**: Tailwind CSS with custom design tokens\n- **State Management**: Zustand (for authentication)\n- **Data Fetching**: TanStack Query\n- **Routing**: Wouter\n- **Forms**: React Hook Form with Zod validation\n- **Design Principles**: Responsive design for mobile, tablet, and desktop; modern UI components with glassmorphism and animated elements; accessible components; consistent design system across themes (Light, Dark, Crypto, Neon).\n\n### Backend\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **Session Management**: PostgreSQL-based sessions\n- **Validation**: Zod schemas (shared)\n- **Architecture**: Monorepo structure for client, server, and shared code; full TypeScript coverage for type safety.\n\n### Core Features & Design\n- **Authentication & Authorization**: Role-based access control (super-admin, admin, manager) with permission-based feature access.\n- **Data Management**: Comprehensive CRUD operations for users, customers, engineers, service plans, complaints, notifications, support tickets, and leads.\n- **Analytics & Reporting**: Integrated dashboards with various chart types (revenue, performance radar, heatmap, regional, status charts), metrics cards, and real-time performance monitoring.\n- **User Interface**: Tabbed interfaces, responsive sidebars with hamburger menus for mobile, comprehensive notification system, user profile management, search functionality, advanced filtering, and pagination.\n- **Theming**: Dynamic theme management system with 4 distinct themes, ensuring consistent styling across all components.\n- **Support & Rating System**: Comprehensive ticket management with CRUD, filtering, conversation threads, customer feedback, and detailed settings panel.\n- **Notification System**: Advanced composer with multi-select recipient targeting, scheduling, multi-channel delivery (Push, Email, SMS), and history tracking.\n- **New Installation & Leads Management**: Unified interface for tracking installations and leads, with analytics, document upload (e.g., Aadhar, passport photos), and status management.\n- **Service Plans Management**: Comprehensive management of three service plan types (IPTV, OTT, Fibre) with different data structures, pricing models, and provider-specific features. Includes filtering, search, CRUD operations, and plan analytics with full dynamic theming support.\n\n## External Dependencies\n- **Database**: PostgreSQL (via Neon Database)\n- **UI Primitives**: Radix UI\n- **Icons**: Lucide React\n- **Date Handling**: date-fns\n- **Validation**: Zod\n- **Development Tools**: TypeScript, ESLint, Prettier, Vite, PostCSS","size_bytes":3464},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    hmr: {\n      overlay: false, // Disable the runtime error overlay\n    },\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1048},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\nconst HOST = process.env.HOST || \"0.0.0.0\";\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Simple logging middleware for any requests\napp.use((req, res, next) => {\n  const start = Date.now();\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (req.path.startsWith(\"/api\")) {\n      log(`${req.method} ${req.path} ${res.statusCode} in ${duration}ms`);\n    }\n  });\n  next();\n});\n\n(async () => {\n  // Completely client-side app - no API routes needed\n  // All data is handled with dummy data in the frontend\n  \n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  const port = parseInt(process.env.PORT || '5000', 10);\n  const server = app.listen(port, HOST, () => {\n    log(`WiFi Self-Care Platform serving on port ${port}`);\n  });\n\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n})();\n","size_bytes":1302},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { z } from \"zod\";\n\n// Local schema definitions for server-side validation\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Simple health check endpoint\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", message: \"Server is running\" });\n  });\n\n  // Authentication - Dummy login for testing only\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      // Dummy users for testing\n      const dummyUsers = {\n        \"admin@company.com\": {\n          id: 1,\n          email: \"admin@company.com\",\n          username: \"admin\",\n          role: \"super-admin\" as const,\n          password: \"password123\"\n        },\n        \"manager@company.com\": {\n          id: 2,\n          email: \"manager@company.com\",\n          username: \"manager\", \n          role: \"manager\" as const,\n          password: \"password123\"\n        },\n        \"staff@company.com\": {\n          id: 3,\n          email: \"staff@company.com\",\n          username: \"staff\",\n          role: \"admin\" as const,\n          password: \"password123\"\n        }\n      };\n      \n      const user = dummyUsers[email as keyof typeof dummyUsers];\n      if (!user || user.password !== password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Return user without password\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ \n        user: userWithoutPassword,\n        token: \"dummy-token-123\"\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // All other endpoints return dummy data - app is completely client-side\n  app.get(\"/api/*\", (req, res) => {\n    res.json({ message: \"This app uses local data only\", data: [] });\n  });\n\n  app.post(\"/api/*\", (req, res) => {\n    res.json({ message: \"This app uses local data only\", success: true });\n  });\n\n  app.put(\"/api/*\", (req, res) => {\n    res.json({ message: \"This app uses local data only\", success: true });\n  });\n\n  app.delete(\"/api/*\", (req, res) => {\n    res.json({ message: \"This app uses local data only\", success: true });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":2574},"server/storage.ts":{"content":"import {\n  users,\n  customers,\n  engineers,\n  servicePlans,\n  complaints,\n  notifications,\n  supportTickets,\n  newInstallations,\n  leads,\n  type User,\n  type InsertUser,\n  type Customer,\n  type InsertCustomer,\n  type Engineer,\n  type InsertEngineer,\n  type ServicePlan,\n  type InsertServicePlan,\n  type Complaint,\n  type InsertComplaint,\n  type Notification,\n  type InsertNotification,\n  type SupportTicket,\n  type InsertSupportTicket,\n  type NewInstallation,\n  type InsertNewInstallation,\n  type Lead,\n  type InsertLead,\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: number): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, user: Partial<InsertUser>): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n\n  // Customers\n  getCustomer(id: number): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(id: number, customer: Partial<InsertCustomer>): Promise<Customer | undefined>;\n  getAllCustomers(): Promise<Customer[]>;\n  getCustomersByLocation(location: string): Promise<Customer[]>;\n\n  // Engineers\n  getEngineer(id: number): Promise<Engineer | undefined>;\n  createEngineer(engineer: InsertEngineer): Promise<Engineer>;\n  updateEngineer(id: number, engineer: Partial<InsertEngineer>): Promise<Engineer | undefined>;\n  deleteEngineer(id: number): Promise<boolean>;\n  getAllEngineers(): Promise<Engineer[]>;\n  getEngineersByLocation(location: string): Promise<Engineer[]>;\n\n  // Service Plans\n  getServicePlan(id: number): Promise<ServicePlan | undefined>;\n  createServicePlan(plan: InsertServicePlan): Promise<ServicePlan>;\n  updateServicePlan(id: number, plan: Partial<InsertServicePlan>): Promise<ServicePlan | undefined>;\n  deleteServicePlan(id: number): Promise<boolean>;\n  getAllServicePlans(): Promise<ServicePlan[]>;\n  getServicePlansByProvider(provider: string): Promise<ServicePlan[]>;\n\n  // Complaints\n  getComplaint(id: number): Promise<Complaint | undefined>;\n  createComplaint(complaint: InsertComplaint): Promise<Complaint>;\n  updateComplaint(id: number, complaint: Partial<InsertComplaint>): Promise<Complaint | undefined>;\n  deleteComplaint(id: number): Promise<boolean>;\n  getAllComplaints(): Promise<Complaint[]>;\n  getComplaintsByStatus(status: string): Promise<Complaint[]>;\n  getComplaintsByEngineer(engineerId: number): Promise<Complaint[]>;\n  getComplaintsByLocation(location: string): Promise<Complaint[]>;\n\n  // Notifications\n  getNotification(id: number): Promise<Notification | undefined>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getAllNotifications(): Promise<Notification[]>;\n\n  // Support Tickets\n  getSupportTicket(id: number): Promise<SupportTicket | undefined>;\n  createSupportTicket(ticket: InsertSupportTicket): Promise<SupportTicket>;\n  updateSupportTicket(id: number, ticket: Partial<InsertSupportTicket>): Promise<SupportTicket | undefined>;\n  getAllSupportTickets(): Promise<SupportTicket[]>;\n\n  // New Installations\n  getNewInstallation(id: number): Promise<NewInstallation | undefined>;\n  createNewInstallation(installation: InsertNewInstallation): Promise<NewInstallation>;\n  updateNewInstallation(id: number, installation: Partial<InsertNewInstallation>): Promise<NewInstallation | undefined>;\n  deleteNewInstallation(id: number): Promise<boolean>;\n  getAllNewInstallations(): Promise<NewInstallation[]>;\n  getNewInstallationsByStatus(status: string): Promise<NewInstallation[]>;\n\n  // Leads\n  getLead(id: number): Promise<Lead | undefined>;\n  createLead(lead: InsertLead): Promise<Lead>;\n  updateLead(id: number, lead: Partial<InsertLead>): Promise<Lead | undefined>;\n  deleteLead(id: number): Promise<boolean>;\n  getAllLeads(): Promise<Lead[]>;\n  getLeadsByStatus(status: string): Promise<Lead[]>;\n  getLeadsBySource(source: string): Promise<Lead[]>;\n\n  // Analytics\n  getComplaintStats(): Promise<{\n    total: number;\n    pending: number;\n    assigned: number;\n    inProgress: number;\n    resolved: number;\n    avgResolutionTime: number;\n  }>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User> = new Map();\n  private customers: Map<number, Customer> = new Map();\n  private engineers: Map<number, Engineer> = new Map();\n  private servicePlans: Map<number, ServicePlan> = new Map();\n  private complaints: Map<number, Complaint> = new Map();\n  private notifications: Map<number, Notification> = new Map();\n  private supportTickets: Map<number, SupportTicket> = new Map();\n  private newInstallations: Map<number, NewInstallation> = new Map();\n  private leads: Map<number, Lead> = new Map();\n  \n  private userIdCounter = 1;\n  private customerIdCounter = 1;\n  private engineerIdCounter = 1;\n  private planIdCounter = 1;\n  private complaintIdCounter = 1;\n  private notificationIdCounter = 1;\n  private supportTicketIdCounter = 1;\n  private newInstallationIdCounter = 1;\n  private leadIdCounter = 1;\n\n  constructor() {\n    this.seedData();\n  }\n\n  private seedData() {\n    // Seed admin users\n    const adminUser: User = {\n      id: this.userIdCounter++,\n      username: \"admin\",\n      email: \"admin@company.com\",\n      password: \"password123\", // In real app, this would be hashed\n      role: \"super-admin\",\n      isActive: true,\n      createdAt: new Date(),\n    };\n    this.users.set(adminUser.id, adminUser);\n\n    // Seed customers\n    const customers: Customer[] = [\n      {\n        id: this.customerIdCounter++,\n        name: \"Rajesh Kumar\",\n        email: \"rajesh@email.com\",\n        phone: \"+91 98765 43210\",\n        address: \"123 Main St, Mumbai Central\",\n        location: \"Mumbai Central\",\n        serviceProvider: \"Jio Fiber\",\n        planId: 1,\n        planName: \"Jio Fiber 100 Mbps\",\n        activationDate: new Date('2024-01-15'),\n        expirationDate: new Date('2024-12-15'),\n        balanceDue: 0,\n        staticIp: \"192.168.1.100\",\n        macAddress: \"AA:BB:CC:DD:EE:01\",\n        status: \"active\",\n        area: \"urban\",\n        mode: \"online\",\n        isActive: true,\n        createdAt: new Date(),\n      },\n      {\n        id: this.customerIdCounter++,\n        name: \"Priya Sharma\",\n        email: \"priya@email.com\",\n        phone: \"+91 87654 32109\",\n        address: \"456 Park Ave, Delhi NCR\",\n        location: \"Delhi NCR\",\n        serviceProvider: null,\n        planId: null,\n        planName: null,\n        activationDate: null,\n        expirationDate: null,\n        balanceDue: 0,\n        staticIp: null,\n        macAddress: null,\n        status: \"pending\",\n        area: \"urban\",\n        mode: \"offline\",\n        isActive: true,\n        createdAt: new Date(),\n      },\n      {\n        id: this.customerIdCounter++,\n        name: \"Amit Patel\",\n        email: \"amit@email.com\",\n        phone: \"+91 76543 21098\",\n        address: \"789 Tech Park, Bangalore\",\n        location: \"Bangalore\",\n        serviceProvider: \"BSNL Broadband\",\n        planId: 2,\n        planName: \"BSNL Standard 50 Mbps\",\n        activationDate: new Date('2023-12-01'),\n        expirationDate: new Date('2024-11-30'),\n        balanceDue: 1200,\n        staticIp: \"192.168.1.102\",\n        macAddress: \"AA:BB:CC:DD:EE:03\",\n        status: \"suspended\",\n        area: \"rural\",\n        mode: \"offline\",\n        isActive: false,\n        createdAt: new Date(),\n      },\n      {\n        id: this.customerIdCounter++,\n        name: \"Sunita Verma\",\n        email: \"sunita.verma@email.com\",\n        phone: \"+91 91234 56789\",\n        address: \"321 Rural Lane, Patna\",\n        location: \"Patna\",\n        serviceProvider: \"Airtel\",\n        planId: 3,\n        planName: \"Airtel Xstream 200 Mbps\",\n        activationDate: new Date('2024-02-01'),\n        expirationDate: new Date('2025-01-31'),\n        balanceDue: 500,\n        staticIp: \"192.168.1.101\",\n        macAddress: \"AA:BB:CC:DD:EE:02\",\n        status: \"active\",\n        area: \"rural\",\n        mode: \"online\",\n        isActive: true,\n        createdAt: new Date(),\n      },\n      {\n        id: this.customerIdCounter++,\n        name: \"Vikram Singh\",\n        email: \"vikram.singh@email.com\",\n        phone: \"+91 98123 45678\",\n        address: \"654 Tech Park, Hyderabad\",\n        location: \"Hyderabad\",\n        serviceProvider: \"My Internet\",\n        planId: 4,\n        planName: \"My Internet Premium 300 Mbps\",\n        activationDate: new Date('2024-03-10'),\n        expirationDate: new Date('2025-03-09'),\n        balanceDue: 0,\n        staticIp: \"192.168.1.103\",\n        macAddress: \"AA:BB:CC:DD:EE:04\",\n        status: \"active\",\n        area: \"urban\",\n        mode: \"online\",\n        isActive: true,\n        createdAt: new Date(),\n      },\n    ];\n    customers.forEach(customer => this.customers.set(customer.id, customer));\n\n    // Seed engineers\n    const engineers: Engineer[] = [\n      {\n        id: this.engineerIdCounter++,\n        name: \"John Doe\",\n        email: \"john.doe@company.com\",\n        phone: \"+91 98765 43210\",\n        location: \"Mumbai Central\",\n        specialization: \"WiFi Installation\",\n        rating: 48,\n        completedJobs: 143,\n        activeJobs: 5,\n        isActive: true,\n        createdAt: new Date(),\n      },\n      {\n        id: this.engineerIdCounter++,\n        name: \"Sarah Wilson\",\n        email: \"sarah.wilson@company.com\",\n        phone: \"+91 87654 32109\",\n        location: \"Mumbai East\",\n        specialization: \"Network Troubleshooting\",\n        rating: 46,\n        completedJobs: 67,\n        activeJobs: 3,\n        isActive: true,\n        createdAt: new Date(),\n      },\n      {\n        id: this.engineerIdCounter++,\n        name: \"Mike Johnson\",\n        email: \"mike.johnson@company.com\",\n        phone: \"+91 76543 21098\",\n        location: \"Delhi NCR\",\n        specialization: \"Hardware Repair\",\n        rating: 49,\n        completedJobs: 201,\n        activeJobs: 7,\n        isActive: true,\n        createdAt: new Date(),\n      },\n      {\n        id: this.engineerIdCounter++,\n        name: \"Ravi Singh\",\n        email: \"ravi.singh@company.com\",\n        phone: \"+91 65432 10987\",\n        location: \"Bangalore\",\n        specialization: \"Fiber Optic\",\n        rating: 45,\n        completedJobs: 89,\n        activeJobs: 2,\n        isActive: true,\n        createdAt: new Date(),\n      },\n      {\n        id: this.engineerIdCounter++,\n        name: \"Neha Gupta\",\n        email: \"neha.gupta@company.com\",\n        phone: \"+91 54321 09876\",\n        location: \"Chennai\",\n        specialization: \"Cable Installation\",\n        rating: 47,\n        completedJobs: 156,\n        activeJobs: 4,\n        isActive: true,\n        createdAt: new Date(),\n      },\n      {\n        id: this.engineerIdCounter++,\n        name: \"Arjun Reddy\",\n        email: \"arjun.reddy@company.com\",\n        phone: \"+91 43210 98765\",\n        location: \"Mumbai Central\",\n        specialization: \"Network Troubleshooting\",\n        rating: 44,\n        completedJobs: 78,\n        activeJobs: 6,\n        isActive: false,\n        createdAt: new Date(),\n      },\n      {\n        id: this.engineerIdCounter++,\n        name: \"Deepika Mehta\",\n        email: \"deepika.mehta@company.com\",\n        phone: \"+91 32109 87654\",\n        location: \"Delhi NCR\",\n        specialization: \"WiFi Installation\",\n        rating: 50,\n        completedJobs: 234,\n        activeJobs: 8,\n        isActive: true,\n        createdAt: new Date(),\n      },\n    ];\n    engineers.forEach(engineer => this.engineers.set(engineer.id, engineer));\n\n    // Seed service plans\n    const plans: ServicePlan[] = [\n      {\n        id: this.planIdCounter++,\n        name: \"JioFiber Basic\",\n        provider: \"jio\",\n        speed: \"30 Mbps\",\n        price: 699,\n        validity: 30,\n        description: \"Basic internet plan for home use\",\n        isActive: true,\n        createdAt: new Date(),\n      },\n      {\n        id: this.planIdCounter++,\n        name: \"BSNL Standard\",\n        provider: \"bsnl\",\n        speed: \"50 Mbps\",\n        price: 899,\n        validity: 30,\n        description: \"Standard broadband connection\",\n        isActive: true,\n        createdAt: new Date(),\n      },\n    ];\n    plans.forEach(plan => this.servicePlans.set(plan.id, plan));\n\n    // Seed complaints\n    const complaints: Complaint[] = [\n      {\n        id: this.complaintIdCounter++,\n        customerId: 1,\n        title: \"WiFi disconnecting frequently\",\n        description: \"WiFi connection keeps dropping every 30 minutes\",\n        priority: \"urgent\",\n        status: \"assigned\",\n        engineerId: 1,\n        location: \"Mumbai Central\",\n        attachments: null,\n        resolution: null,\n        rating: null,\n        feedback: null,\n        createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\n        updatedAt: new Date(),\n        resolvedAt: null,\n      },\n      {\n        id: this.complaintIdCounter++,\n        customerId: 2,\n        title: \"Slow internet speed\",\n        description: \"Internet speed is very slow, getting only 10 Mbps instead of 100 Mbps\",\n        priority: \"high\",\n        status: \"in-progress\",\n        engineerId: 2,\n        location: \"Delhi NCR\",\n        attachments: null,\n        resolution: null,\n        rating: null,\n        feedback: null,\n        createdAt: new Date(Date.now() - 4 * 60 * 60 * 1000), // 4 hours ago\n        updatedAt: new Date(),\n        resolvedAt: null,\n      },\n      {\n        id: this.complaintIdCounter++,\n        customerId: 3,\n        title: \"Unable to connect to network\",\n        description: \"Cannot connect to WiFi network, showing authentication error\",\n        priority: \"medium\",\n        status: \"resolved\",\n        engineerId: 3,\n        location: \"Bangalore\",\n        attachments: null,\n        resolution: \"Reset router and updated WiFi password\",\n        rating: 5,\n        feedback: \"Excellent service! John resolved my WiFi issue very quickly and professionally.\",\n        createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day ago\n        updatedAt: new Date(),\n        resolvedAt: new Date(Date.now() - 20 * 60 * 60 * 1000),\n      },\n      {\n        id: this.complaintIdCounter++,\n        customerId: 1,\n        title: \"Router not working\",\n        description: \"Router lights are blinking red and no internet connectivity\",\n        priority: \"urgent\",\n        status: \"pending\",\n        engineerId: null,\n        location: \"Mumbai Central\",\n        attachments: null,\n        resolution: null,\n        rating: null,\n        feedback: null,\n        createdAt: new Date(Date.now() - 1 * 60 * 60 * 1000), // 1 hour ago\n        updatedAt: new Date(),\n        resolvedAt: null,\n      },\n      {\n        id: this.complaintIdCounter++,\n        customerId: 2,\n        title: \"Cable connection loose\",\n        description: \"Physical cable connection seems loose, internet cuts frequently\",\n        priority: \"high\",\n        status: \"assigned\",\n        engineerId: 4,\n        location: \"Delhi NCR\",\n        attachments: null,\n        resolution: null,\n        rating: null,\n        feedback: null,\n        createdAt: new Date(Date.now() - 6 * 60 * 60 * 1000), // 6 hours ago\n        updatedAt: new Date(),\n        resolvedAt: null,\n      },\n      {\n        id: this.complaintIdCounter++,\n        customerId: 3,\n        title: \"Intermittent connection\",\n        description: \"Internet works fine during day but drops at night\",\n        priority: \"medium\",\n        status: \"in-progress\",\n        engineerId: 5,\n        location: \"Bangalore\",\n        attachments: null,\n        resolution: null,\n        rating: null,\n        feedback: null,\n        createdAt: new Date(Date.now() - 8 * 60 * 60 * 1000), // 8 hours ago\n        updatedAt: new Date(),\n        resolvedAt: null,\n      },\n      {\n        id: this.complaintIdCounter++,\n        customerId: 1,\n        title: \"Port blocking issues\",\n        description: \"Some websites and services are not accessible\",\n        priority: \"low\",\n        status: \"resolved\",\n        engineerId: 6,\n        location: \"Mumbai Central\",\n        attachments: null,\n        resolution: \"Updated firewall settings and unblocked required ports\",\n        rating: 4,\n        feedback: \"Good service, took a bit longer than expected\",\n        createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 days ago\n        updatedAt: new Date(),\n        resolvedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n      },\n      {\n        id: this.complaintIdCounter++,\n        customerId: 2,\n        title: \"DNS resolution problems\",\n        description: \"Some websites not loading, DNS seems to be the issue\",\n        priority: \"medium\",\n        status: \"assigned\",\n        engineerId: 7,\n        location: \"Delhi NCR\",\n        attachments: null,\n        resolution: null,\n        rating: null,\n        feedback: null,\n        createdAt: new Date(Date.now() - 12 * 60 * 60 * 1000), // 12 hours ago\n        updatedAt: new Date(),\n        resolvedAt: null,\n      },\n    ];\n    complaints.forEach(complaint => this.complaints.set(complaint.id, complaint));\n  }\n\n  // Users\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const user: User = {\n      ...insertUser,\n      id: this.userIdCounter++,\n      role: insertUser.role || \"manager\",\n      isActive: insertUser.isActive ?? true,\n      createdAt: new Date(),\n    };\n    this.users.set(user.id, user);\n    return user;\n  }\n\n  async updateUser(id: number, updateData: Partial<InsertUser>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updateData };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  // Customers\n  async getCustomer(id: number): Promise<Customer | undefined> {\n    return this.customers.get(id);\n  }\n\n  async createCustomer(insertCustomer: InsertCustomer): Promise<Customer> {\n    const customer: Customer = {\n      ...insertCustomer,\n      id: this.customerIdCounter++,\n      isActive: insertCustomer.isActive ?? true,\n      serviceProvider: insertCustomer.serviceProvider ?? null,\n      planId: insertCustomer.planId ?? null,\n      createdAt: new Date(),\n    };\n    this.customers.set(customer.id, customer);\n    return customer;\n  }\n\n  async updateCustomer(id: number, updateData: Partial<InsertCustomer>): Promise<Customer | undefined> {\n    const customer = this.customers.get(id);\n    if (!customer) return undefined;\n    \n    const updatedCustomer = { ...customer, ...updateData };\n    this.customers.set(id, updatedCustomer);\n    return updatedCustomer;\n  }\n\n  async getAllCustomers(): Promise<Customer[]> {\n    return Array.from(this.customers.values());\n  }\n\n  async getCustomersByLocation(location: string): Promise<Customer[]> {\n    return Array.from(this.customers.values()).filter(customer => customer.location === location);\n  }\n\n  // Engineers\n  async getEngineer(id: number): Promise<Engineer | undefined> {\n    return this.engineers.get(id);\n  }\n\n  async createEngineer(insertEngineer: InsertEngineer): Promise<Engineer> {\n    const engineer: Engineer = {\n      ...insertEngineer,\n      id: this.engineerIdCounter++,\n      isActive: insertEngineer.isActive ?? true,\n      rating: insertEngineer.rating ?? 0,\n      completedJobs: insertEngineer.completedJobs ?? 0,\n      activeJobs: insertEngineer.activeJobs ?? 0,\n      createdAt: new Date(),\n    };\n    this.engineers.set(engineer.id, engineer);\n    return engineer;\n  }\n\n  async updateEngineer(id: number, updateData: Partial<InsertEngineer>): Promise<Engineer | undefined> {\n    const engineer = this.engineers.get(id);\n    if (!engineer) return undefined;\n    \n    const updatedEngineer = { ...engineer, ...updateData };\n    this.engineers.set(id, updatedEngineer);\n    return updatedEngineer;\n  }\n\n  async deleteEngineer(id: number): Promise<boolean> {\n    return this.engineers.delete(id);\n  }\n\n  async getAllEngineers(): Promise<Engineer[]> {\n    return Array.from(this.engineers.values());\n  }\n\n  async getEngineersByLocation(location: string): Promise<Engineer[]> {\n    return Array.from(this.engineers.values()).filter(engineer => engineer.location === location);\n  }\n\n  // Service Plans\n  async getServicePlan(id: number): Promise<ServicePlan | undefined> {\n    return this.servicePlans.get(id);\n  }\n\n  async createServicePlan(insertPlan: InsertServicePlan): Promise<ServicePlan> {\n    const plan: ServicePlan = {\n      ...insertPlan,\n      id: this.planIdCounter++,\n      description: insertPlan.description ?? null,\n      isActive: insertPlan.isActive ?? true,\n      createdAt: new Date(),\n    };\n    this.servicePlans.set(plan.id, plan);\n    return plan;\n  }\n\n  async updateServicePlan(id: number, updateData: Partial<InsertServicePlan>): Promise<ServicePlan | undefined> {\n    const plan = this.servicePlans.get(id);\n    if (!plan) return undefined;\n    \n    const updatedPlan = { ...plan, ...updateData };\n    this.servicePlans.set(id, updatedPlan);\n    return updatedPlan;\n  }\n\n  async deleteServicePlan(id: number): Promise<boolean> {\n    return this.servicePlans.delete(id);\n  }\n\n  async getAllServicePlans(): Promise<ServicePlan[]> {\n    return Array.from(this.servicePlans.values());\n  }\n\n  async getServicePlansByProvider(provider: string): Promise<ServicePlan[]> {\n    return Array.from(this.servicePlans.values()).filter(plan => plan.provider === provider);\n  }\n\n  // Complaints\n  async getComplaint(id: number): Promise<Complaint | undefined> {\n    return this.complaints.get(id);\n  }\n\n  async createComplaint(insertComplaint: InsertComplaint): Promise<Complaint> {\n    const complaint: Complaint = {\n      ...insertComplaint,\n      id: this.complaintIdCounter++,\n      priority: insertComplaint.priority || \"medium\",\n      status: insertComplaint.status || \"pending\",\n      engineerId: insertComplaint.engineerId ?? null,\n      attachments: insertComplaint.attachments ?? null,\n      resolution: insertComplaint.resolution ?? null,\n      rating: insertComplaint.rating ?? null,\n      feedback: insertComplaint.feedback ?? null,\n      resolvedAt: insertComplaint.resolvedAt ?? null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.complaints.set(complaint.id, complaint);\n    return complaint;\n  }\n\n  async updateComplaint(id: number, updateData: Partial<InsertComplaint>): Promise<Complaint | undefined> {\n    const complaint = this.complaints.get(id);\n    if (!complaint) return undefined;\n    \n    const updatedComplaint = { ...complaint, ...updateData, updatedAt: new Date() };\n    this.complaints.set(id, updatedComplaint);\n    return updatedComplaint;\n  }\n\n  async deleteComplaint(id: number): Promise<boolean> {\n    return this.complaints.delete(id);\n  }\n\n  async getAllComplaints(): Promise<Complaint[]> {\n    return Array.from(this.complaints.values());\n  }\n\n  async getComplaintsByStatus(status: string): Promise<Complaint[]> {\n    return Array.from(this.complaints.values()).filter(complaint => complaint.status === status);\n  }\n\n  async getComplaintsByEngineer(engineerId: number): Promise<Complaint[]> {\n    return Array.from(this.complaints.values()).filter(complaint => complaint.engineerId === engineerId);\n  }\n\n  async getComplaintsByLocation(location: string): Promise<Complaint[]> {\n    return Array.from(this.complaints.values()).filter(complaint => complaint.location === location);\n  }\n\n  // Notifications\n  async getNotification(id: number): Promise<Notification | undefined> {\n    return this.notifications.get(id);\n  }\n\n  async createNotification(insertNotification: InsertNotification): Promise<Notification> {\n    const notification: Notification = {\n      ...insertNotification,\n      id: this.notificationIdCounter++,\n      priority: insertNotification.priority || \"normal\",\n      recipients: insertNotification.recipients ?? null,\n      deliveredCount: insertNotification.deliveredCount ?? 0,\n      readCount: insertNotification.readCount ?? 0,\n      sentAt: new Date(),\n    };\n    this.notifications.set(notification.id, notification);\n    return notification;\n  }\n\n  async getAllNotifications(): Promise<Notification[]> {\n    return Array.from(this.notifications.values());\n  }\n\n  // Support Tickets\n  async getSupportTicket(id: number): Promise<SupportTicket | undefined> {\n    return this.supportTickets.get(id);\n  }\n\n  async createSupportTicket(insertTicket: InsertSupportTicket): Promise<SupportTicket> {\n    const ticket: SupportTicket = {\n      ...insertTicket,\n      id: this.supportTicketIdCounter++,\n      priority: insertTicket.priority || \"medium\",\n      status: insertTicket.status || \"open\",\n      assignedTo: insertTicket.assignedTo ?? null,\n      response: insertTicket.response ?? null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.supportTickets.set(ticket.id, ticket);\n    return ticket;\n  }\n\n  async updateSupportTicket(id: number, updateData: Partial<InsertSupportTicket>): Promise<SupportTicket | undefined> {\n    const ticket = this.supportTickets.get(id);\n    if (!ticket) return undefined;\n    \n    const updatedTicket = { ...ticket, ...updateData, updatedAt: new Date() };\n    this.supportTickets.set(id, updatedTicket);\n    return updatedTicket;\n  }\n\n  async getAllSupportTickets(): Promise<SupportTicket[]> {\n    return Array.from(this.supportTickets.values());\n  }\n\n  // Analytics\n  async getComplaintStats(): Promise<{\n    total: number;\n    pending: number;\n    assigned: number;\n    inProgress: number;\n    resolved: number;\n    avgResolutionTime: number;\n  }> {\n    const complaints = Array.from(this.complaints.values());\n    const total = complaints.length;\n    const pending = complaints.filter(c => c.status === \"pending\").length;\n    const assigned = complaints.filter(c => c.status === \"assigned\").length;\n    const inProgress = complaints.filter(c => c.status === \"in-progress\").length;\n    const resolved = complaints.filter(c => c.status === \"resolved\").length;\n    \n    const resolvedComplaints = complaints.filter(c => c.resolvedAt && c.createdAt);\n    const avgResolutionTime = resolvedComplaints.length > 0 \n      ? resolvedComplaints.reduce((sum, c) => {\n          const resolutionTime = (c.resolvedAt!.getTime() - c.createdAt!.getTime()) / (1000 * 60 * 60); // hours\n          return sum + resolutionTime;\n        }, 0) / resolvedComplaints.length\n      : 0;\n\n    return {\n      total,\n      pending,\n      assigned,\n      inProgress,\n      resolved,\n      avgResolutionTime: Math.round(avgResolutionTime * 10) / 10,\n    };\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":26767},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"manager\"), // super-admin, admin, manager\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Customers table - Enhanced with plan activation details\nexport const customers = pgTable(\"customers\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\").notNull(),\n  address: text(\"address\").notNull(),\n  location: text(\"location\").notNull(),\n  serviceProvider: text(\"service_provider\"),\n  planId: integer(\"plan_id\"),\n  planName: text(\"plan_name\"),\n  activationDate: timestamp(\"activation_date\"),\n  expirationDate: timestamp(\"expiration_date\"),\n  balanceDue: integer(\"balance_due\").default(0),\n  staticIp: text(\"static_ip\"),\n  macAddress: text(\"mac_address\"),\n  status: text(\"status\").default(\"active\"), // active, suspended, expired, pending\n  area: text(\"area\"), // rural, urban\n  mode: text(\"mode\").default(\"online\"), // online, offline\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Engineers table\nexport const engineers = pgTable(\"engineers\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\").notNull(),\n  location: text(\"location\").notNull(),\n  specialization: text(\"specialization\").notNull(),\n  rating: integer(\"rating\").default(0),\n  completedJobs: integer(\"completed_jobs\").default(0),\n  activeJobs: integer(\"active_jobs\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Service Plans table\nexport const servicePlans = pgTable(\"service_plans\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  provider: text(\"provider\").notNull(), // jio, airtel, bsnl, my-internet\n  speed: text(\"speed\").notNull(),\n  price: integer(\"price\").notNull(),\n  validity: integer(\"validity\").notNull(), // in days\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Complaints table\nexport const complaints = pgTable(\"complaints\", {\n  id: serial(\"id\").primaryKey(),\n  customerId: integer(\"customer_id\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  priority: text(\"priority\").notNull().default(\"medium\"), // urgent, high, medium, low\n  status: text(\"status\").notNull().default(\"pending\"), // pending, assigned, in-progress, visited, resolved, not-resolved\n  engineerId: integer(\"engineer_id\"),\n  location: text(\"location\").notNull(),\n  attachments: jsonb(\"attachments\"),\n  resolution: text(\"resolution\"),\n  rating: integer(\"rating\"),\n  feedback: text(\"feedback\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  resolvedAt: timestamp(\"resolved_at\"),\n});\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull(), // all-users, all-engineers, specific-user, location-based\n  priority: text(\"priority\").notNull().default(\"normal\"), // normal, high, urgent\n  recipientType: text(\"recipient_type\").notNull(),\n  recipients: jsonb(\"recipients\"), // array of user IDs or criteria\n  sentBy: integer(\"sent_by\").notNull(),\n  sentAt: timestamp(\"sent_at\").defaultNow(),\n  deliveredCount: integer(\"delivered_count\").default(0),\n  readCount: integer(\"read_count\").default(0),\n});\n\n// Support Tickets table\nexport const supportTickets = pgTable(\"support_tickets\", {\n  id: serial(\"id\").primaryKey(),\n  customerId: integer(\"customer_id\").notNull(),\n  subject: text(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  priority: text(\"priority\").notNull().default(\"medium\"), // low, medium, high, urgent\n  status: text(\"status\").notNull().default(\"open\"), // open, in-progress, resolved, closed\n  category: text(\"category\").notNull().default(\"technical\"), // technical, billing, general, complaint\n  assignedTo: integer(\"assigned_to\"),\n  response: text(\"response\"),\n  rating: integer(\"rating\"), // 1-5 stars\n  feedback: text(\"feedback\"),\n  tags: jsonb(\"tags\"), // array of tags\n  attachments: jsonb(\"attachments\"), // array of file URLs\n  slaBreached: boolean(\"sla_breached\").default(false),\n  escalated: boolean(\"escalated\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  resolvedAt: timestamp(\"resolved_at\"),\n});\n\n// Analytics & Metrics table\nexport const analytics = pgTable(\"analytics\", {\n  id: serial(\"id\").primaryKey(),\n  metricType: text(\"metric_type\").notNull(), // complaints, revenue, performance, network\n  metricName: text(\"metric_name\").notNull(),\n  value: integer(\"value\").notNull(),\n  period: text(\"period\").notNull(), // daily, weekly, monthly, yearly\n  location: text(\"location\"),\n  category: text(\"category\"),\n  metadata: jsonb(\"metadata\"), // additional data\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// System Settings table\nexport const systemSettings = pgTable(\"system_settings\", {\n  id: serial(\"id\").primaryKey(),\n  category: text(\"category\").notNull(), // general, sla, notifications, security, etc.\n  key: text(\"key\").notNull().unique(),\n  value: jsonb(\"value\").notNull(),\n  description: text(\"description\"),\n  updatedBy: integer(\"updated_by\").notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Audit Logs table\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  action: text(\"action\").notNull(), // create, update, delete, login, logout\n  entityType: text(\"entity_type\").notNull(), // user, customer, complaint, etc.\n  entityId: integer(\"entity_id\"),\n  changes: jsonb(\"changes\"), // what changed\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// New Installation Requests table\nexport const newInstallations = pgTable(\"new_installations\", {\n  id: serial(\"id\").primaryKey(),\n  customerName: text(\"customer_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\").notNull(),\n  address: text(\"address\").notNull(),\n  location: text(\"location\").notNull(),\n  preferredPlan: text(\"preferred_plan\"),\n  planId: integer(\"plan_id\"),\n  requestType: text(\"request_type\").notNull().default(\"residential\"), // residential, commercial\n  status: text(\"status\").notNull().default(\"pending\"), // pending, confirmed, rejected, installed\n  priority: text(\"priority\").notNull().default(\"medium\"), // low, medium, high, urgent\n  estimatedCost: integer(\"estimated_cost\"),\n  notes: text(\"notes\"),\n  assignedEngineerId: integer(\"assigned_engineer_id\"),\n  scheduledDate: timestamp(\"scheduled_date\"),\n  installationDate: timestamp(\"installation_date\"),\n  rejectionReason: text(\"rejection_reason\"),\n  documents: jsonb(\"documents\"), // array of document URLs\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Leads table for inquiries and prospects\nexport const leads = pgTable(\"leads\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\"),\n  phone: text(\"phone\").notNull(),\n  location: text(\"location\"),\n  source: text(\"source\").notNull().default(\"website\"), // website, ivr, whatsapp, referral, social_media\n  inquiryType: text(\"inquiry_type\").notNull().default(\"general\"), // general, pricing, technical, support\n  message: text(\"message\"),\n  status: text(\"status\").notNull().default(\"new\"), // new, contacted, qualified, converted, closed\n  priority: text(\"priority\").notNull().default(\"medium\"), // low, medium, high, urgent\n  isContactedByManager: boolean(\"is_contacted_by_manager\").default(false),\n  assignedTo: integer(\"assigned_to\"), // user id of assigned agent/manager\n  followUpDate: timestamp(\"follow_up_date\"),\n  lastContactDate: timestamp(\"last_contact_date\"),\n  conversionProbability: integer(\"conversion_probability\").default(0), // 0-100%\n  estimatedValue: integer(\"estimated_value\"),\n  tags: jsonb(\"tags\"), // array of tags\n  notes: text(\"notes\"),\n  leadScore: integer(\"lead_score\").default(0), // calculated lead scoring\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEngineerSchema = createInsertSchema(engineers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertServicePlanSchema = createInsertSchema(servicePlans).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertComplaintSchema = createInsertSchema(complaints).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  sentAt: true,\n});\n\nexport const insertSupportTicketSchema = createInsertSchema(supportTickets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  resolvedAt: true,\n});\n\nexport const insertAnalyticsSchema = createInsertSchema(analytics).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSystemSettingsSchema = createInsertSchema(systemSettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNewInstallationSchema = createInsertSchema(newInstallations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLeadSchema = createInsertSchema(leads).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// IPTV Plans Schema\nexport const iptvPlans = pgTable(\"iptv_plans\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  totalChannels: integer(\"total_channels\").notNull(),\n  payChannels: integer(\"pay_channels\").notNull(),\n  freeToAirChannels: integer(\"free_to_air_channels\").notNull(),\n  price: integer(\"price\").notNull(),\n  lcoMarginPercent: integer(\"lco_margin_percent\").notNull(),\n  distributorMarginPercent: integer(\"distributor_margin_percent\").notNull(),\n  channelList: jsonb(\"channel_list\"),\n  planType: text(\"plan_type\").notNull(), // lite, standard, premium\n  quality: text(\"quality\").notNull(), // HD, 4K, SD\n  provider: text(\"provider\").notNull(),\n  logo: text(\"logo\"),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// OTT Plans Schema\nexport const ottPlans = pgTable(\"ott_plans\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  price: integer(\"price\").notNull(),\n  speedBeforeLimit: text(\"speed_before_limit\").notNull(),\n  speedAfterLimit: text(\"speed_after_limit\").notNull(),\n  dataLimitGB: integer(\"data_limit_gb\"),\n  isUnlimited: boolean(\"is_unlimited\").default(false),\n  validity: text(\"validity\").notNull(),\n  ottApps: jsonb(\"ott_apps\"),\n  callBenefit: text(\"call_benefit\"),\n  provider: text(\"provider\").notNull(),\n  logo: text(\"logo\"),\n  description: text(\"description\"),\n  planType: text(\"plan_type\").default(\"ott\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Fibre Plans Schema\nexport const fibrePlans = pgTable(\"fibre_plans\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  price: integer(\"price\").notNull(),\n  validity: text(\"validity\").notNull(),\n  speed: text(\"speed\").notNull(),\n  dataLimit: text(\"data_limit\").notNull(),\n  provider: text(\"provider\").notNull(),\n  logo: text(\"logo\"),\n  benefits: text(\"benefits\"),\n  description: text(\"description\"),\n  planType: text(\"plan_type\").notNull(), // Basic, Standard, Premium\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert schemas for service plans\nexport const insertIptvPlanSchema = createInsertSchema(iptvPlans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOttPlanSchema = createInsertSchema(ottPlans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFibrePlanSchema = createInsertSchema(fibrePlans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Auth schema\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n  role: z.enum([\"super-admin\", \"admin\", \"manager\"]),\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type Engineer = typeof engineers.$inferSelect;\nexport type InsertEngineer = z.infer<typeof insertEngineerSchema>;\nexport type ServicePlan = typeof servicePlans.$inferSelect;\nexport type InsertServicePlan = z.infer<typeof insertServicePlanSchema>;\nexport type Complaint = typeof complaints.$inferSelect;\nexport type InsertComplaint = z.infer<typeof insertComplaintSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type SupportTicket = typeof supportTickets.$inferSelect;\nexport type InsertSupportTicket = z.infer<typeof insertSupportTicketSchema>;\nexport type Analytics = typeof analytics.$inferSelect;\nexport type InsertAnalytics = z.infer<typeof insertAnalyticsSchema>;\nexport type SystemSettings = typeof systemSettings.$inferSelect;\nexport type InsertSystemSettings = z.infer<typeof insertSystemSettingsSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type NewInstallation = typeof newInstallations.$inferSelect;\nexport type InsertNewInstallation = z.infer<typeof insertNewInstallationSchema>;\nexport type Lead = typeof leads.$inferSelect;\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\nexport type IptvPlan = typeof iptvPlans.$inferSelect;\nexport type InsertIptvPlan = z.infer<typeof insertIptvPlanSchema>;\nexport type OttPlan = typeof ottPlans.$inferSelect;\nexport type InsertOttPlan = z.infer<typeof insertOttPlanSchema>;\nexport type FibrePlan = typeof fibrePlans.$inferSelect;\nexport type InsertFibrePlan = z.infer<typeof insertFibrePlanSchema>;\nexport type LoginData = z.infer<typeof loginSchema>;\n\n// Additional validation schemas for API endpoints\nexport const createComplaintSchema = insertComplaintSchema.extend({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().min(10, \"Description must be at least 10 characters\"),\n  priority: z.enum([\"urgent\", \"high\", \"medium\", \"low\"]),\n  location: z.string().min(1, \"Location is required\"),\n});\n\nexport const updateComplaintSchema = z.object({\n  title: z.string().min(1).optional(),\n  description: z.string().min(10).optional(),\n  priority: z.enum([\"urgent\", \"high\", \"medium\", \"low\"]).optional(),\n  status: z.enum([\"pending\", \"assigned\", \"in-progress\", \"visited\", \"resolved\", \"not-resolved\"]).optional(),\n  engineerId: z.number().optional(),\n  resolution: z.string().optional(),\n  rating: z.number().min(1).max(5).optional(),\n  feedback: z.string().optional(),\n});\n\nexport const createEngineerSchema = insertEngineerSchema.extend({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  phone: z.string().min(10, \"Valid phone number is required\"),\n  location: z.string().min(1, \"Location is required\"),\n  specialization: z.enum([\"Network\", \"Hardware\", \"Software\", \"Installation\", \"Maintenance\"]),\n});\n\nexport const createSupportTicketSchema = insertSupportTicketSchema.extend({\n  subject: z.string().min(1, \"Subject is required\"),\n  message: z.string().min(10, \"Message must be at least 10 characters\"),\n  priority: z.enum([\"low\", \"medium\", \"high\", \"urgent\"]),\n  category: z.enum([\"technical\", \"billing\", \"general\", \"complaint\"]),\n});\n\n// Dashboard statistics schema\nexport const dashboardStatsSchema = z.object({\n  totalComplaints: z.number(),\n  activeComplaints: z.number(),\n  resolvedToday: z.number(),\n  avgResolutionTime: z.number(),\n  totalEngineers: z.number(),\n  activeEngineers: z.number(),\n  totalCustomers: z.number(),\n  networkUptime: z.number(),\n  customerSatisfaction: z.number(),\n  monthlyRevenue: z.number(),\n});\n\n// Additional validation schemas for New Installation and Leads\nexport const createNewInstallationSchema = insertNewInstallationSchema.extend({\n  customerName: z.string().min(1, \"Customer name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  phone: z.string().min(10, \"Valid phone number is required\"),\n  address: z.string().min(1, \"Address is required\"),\n  location: z.string().min(1, \"Location is required\"),\n  status: z.enum([\"pending\", \"confirmed\", \"rejected\", \"installed\"]),\n  priority: z.enum([\"low\", \"medium\", \"high\", \"urgent\"]),\n});\n\nexport const updateNewInstallationSchema = z.object({\n  status: z.enum([\"pending\", \"confirmed\", \"rejected\", \"installed\"]).optional(),\n  priority: z.enum([\"low\", \"medium\", \"high\", \"urgent\"]).optional(),\n  assignedEngineerId: z.number().optional(),\n  scheduledDate: z.date().optional(),\n  installationDate: z.date().optional(),\n  rejectionReason: z.string().optional(),\n  notes: z.string().optional(),\n  estimatedCost: z.number().optional(),\n});\n\nexport const createLeadSchema = insertLeadSchema.extend({\n  name: z.string().min(1, \"Name is required\"),\n  phone: z.string().min(10, \"Valid phone number is required\"),\n  source: z.enum([\"website\", \"ivr\", \"whatsapp\", \"referral\", \"social_media\"]),\n  inquiryType: z.enum([\"general\", \"pricing\", \"technical\", \"support\"]),\n  status: z.enum([\"new\", \"contacted\", \"qualified\", \"converted\", \"closed\"]),\n  priority: z.enum([\"low\", \"medium\", \"high\", \"urgent\"]),\n});\n\nexport const updateLeadSchema = z.object({\n  status: z.enum([\"new\", \"contacted\", \"qualified\", \"converted\", \"closed\"]).optional(),\n  priority: z.enum([\"low\", \"medium\", \"high\", \"urgent\"]).optional(),\n  isContactedByManager: z.boolean().optional(),\n  assignedTo: z.number().optional(),\n  followUpDate: z.date().optional(),\n  lastContactDate: z.date().optional(),\n  conversionProbability: z.number().min(0).max(100).optional(),\n  estimatedValue: z.number().optional(),\n  notes: z.string().optional(),\n  leadScore: z.number().min(0).max(100).optional(),\n});\n\nexport type CreateComplaint = z.infer<typeof createComplaintSchema>;\nexport type UpdateComplaint = z.infer<typeof updateComplaintSchema>;\nexport type CreateEngineer = z.infer<typeof createEngineerSchema>;\nexport type CreateSupportTicket = z.infer<typeof createSupportTicketSchema>;\nexport type CreateNewInstallation = z.infer<typeof createNewInstallationSchema>;\nexport type UpdateNewInstallation = z.infer<typeof updateNewInstallationSchema>;\nexport type CreateLead = z.infer<typeof createLeadSchema>;\nexport type UpdateLead = z.infer<typeof updateLeadSchema>;\nexport type DashboardStats = z.infer<typeof dashboardStatsSchema>;\n","size_bytes":19737},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { useAuth } from \"@/lib/auth\";\n\n// Import modern themes\nimport \"@/styles/modern-themes.css\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Complaints from \"@/pages/complaints\";\nimport Engineers from \"@/pages/engineers\";\nimport Users from \"@/pages/users\";\nimport { Products } from \"@/pages/products\";\nimport Plans from \"@/pages/plans\";\nimport Analytics from \"@/pages/analytics\";\nimport Notifications from \"@/pages/notifications\";\nimport Support from \"@/pages/support\";\nimport Settings from \"@/pages/settings\";\nimport UserDetail from \"@/pages/user-detail\";\nimport EngineerDetail from \"@/pages/engineer-detail\";\nimport ComplaintDetail from \"@/pages/complaint-detail\";\nimport PlanDetail from \"@/pages/plan-detail\";\nimport Installations from \"@/pages/installations\";\nimport Leads from \"@/pages/leads\";\nimport InstallationsLeads from \"@/pages/installations-leads\";\n\nfunction ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { isAuthenticated } = useAuth();\n  \n  if (!isAuthenticated) {\n    return <Redirect to=\"/login\" />;\n  }\n  \n  return <>{children}</>;\n}\n\nfunction Router() {\n  const { isAuthenticated } = useAuth();\n\n  return (\n    <Switch>\n      <Route path=\"/login\">\n        {isAuthenticated ? <Redirect to=\"/dashboard\" /> : <Login />}\n      </Route>\n      \n      <Route path=\"/\">\n        {isAuthenticated ? <Redirect to=\"/dashboard\" /> : <Redirect to=\"/login\" />}\n      </Route>\n      \n      <Route path=\"/dashboard\">\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/complaints\">\n        <ProtectedRoute>\n          <Complaints />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/engineers\">\n        <ProtectedRoute>\n          <Engineers />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/users\">\n        <ProtectedRoute>\n          <Users />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/products\">\n        <ProtectedRoute>\n          <Products />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/plans\">\n        <ProtectedRoute>\n          <Plans />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/analytics\">\n        <ProtectedRoute>\n          <Analytics />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/notifications\">\n        <ProtectedRoute>\n          <Notifications />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/support\">\n        <ProtectedRoute>\n          <Support />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/settings\">\n        <ProtectedRoute>\n          <Settings />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/installations\">\n        <ProtectedRoute>\n          <Installations />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/leads\">\n        <ProtectedRoute>\n          <Leads />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/installations-leads\">\n        <ProtectedRoute>\n          <InstallationsLeads />\n        </ProtectedRoute>\n      </Route>\n      \n      {/* Detail Pages */}\n      <Route path=\"/users/:id\">\n        <ProtectedRoute>\n          <UserDetail />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/engineers/:id\">\n        <ProtectedRoute>\n          <EngineerDetail />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/complaints/:id\">\n        <ProtectedRoute>\n          <ComplaintDetail />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/plans/:id\">\n        <ProtectedRoute>\n          <PlanDetail />\n        </ProtectedRoute>\n      </Route>\n      \n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"dark\" storageKey=\"wificare-ui-theme\">\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4485},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(221, 83%, 53%);\n  --radius: 0.75rem;\n  \n  /* Sidebar variables */\n  --sidebar-bg: hsl(0, 0%, 100%);\n  --sidebar-border: hsl(214, 13%, 91%);\n  --sidebar-item: hsl(0, 0%, 0%);\n  --sidebar-item-hover: hsl(210, 40%, 96%);\n  --sidebar-item-active: hsl(221, 83%, 53%);\n  --sidebar-item-active-bg: hsl(221, 83%, 95%);\n}\n\n.dark {\n  --background: hsl(222, 47%, 11%);\n  --foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --popover: hsl(217, 33%, 17%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --card: hsl(217, 33%, 17%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --primary: hsl(179, 82%, 51%);\n  --primary-foreground: hsl(222, 47%, 11%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 50%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(179, 82%, 51%);\n  \n  /* Dark theme sidebar */\n  --sidebar-bg: hsl(215, 25%, 27%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-item: hsl(210, 40%, 98%);\n  --sidebar-item-hover: hsl(217, 33%, 17%);\n  --sidebar-item-active: hsl(179, 82%, 51%);\n  --sidebar-item-active-bg: hsl(179, 82%, 8%);\n}\n\n.crypto {\n  --background: hsl(234, 52%, 8%);\n  --foreground: hsl(48, 100%, 96%);\n  --muted: hsl(233, 35%, 15%);\n  --muted-foreground: hsl(213, 27%, 84%);\n  --popover: hsl(234, 40%, 12%);\n  --popover-foreground: hsl(48, 100%, 96%);\n  --card: hsl(234, 40%, 12%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --border: hsl(179, 82%, 51%, 0.2);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --primary: hsl(179, 82%, 51%);\n  --primary-foreground: hsl(222, 47%, 11%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 50%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(179, 82%, 51%);\n  \n  /* Crypto theme sidebar */\n  --sidebar-bg: linear-gradient(135deg, hsl(215, 25%, 27%) 0%, hsl(217, 33%, 17%) 100%);\n  --sidebar-border: hsl(179, 82%, 51%, 0.3);\n  --sidebar-item: hsl(210, 40%, 98%);\n  --sidebar-item-hover: hsl(179, 82%, 51%, 0.1);\n  --sidebar-item-active: hsl(179, 82%, 51%);\n  --sidebar-item-active-bg: hsl(179, 82%, 51%, 0.15);\n}\n\n.neon {\n  --background: hsl(270, 100%, 3%);\n  --foreground: hsl(300, 100%, 95%);\n  --muted: hsl(270, 50%, 15%);\n  --muted-foreground: hsl(270, 30%, 60%);\n  --popover: hsl(270, 80%, 8%);\n  --popover-foreground: hsl(300, 100%, 95%);\n  --card: hsl(270, 80%, 8%);\n  --card-foreground: hsl(300, 100%, 95%);\n  --border: hsl(300, 100%, 50%, 0.3);\n  --input: hsl(270, 50%, 15%);\n  --primary: hsl(300, 100%, 50%);\n  --primary-foreground: hsl(270, 100%, 3%);\n  --secondary: hsl(270, 50%, 15%);\n  --secondary-foreground: hsl(300, 100%, 95%);\n  --accent: hsl(270, 50%, 15%);\n  --accent-foreground: hsl(300, 100%, 95%);\n  --destructive: hsl(0, 100%, 50%);\n  --destructive-foreground: hsl(300, 100%, 95%);\n  --ring: hsl(300, 100%, 50%);\n  \n  /* Neon theme sidebar */\n  --sidebar-bg: linear-gradient(135deg, hsl(270, 80%, 8%) 0%, hsl(270, 100%, 3%) 100%);\n  --sidebar-border: hsl(300, 100%, 50%, 0.4);\n  --sidebar-item: hsl(300, 100%, 95%);\n  --sidebar-item-hover: hsl(300, 100%, 50%, 0.1);\n  --sidebar-item-active: hsl(300, 100%, 50%);\n  --sidebar-item-active-bg: hsl(300, 100%, 50%, 0.2);\n}\n\n/* Beautiful Dashboard Styles */\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n@layer components {\n  .dashboard-hero {\n    @apply relative overflow-hidden;\n    background: linear-gradient(135deg, \n      hsl(var(--primary) / 0.1) 0%, \n      hsl(var(--primary) / 0.05) 25%, \n      transparent 50%, \n      hsl(var(--accent) / 0.05) 75%, \n      hsl(var(--accent) / 0.1) 100%\n    );\n  }\n  \n  .dashboard-hero::before {\n    content: '';\n    @apply absolute inset-0;\n    background: radial-gradient(circle at 30% 20%, hsl(var(--primary) / 0.1) 0%, transparent 50%),\n                radial-gradient(circle at 70% 80%, hsl(var(--accent) / 0.1) 0%, transparent 50%);\n    animation: float 20s ease-in-out infinite;\n  }\n  \n  @keyframes float {\n    0%, 100% { transform: translateY(0px) rotate(0deg); }\n    50% { transform: translateY(-20px) rotate(1deg); }\n  }\n  \n  .stats-card {\n    @apply relative bg-card backdrop-blur-lg border border-border rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 ease-in-out;\n    background: linear-gradient(135deg, \n      hsl(var(--card) / 0.9) 0%, \n      hsl(var(--card) / 0.7) 100%\n    );\n    transform: translateZ(0); /* Force GPU acceleration for smooth transitions */\n    will-change: transform, box-shadow; /* Optimize for animations */\n  }\n  \n  .stats-card:hover {\n    transform: translateZ(0) translateY(-2px); /* Subtle lift effect without layout shift */\n  }\n  \n  .stats-card::before {\n    content: '';\n    @apply absolute inset-0 rounded-xl opacity-0 transition-opacity duration-300;\n    background: linear-gradient(135deg, \n      hsl(var(--primary) / 0.1) 0%, \n      hsl(var(--accent) / 0.05) 100%\n    );\n  }\n  \n  .stats-card:hover::before {\n    @apply opacity-100;\n  }\n  \n  .crypto-card {\n    @apply relative bg-card backdrop-blur-lg border rounded-xl shadow-2xl hover:shadow-2xl transition-all duration-300 ease-in-out;\n    background: linear-gradient(135deg, \n      hsl(var(--card) / 0.9) 0%, \n      hsl(var(--card) / 0.7) 50%,\n      hsl(var(--primary) / 0.05) 100%\n    );\n    border: 1px solid hsl(var(--border) / 0.5);\n    transform: translateZ(0); /* Force GPU acceleration for smooth transitions */\n    will-change: transform, box-shadow; /* Optimize for animations */\n  }\n  \n  .crypto-card:hover {\n    transform: translateZ(0) translateY(-1px); /* Subtle lift effect without layout shift */\n  }\n  \n  .crypto-card::before {\n    content: '';\n    @apply absolute inset-0 rounded-xl opacity-0 transition-opacity duration-500;\n    background: linear-gradient(135deg, \n      hsl(var(--primary) / 0.1) 0%, \n      transparent 50%,\n      hsl(var(--accent) / 0.1) 100%\n    );\n  }\n  \n  .crypto-card:hover::before {\n    @apply opacity-100;\n  }\n  \n  .text-gradient {\n    background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--primary) / 0.8) 50%, hsl(var(--accent-foreground)) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n  \n  .icon-glow {\n    @apply drop-shadow-lg;\n    filter: drop-shadow(0 0 8px hsl(var(--primary) / 0.3));\n  }\n  \n  .neon-glow {\n    box-shadow: 0 0 20px hsl(var(--primary) / 0.3),\n                0 0 40px hsl(var(--primary) / 0.2),\n                0 0 60px hsl(var(--primary) / 0.1);\n  }\n  \n  .pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite;\n  }\n  \n  @keyframes pulse-glow {\n    0%, 100% { \n      box-shadow: 0 0 20px hsl(var(--primary) / 0.3);\n    }\n    50% { \n      box-shadow: 0 0 30px hsl(var(--primary) / 0.5),\n                  0 0 40px hsl(var(--primary) / 0.3);\n    }\n  }\n  \n  .sparkle-animation {\n    animation: sparkle 3s ease-in-out infinite;\n  }\n  \n  @keyframes sparkle {\n    0%, 100% { opacity: 0.7; transform: scale(1); }\n    50% { opacity: 1; transform: scale(1.1); }\n  }\n  \n  .gradient-border {\n    @apply relative overflow-hidden;\n  }\n  \n  .gradient-border::before {\n    content: '';\n    @apply absolute inset-0;\n    background: linear-gradient(45deg, \n      hsl(var(--primary)) 0%, \n      hsl(var(--accent)) 50%, \n      hsl(var(--primary)) 100%\n    );\n    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    mask-composite: exclude;\n    -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    -webkit-mask-composite: xor;\n    padding: 1px;\n  }\n  \n  .admin-badge {\n    @apply inline-flex items-center px-3 py-1 rounded-full text-xs font-medium;\n    background: linear-gradient(135deg, \n      hsl(var(--primary) / 0.1) 0%, \n      hsl(var(--primary) / 0.2) 100%\n    );\n    border: 1px solid hsl(var(--primary) / 0.3);\n    color: hsl(var(--primary));\n  }\n  \n  .manager-badge {\n    @apply inline-flex items-center px-3 py-1 rounded-full text-xs font-medium;\n    background: linear-gradient(135deg, \n      hsl(var(--accent) / 0.1) 0%, \n      hsl(var(--accent) / 0.2) 100%\n    );\n    border: 1px solid hsl(var(--accent) / 0.3);\n    color: hsl(var(--accent));\n  }\n  \n  .super-admin-badge {\n    @apply inline-flex items-center px-3 py-1 rounded-full text-xs font-medium;\n    background: linear-gradient(135deg, \n      #ffd700 0%, \n      #ffed4a 100%\n    );\n    border: 1px solid #ffd700;\n    color: #8b5a00;\n  }\n  \n  .floating-element {\n    animation: float-gentle 6s ease-in-out infinite;\n  }\n  \n  @keyframes float-gentle {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n  }\n  \n  .rainbow-border {\n    @apply relative;\n  }\n  \n  .rainbow-border::before {\n    content: '';\n    @apply absolute inset-0 rounded-xl;\n    background: linear-gradient(45deg, \n      #ff0000, #ff7700, #ffdd00, #00ff00, \n      #0088ff, #0000ff, #8800ff, #ff0088\n    );\n    background-size: 400% 400%;\n    animation: rainbow-rotate 4s ease-in-out infinite;\n    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    mask-composite: exclude;\n    -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    -webkit-mask-composite: xor;\n    padding: 2px;\n  }\n  \n  @keyframes rainbow-rotate {\n    0% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n    100% { background-position: 0% 50%; }\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n  }\n}\n\n@layer components {\n  .gradient-bg {\n    background: linear-gradient(135deg, hsl(var(--background)) 0%, hsl(var(--muted)) 100%);\n  }\n  \n  .glass-effect {\n    backdrop-filter: blur(10px);\n    background: hsl(var(--card) / 0.8);\n    border: 1px solid hsl(var(--border) / 0.5);\n  }\n  \n  .neon-glow {\n    box-shadow: 0 0 20px hsl(var(--primary) / 0.3);\n  }\n  \n  .crypto-card {\n    background: linear-gradient(135deg, hsl(var(--card)) 0%, hsl(var(--muted)) 100%);\n    border: 1px solid hsl(var(--primary) / 0.2);\n  }\n  \n  .stats-card {\n    @apply relative overflow-hidden rounded-xl border bg-card text-card-foreground shadow-sm;\n    transition: all 0.3s ease;\n  }\n  \n  .stats-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 25px hsl(var(--primary) / 0.1);\n  }\n  \n  .sidebar-gradient {\n    background: var(--sidebar-bg);\n  }\n  \n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n  \n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n  }\n  \n  .animate-pulse-slow {\n    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n  \n\n}\n\n@layer base {\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold;\n  }\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  .line-clamp-3 {\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n}\n\n/* Login Page Specific Theme Enhancements */\n.login-bg-light {\n  background: linear-gradient(135deg, \n    hsl(210, 40%, 98%) 0%, \n    hsl(220, 14%, 96%) 25%, \n    hsl(240, 20%, 99%) 50%, \n    hsl(210, 25%, 97%) 75%, \n    hsl(200, 30%, 95%) 100%\n  );\n}\n\n.dark .login-bg-dark {\n  background: linear-gradient(135deg, \n    hsl(222, 47%, 11%) 0%, \n    hsl(215, 25%, 15%) 25%, \n    hsl(220, 30%, 8%) 50%, \n    hsl(217, 33%, 12%) 75%, \n    hsl(222, 47%, 11%) 100%\n  );\n}\n\n.crypto .login-bg-crypto {\n  background: linear-gradient(135deg, \n    hsl(234, 52%, 8%) 0%, \n    hsl(220, 40%, 6%) 25%, \n    hsl(210, 50%, 4%) 50%, \n    hsl(233, 35%, 10%) 75%, \n    hsl(234, 52%, 8%) 100%\n  );\n}\n\n.neon .login-bg-neon {\n  background: linear-gradient(135deg, \n    hsl(270, 100%, 3%) 0%, \n    hsl(280, 80%, 5%) 25%, \n    hsl(260, 90%, 2%) 50%, \n    hsl(270, 70%, 6%) 75%, \n    hsl(270, 100%, 3%) 100%\n  );\n}\n\n/* Perfect text contrast for all themes */\n:root {\n  --login-text: hsl(20, 14.3%, 4.1%);\n  --login-text-muted: hsl(25, 5.3%, 44.7%);\n  --login-card-bg: hsl(0, 0%, 100%);\n  --login-card-border: hsl(20, 5.9%, 90%);\n}\n\n.dark {\n  --login-text: hsl(210, 40%, 98%);\n  --login-text-muted: hsl(215, 20.2%, 65.1%);\n  --login-card-bg: hsl(217, 33%, 17%);\n  --login-card-border: hsl(217.2, 32.6%, 17.5%);\n}\n\n.crypto {\n  --login-text: hsl(48, 100%, 96%);\n  --login-text-muted: hsl(213, 27%, 84%);\n  --login-card-bg: hsl(234, 40%, 12%);\n  --login-card-border: hsl(179, 82%, 51%, 0.2);\n}\n\n.neon {\n  --login-text: hsl(300, 100%, 95%);\n  --login-text-muted: hsl(270, 30%, 60%);\n  --login-card-bg: hsl(270, 80%, 8%);\n  --login-card-border: hsl(300, 100%, 50%, 0.3);\n}\n\n/* Enhanced neon glow effects for themes */\n.neon .neon-glow {\n  box-shadow: \n    0 0 20px hsl(300, 100%, 50%, 0.4),\n    0 0 40px hsl(300, 100%, 50%, 0.3),\n    0 0 60px hsl(300, 100%, 50%, 0.2);\n}\n\n.crypto .neon-glow {\n  box-shadow: \n    0 0 20px hsl(179, 82%, 51%, 0.4),\n    0 0 40px hsl(179, 82%, 51%, 0.3);\n}\n\n.dark .neon-glow {\n  box-shadow: \n    0 0 20px hsl(179, 82%, 51%, 0.3),\n    0 0 40px hsl(179, 82%, 51%, 0.2);\n}\n\n.light .neon-glow {\n  box-shadow: \n    0 0 20px hsl(221, 83%, 53%, 0.3),\n    0 0 40px hsl(221, 83%, 53%, 0.2);\n}\n\n/* Custom scrollbar styles */\n::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground));\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--foreground));\n}\n\n/* Admin panel specific styles */\n.admin-gradient {\n  background: linear-gradient(135deg, hsl(221, 83%, 53%) 0%, hsl(231, 83%, 63%) 100%);\n}\n\n.admin-card-shadow {\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n}\n\n.admin-card-shadow-lg {\n  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n}\n\n/* Status badge styles */\n.status-pending {\n  @apply bg-red-100 text-red-800;\n}\n\n.status-assigned {\n  @apply bg-yellow-100 text-yellow-800;\n}\n\n.status-in-progress {\n  @apply bg-blue-100 text-blue-800;\n}\n\n.status-resolved {\n  @apply bg-green-100 text-green-800;\n}\n\n.status-urgent {\n  @apply bg-red-100 text-red-800;\n}\n\n.status-high {\n  @apply bg-yellow-100 text-yellow-800;\n}\n\n.status-medium {\n  @apply bg-green-100 text-green-800;\n}\n\n.status-low {\n  @apply bg-gray-100 text-gray-800;\n}\n\n/* Form focus styles */\n.form-input:focus {\n  @apply ring-2 ring-blue-500 border-blue-500;\n}\n\n/* Button variants */\n.btn-primary {\n  @apply bg-blue-600 hover:bg-blue-700 text-white font-medium transition-colors duration-150;\n}\n\n.btn-secondary {\n  @apply bg-gray-100 hover:bg-gray-200 text-gray-900 font-medium transition-colors duration-150;\n}\n\n.btn-danger {\n  @apply bg-red-600 hover:bg-red-700 text-white font-medium transition-colors duration-150;\n}\n\n/* Animation utilities */\n.fade-in {\n  animation: fadeIn 0.2s ease-in-out;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(-4px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.slide-in-right {\n  animation: slideInRight 0.3s ease-out;\n}\n\n@keyframes slideInRight {\n  from {\n    opacity: 0;\n    transform: translateX(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n/* Loading spinner */\n.spinner {\n  @apply inline-block w-4 h-4 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin;\n}\n\n/* Data table enhancements */\n.data-table-row:hover {\n  @apply bg-slate-50;\n}\n\n.data-table-header {\n  @apply bg-slate-50 text-gray-500 uppercase tracking-wider text-xs font-medium;\n}\n\n/* Theme switcher dropdown */\n.theme-dropdown {\n  @apply bg-card border border-border shadow-xl rounded-lg overflow-hidden backdrop-blur-lg;\n  background: hsl(var(--card) / 0.95);\n}\n\n.theme-dropdown-item {\n  @apply px-3 py-2 text-sm font-medium text-card-foreground hover:bg-muted hover:text-foreground cursor-pointer transition-colors duration-150;\n}\n\n.theme-dropdown-item:hover {\n  background: hsl(var(--muted) / 0.8);\n}\n\n/* Enhanced animations for login page */\n@layer components {\n  .bg-grid-pattern {\n    background-image: \n      linear-gradient(to right, hsl(var(--border)) 1px, transparent 1px),\n      linear-gradient(to bottom, hsl(var(--border)) 1px, transparent 1px);\n    background-size: 50px 50px;\n  }\n  \n  .animate-float-delay-1 {\n    animation: float 6s ease-in-out infinite;\n    animation-delay: 1s;\n  }\n  \n  .animate-float-delay-2 {\n    animation: float 6s ease-in-out infinite;\n    animation-delay: 2s;\n  }\n  \n  .animate-pulse-delay-1 {\n    animation: pulse 2s ease-in-out infinite;\n    animation-delay: 1s;\n  }\n  \n  .animate-pulse-delay-2 {\n    animation: pulse 2s ease-in-out infinite;\n    animation-delay: 2s;\n  }\n  \n  .shadow-3xl {\n    box-shadow: 0 35px 60px -12px rgba(0, 0, 0, 0.25);\n  }\n  \n  .login-card {\n    @apply backdrop-blur-2xl bg-card/90 border border-border/50 shadow-2xl rounded-2xl lg:rounded-3xl;\n    position: relative;\n    overflow: hidden;\n  }\n  \n  .login-card::before {\n    content: '';\n    @apply absolute inset-0 rounded-2xl lg:rounded-3xl opacity-0 transition-opacity duration-500;\n    background: linear-gradient(135deg, \n      hsl(var(--primary) / 0.1) 0%, \n      transparent 50%,\n      hsl(var(--accent) / 0.1) 100%\n    );\n  }\n  \n  .login-card:hover::before {\n    @apply opacity-100;\n  }\n}\n\n/* Mobile responsive adjustments */\n@media (max-width: 768px) {\n  .mobile-stack {\n    @apply flex-col space-y-2 space-x-0;\n  }\n  \n  .mobile-full-width {\n    @apply w-full;\n  }\n  \n  .mobile-text-sm {\n    @apply text-sm;\n  }\n  \n  .bg-grid-pattern {\n    background-size: 30px 30px;\n  }\n}\n","size_bytes":18935},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\" | \"crypto\" | \"neon\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"dark\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n  storageKey = \"wificare-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\", \"crypto\", \"neon\");\n\n    if (theme === \"light\") {\n      root.classList.add(\"light\");\n    } else if (theme === \"dark\") {\n      root.classList.add(\"dark\");\n    } else if (theme === \"crypto\") {\n      root.classList.add(\"crypto\");\n    } else if (theme === \"neon\") {\n      root.classList.add(\"neon\");\n    }\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};","size_bytes":1661},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\ninterface User {\n  id: number;\n  email: string;\n  username: string;\n  role: 'super-admin' | 'admin' | 'manager';\n}\n\ninterface AuthState {\n  user: User | null;\n  token: string | null;\n  isAuthenticated: boolean;\n  login: (user: User, token: string) => void;\n  logout: () => void;\n  hasPermission: (permission: string) => boolean;\n}\n\nconst permissions = {\n  'super-admin': [\n    'view-dashboard',\n    'manage-engineers',\n    'assign-complaints',\n    'manage-users',\n    'manage-products',\n    'manage-plans',\n    'manage-installations',\n    'manage-leads',\n    'manage-notifications',\n    'view-analytics',\n    'system-settings',\n    'manage-support',\n  ],\n  'admin': [\n    'view-dashboard',\n    'manage-engineers',\n    'assign-complaints',\n    'manage-users',\n    'manage-products',\n    'manage-plans',\n    'manage-installations',\n    'manage-leads',\n    'manage-notifications',\n    'view-analytics',\n    'manage-support',\n  ],\n  'manager': [\n    'view-dashboard',\n    'assign-complaints',\n    'manage-installations',\n    'manage-leads',\n    'view-analytics',\n  ],\n};\n\nexport const useAuth = create<AuthState>()(\n  persist(\n    (set, get) => ({\n      user: null,\n      token: null,\n      isAuthenticated: false,\n      login: (user, token) => {\n        set({\n          user,\n          token,\n          isAuthenticated: true,\n        });\n      },\n      logout: () => {\n        set({\n          user: null,\n          token: null,\n          isAuthenticated: false,\n        });\n      },\n      hasPermission: (permission) => {\n        const { user } = get();\n        if (!user) return false;\n        return permissions[user.role]?.includes(permission) || false;\n      },\n    }),\n    {\n      name: 'auth-storage',\n    }\n  )\n);\n","size_bytes":1799},"client/src/lib/dummyData.ts":{"content":"// Complete dummy data for the admin panel - no backend dependencies\n\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  role: 'super-admin' | 'admin' | 'manager';\n  isActive: boolean;\n  createdAt: string;\n}\n\nexport interface Customer {\n  id: number;\n  name: string;\n  email: string;\n  phone: string;\n  address: string;\n  location: string;\n  serviceProvider: string | null;\n  planName: string | null;\n  activationDate: string | null;\n  expirationDate: string | null;\n  balanceDue: number;\n  staticIp: string | null;\n  macAddress: string | null;\n  status: 'active' | 'suspended' | 'expired' | 'pending';\n  area: 'rural' | 'urban';\n  mode: 'online' | 'offline';\n  isActive: boolean;\n  createdAt: string;\n}\n\nexport interface Engineer {\n  id: number;\n  name: string;\n  email: string;\n  phone: string;\n  location: string;\n  specialization: 'Network' | 'Hardware' | 'Software' | 'Installation' | 'Maintenance';\n  rating: number;\n  completedJobs: number;\n  activeJobs: number;\n  isActive: boolean;\n  createdAt: string;\n}\n\nexport interface ServicePlan {\n  id: number;\n  name: string;\n  provider: 'jio' | 'airtel' | 'bsnl' | 'my-internet';\n  speed: string;\n  price: number;\n  validity: number | string;\n  description: string;\n  features: string[];\n  subscribers: number;\n  rating: number;\n  isActive: boolean;\n  createdAt: string;\n  title?: string;\n  dataLimit?: string;\n  logo?: string;\n  benefits?: string;\n  planType?: 'Basic' | 'Premium' | 'Enterprise' | 'Gold';\n}\n\n// IPTV Plans Interface\nexport interface IptvPlan {\n  id: number;\n  name: string;\n  totalChannels: number;\n  payChannels: number;\n  freeToAirChannels: number;\n  price: number;\n  lcoMarginPercent: number;\n  distributorMarginPercent: number;\n  channelList: string[];\n  planType: 'lite' | 'standard' | 'premium';\n  quality: 'HD' | '4K' | 'SD';\n  provider: string;\n  logo?: string;\n  description: string;\n  isActive: boolean;\n  createdAt: string;\n}\n\n// OTT Plans Interface\nexport interface OttPlan {\n  id: number;\n  title: string;\n  price: number;\n  speedBeforeLimit: string;\n  speedAfterLimit: string;\n  dataLimitGB?: number;\n  isUnlimited: boolean;\n  validity: string;\n  ottApps: string[];\n  callBenefit?: string;\n  provider: string;\n  logo?: string;\n  description: string;\n  planType: string;\n  isActive: boolean;\n  createdAt: string;\n}\n\n// Fibre Plans Interface\nexport interface FibrePlan {\n  id: number;\n  title: string;\n  price: number;\n  validity: string;\n  speed: string;\n  dataLimit: string;\n  provider: string;\n  logo?: string;\n  benefits?: string;\n  description: string;\n  planType: 'Basic' | 'Standard' | 'Premium';\n  isActive: boolean;\n  createdAt: string;\n}\n\nexport interface NewInstallation {\n  id: number;\n  customerName: string;\n  email: string;\n  phone: string;\n  alternatePhone?: string;\n  address: string;\n  location: string;\n  aadharFront?: string; // File path/URL for Aadhar front\n  aadharBack?: string;  // File path/URL for Aadhar back\n  passportPhoto?: string; // File path/URL for passport size photo\n  preferredPlan: string | null;\n  requestType: 'residential' | 'commercial';\n  status: 'pending' | 'confirmed' | 'rejected';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  estimatedCost: number | null;\n  notes: string | null;\n  assignedEngineerId: number | null;\n  assignedEngineerName: string | null;\n  scheduledDate: string | null;\n  installationDate: string | null;\n  rejectionReason: string | null;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Lead {\n  id: number;\n  name: string;\n  email: string | null;\n  phone: string;\n  address: string; // Added address field\n  location: string | null;\n  source: 'website' | 'ivr' | 'whatsapp' | 'referral' | 'social_media';\n  inquiryType: 'general' | 'pricing' | 'technical' | 'support';\n  message: string | null;\n  status: 'new' | 'contacted' | 'qualified' | 'converted' | 'closed';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  isContactedByManager: boolean;\n  assignedTo: number | null;\n  assignedToName: string | null;\n  followUpDate: string | null;\n  lastContactDate: string | null;\n  conversionProbability: number;\n  estimatedValue: number | null;\n  notes: string | null;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Complaint {\n  id: number;\n  customerId: number;\n  customerName: string;\n  title: string;\n  description: string;\n  priority: 'urgent' | 'high' | 'medium' | 'low';\n  status: 'pending' | 'assigned' | 'in-progress' | 'visited' | 'resolved' | 'not-resolved';\n  engineerId: number | null;\n  engineerName: string | null;\n  location: string;\n  attachments?: string[];\n  resolution?: string;\n  rating?: number;\n  feedback?: string;\n  createdAt: string;\n  updatedAt: string;\n  resolvedAt?: string;\n}\n\nexport interface SupportTicket {\n  id: number;\n  customerId: number;\n  customerName: string;\n  subject: string;\n  message: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  status: 'open' | 'in-progress' | 'resolved' | 'closed';\n  category: 'technical' | 'billing' | 'general' | 'complaint';\n  assignedTo?: number;\n  assignedToName?: string;\n  response?: string;\n  rating?: number;\n  feedback?: string;\n  tags: string[];\n  attachments: string[];\n  slaBreached: boolean;\n  escalated: boolean;\n  createdAt: string;\n  updatedAt: string;\n  resolvedAt?: string;\n}\n\nexport interface Notification {\n  id: number;\n  title: string;\n  message: string;\n  type: 'info' | 'warning' | 'error' | 'success';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  recipientType: string;\n  recipients: string[];\n  sentBy: number;\n  sentByName: string;\n  sentAt: string;\n  deliveredCount: number;\n  readCount: number;\n  totalRecipients: number;\n  status: 'sent' | 'scheduled' | 'failed' | 'draft';\n  channels: {\n    push: boolean;\n    email: boolean;\n    sms: boolean;\n  };\n}\n\nexport interface DashboardStats {\n  totalComplaints: number;\n  activeComplaints: number;\n  resolvedToday: number;\n  avgResolutionTime: number;\n  totalEngineers: number;\n  activeEngineers: number;\n  totalCustomers: number;\n  networkUptime: number;\n  customerSatisfaction: number;\n  monthlyRevenue: number;\n}\n\n// Product Management Interfaces\nexport interface Product {\n  id: number;\n  name: string;\n  model: string;\n  brand: string;\n  category: 'modem' | 'router' | 'cable' | 'antenna' | 'adapter' | 'switch' | 'extender' | 'fiber-cable' | 'power-supply';\n  productType: 'user-sale' | 'engineer-only';\n  description: string;\n  specifications: {\n    [key: string]: string;\n  };\n  price: number;\n  stock: number;\n  lowStockThreshold: number;\n  status: 'active' | 'inactive' | 'discontinued';\n  images: string[];\n  warranty: string;\n  supplier: string;\n  supplierContact: string;\n  location: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Order {\n  id: number;\n  orderNumber: string;\n  productId: number;\n  productName: string;\n  customerId?: number;\n  customerName?: string;\n  engineerId?: number;\n  engineerName?: string;\n  orderType: 'user-purchase' | 'engineer-request' | 'stock-replenishment';\n  quantity: number;\n  unitPrice: number;\n  totalAmount: number;\n  status: 'pending' | 'approved' | 'shipped' | 'delivered' | 'cancelled';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  deliveryAddress: string;\n  notes?: string;\n  createdAt: string;\n  updatedAt: string;\n  deliveredAt?: string;\n}\n\nexport interface ProductFeedback {\n  id: number;\n  productId: number;\n  productName: string;\n  customerId?: number;\n  customerName?: string;\n  engineerId?: number;\n  engineerName?: string;\n  rating: number;\n  title: string;\n  comment: string;\n  pros: string[];\n  cons: string[];\n  wouldRecommend: boolean;\n  verifiedPurchase: boolean;\n  helpfulVotes: number;\n  createdAt: string;\n}\n\n// Dummy data generation functions\nexport const generateDummyUsers = (): User[] => [\n  {\n    id: 1,\n    username: \"admin\",\n    email: \"admin@company.com\",\n    role: \"super-admin\",\n    isActive: true,\n    createdAt: \"2024-01-15T10:00:00Z\"\n  },\n  {\n    id: 2,\n    username: \"manager\",\n    email: \"manager@company.com\",\n    role: \"manager\",\n    isActive: true,\n    createdAt: \"2024-01-20T10:00:00Z\"\n  },\n  {\n    id: 3,\n    username: \"staff\",\n    email: \"staff@company.com\",\n    role: \"admin\",\n    isActive: true,\n    createdAt: \"2024-02-01T10:00:00Z\"\n  }\n];\n\nexport const generateDummyCustomers = (): Customer[] => [\n  {\n    id: 1,\n    name: \"Rajesh Kumar\",\n    email: \"rajesh@email.com\",\n    phone: \"+91 98765 43210\",\n    address: \"123 Main St, Mumbai Central\",\n    location: \"Mumbai Central\",\n    serviceProvider: \"Jio Fiber\",\n    planName: \"Jio Fiber 100 Mbps\",\n    activationDate: \"2024-01-15\",\n    expirationDate: \"2024-12-15\",\n    balanceDue: 0,\n    staticIp: \"192.168.1.100\",\n    macAddress: \"AA:BB:CC:DD:EE:01\",\n    status: \"active\",\n    area: \"urban\",\n    mode: \"online\",\n    isActive: true,\n    createdAt: \"2024-01-15T10:00:00Z\"\n  },\n  {\n    id: 2,\n    name: \"Priya Sharma\",\n    email: \"priya@email.com\",\n    phone: \"+91 87654 32109\",\n    address: \"456 Park Ave, Delhi NCR\",\n    location: \"Delhi NCR\",\n    serviceProvider: null,\n    planName: null,\n    activationDate: null,\n    expirationDate: null,\n    balanceDue: 0,\n    staticIp: null,\n    macAddress: null,\n    status: \"pending\",\n    area: \"urban\",\n    mode: \"offline\",\n    isActive: true,\n    createdAt: \"2024-02-01T10:00:00Z\"\n  },\n  {\n    id: 3,\n    name: \"Amit Patel\",\n    email: \"amit@email.com\",\n    phone: \"+91 76543 21098\",\n    address: \"789 Tech Park, Bangalore\",\n    location: \"Bangalore\",\n    serviceProvider: \"BSNL Broadband\",\n    planName: \"BSNL Standard 50 Mbps\",\n    activationDate: \"2023-12-01\",\n    expirationDate: \"2024-11-30\",\n    balanceDue: 1200,\n    staticIp: \"192.168.1.102\",\n    macAddress: \"AA:BB:CC:DD:EE:03\",\n    status: \"suspended\",\n    area: \"rural\",\n    mode: \"offline\",\n    isActive: false,\n    createdAt: \"2023-12-01T10:00:00Z\"\n  },\n  {\n    id: 4,\n    name: \"Sunita Verma\",\n    email: \"sunita.verma@email.com\",\n    phone: \"+91 91234 56789\",\n    address: \"321 Rural Lane, Patna\",\n    location: \"Patna\",\n    serviceProvider: \"Airtel\",\n    planName: \"Airtel Xstream 200 Mbps\",\n    activationDate: \"2024-02-01\",\n    expirationDate: \"2025-01-31\",\n    balanceDue: 500,\n    staticIp: \"192.168.1.101\",\n    macAddress: \"AA:BB:CC:DD:EE:02\",\n    status: \"active\",\n    area: \"rural\",\n    mode: \"online\",\n    isActive: true,\n    createdAt: \"2024-02-01T10:00:00Z\"\n  },\n  {\n    id: 5,\n    name: \"Vikram Singh\",\n    email: \"vikram.singh@email.com\",\n    phone: \"+91 98123 45678\",\n    address: \"654 Tech Park, Hyderabad\",\n    location: \"Hyderabad\",\n    serviceProvider: \"My Internet\",\n    planName: \"My Internet Premium 300 Mbps\",\n    activationDate: \"2024-03-10\",\n    expirationDate: \"2025-03-09\",\n    balanceDue: 0,\n    staticIp: \"192.168.1.103\",\n    macAddress: \"AA:BB:CC:DD:EE:04\",\n    status: \"active\",\n    area: \"urban\",\n    mode: \"online\",\n    isActive: true,\n    createdAt: \"2024-03-10T10:00:00Z\"\n  }\n];\n\nexport const generateDummyEngineers = (): Engineer[] => [\n  {\n    id: 1,\n    name: \"Mike Johnson\",\n    email: \"mike.johnson@company.com\",\n    phone: \"+91 98765 11111\",\n    location: \"Mumbai Central\",\n    specialization: \"Network\",\n    rating: 87,\n    completedJobs: 145,\n    activeJobs: 3,\n    isActive: true,\n    createdAt: \"2024-01-10T10:00:00Z\"\n  },\n  {\n    id: 2,\n    name: \"Sarah Davis\",\n    email: \"sarah.davis@company.com\",\n    phone: \"+91 98765 22222\",\n    location: \"Delhi NCR\",\n    specialization: \"Hardware\",\n    rating: 92,\n    completedJobs: 128,\n    activeJobs: 2,\n    isActive: true,\n    createdAt: \"2024-01-12T10:00:00Z\"\n  },\n  {\n    id: 3,\n    name: \"Tom Wilson\",\n    email: \"tom.wilson@company.com\",\n    phone: \"+91 98765 33333\",\n    location: \"Bangalore\",\n    specialization: \"Software\",\n    rating: 89,\n    completedJobs: 167,\n    activeJobs: 4,\n    isActive: true,\n    createdAt: \"2024-01-08T10:00:00Z\"\n  },\n  {\n    id: 4,\n    name: \"Jennifer Lee\",\n    email: \"jennifer.lee@company.com\",\n    phone: \"+91 98765 44444\",\n    location: \"Chennai\",\n    specialization: \"Installation\",\n    rating: 94,\n    completedJobs: 203,\n    activeJobs: 1,\n    isActive: true,\n    createdAt: \"2024-01-05T10:00:00Z\"\n  },\n  {\n    id: 5,\n    name: \"David Brown\",\n    email: \"david.brown@company.com\",\n    phone: \"+91 98765 55555\",\n    location: \"Pune\",\n    specialization: \"Maintenance\",\n    rating: 85,\n    completedJobs: 98,\n    activeJobs: 5,\n    isActive: true,\n    createdAt: \"2024-01-18T10:00:00Z\"\n  }\n];\n\nexport const generateDummyServicePlans = (): ServicePlan[] => [\n  {\n    id: 1,\n    name: \"JioFiber Gold Plan\",\n    title: \"JioFiber Gold Plan - 1 Year\",\n    provider: \"jio\",\n    speed: \"300 Mbps\",\n    price: 8499,\n    validity: \"12 Months\",\n    dataLimit: \"Unlimited\",\n    description: \"JioFiber Gold Plan offers blazing 300 Mbps speed with unlimited data, making it ideal for large families or work-from-home setups. Includes major OTT subscriptions.\",\n    benefits: \"Netflix + Prime + Disney+ Hotstar\",\n    planType: \"Premium\",\n    logo: \"https://logos-world.net/wp-content/uploads/2020/11/Jio-Logo.png\",\n    features: [\"Unlimited Data\", \"Netflix Premium\", \"Amazon Prime\", \"Disney+ Hotstar\", \"Free Router\", \"24/7 Support\"],\n    subscribers: 3250,\n    rating: 4.8,\n    isActive: true,\n    createdAt: \"2024-01-15T10:00:00Z\"\n  },\n  {\n    id: 2,\n    name: \"JioFiber Premium\",\n    title: \"JioFiber Premium - 6 Months\",\n    provider: \"jio\",\n    speed: \"100 Mbps\",\n    price: 3999,\n    validity: \"6 Months\",\n    dataLimit: \"Unlimited\",\n    description: \"High-speed internet perfect for streaming, gaming, and work from home requirements\",\n    benefits: \"Netflix Basic + Disney+ Hotstar\",\n    planType: \"Premium\",\n    logo: \"https://logos-world.net/wp-content/uploads/2020/11/Jio-Logo.png\",\n    features: [\"Unlimited Data\", \"Netflix Basic\", \"Disney+ Hotstar\", \"Free Router\", \"Installation Support\"],\n    subscribers: 2100,\n    rating: 4.5,\n    isActive: true,\n    createdAt: \"2024-01-15T10:00:00Z\"\n  },\n  {\n    id: 3,\n    name: \"Airtel Xstream Fiber\",\n    title: \"Airtel Xstream Fiber - Premium\",\n    provider: \"airtel\",\n    speed: \"200 Mbps\",\n    price: 5999,\n    validity: \"12 Months\",\n    dataLimit: \"Unlimited\",\n    description: \"Ultra-fast fiber connection with premium OTT benefits and superior customer service\",\n    benefits: \"Airtel Xstream + Netflix + Amazon Prime\",\n    planType: \"Premium\",\n    logo: \"https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Airtel_logo.svg/512px-Airtel_logo.svg.png\",\n    features: [\"Unlimited Data\", \"Airtel Xstream Premium\", \"Netflix\", \"Amazon Prime\", \"Free Installation\", \"Wi-Fi 6 Router\"],\n    subscribers: 1850,\n    rating: 4.6,\n    isActive: true,\n    createdAt: \"2024-01-15T10:00:00Z\"\n  },\n  {\n    id: 4,\n    name: \"BSNL Fiber Enterprise\",\n    title: \"BSNL Fiber Enterprise - Business\",\n    provider: \"bsnl\",\n    speed: \"500 Mbps\",\n    price: 12999,\n    validity: \"12 Months\",\n    dataLimit: \"Unlimited\",\n    description: \"Enterprise-grade fiber solution with dedicated support and guaranteed uptime for businesses\",\n    benefits: \"Dedicated Support + Static IP + Business Email\",\n    planType: \"Enterprise\",\n    features: [\"Unlimited Data\", \"Static IP\", \"Dedicated Support\", \"99.9% Uptime SLA\", \"Business Email\", \"Advanced Router\"],\n    subscribers: 450,\n    rating: 4.4,\n    isActive: true,\n    createdAt: \"2024-01-15T10:00:00Z\"\n  },\n  {\n    id: 5,\n    name: \"Airtel Basic\",\n    title: \"Airtel Basic - Starter Pack\",\n    provider: \"airtel\",\n    speed: \"40 Mbps\",\n    price: 599,\n    validity: 30,\n    dataLimit: \"500 GB\",\n    description: \"Perfect starter plan for basic internet needs with essential OTT benefits\",\n    benefits: \"Airtel Xstream App\",\n    planType: \"Basic\",\n    features: [\"500 GB Data\", \"Airtel Xstream App\", \"Free Installation\", \"Email Support\"],\n    subscribers: 950,\n    rating: 4.1,\n    isActive: true,\n    createdAt: \"2024-01-15T10:00:00Z\"\n  },\n  {\n    id: 6,\n    name: \"My Internet Pro\",\n    title: \"My Internet Pro - Ultimate\",\n    provider: \"my-internet\",\n    speed: \"1 Gbps\",\n    price: 15999,\n    validity: \"12 Months\",\n    dataLimit: \"Unlimited\",\n    description: \"Ultra-premium gigabit connection for power users, content creators, and tech enthusiasts\",\n    benefits: \"All OTT Apps + Gaming Server Access\",\n    planType: \"Enterprise\",\n    features: [\"1 Gbps Speed\", \"All OTT Subscriptions\", \"Gaming Server Access\", \"Priority Support\", \"Wi-Fi 6E Router\", \"Free Setup\"],\n    subscribers: 125,\n    rating: 4.9,\n    isActive: true,\n    createdAt: \"2024-01-15T10:00:00Z\"\n  },\n  {\n    id: 7,\n    name: \"BSNL Basic\",\n    title: \"BSNL Basic - Economic\",\n    provider: \"bsnl\",\n    speed: \"25 Mbps\",\n    price: 299,\n    validity: 30,\n    dataLimit: \"200 GB\",\n    description: \"Most affordable option for basic browsing and essential connectivity needs\",\n    benefits: \"Email Support\",\n    planType: \"Basic\",\n    features: [\"200 GB Data\", \"Basic Router\", \"Email Support\", \"Standard Installation\"],\n    subscribers: 680,\n    rating: 3.8,\n    isActive: true,\n    createdAt: \"2024-01-15T10:00:00Z\"\n  },\n  {\n    id: 8,\n    name: \"JioFiber Entertainment\",\n    title: \"JioFiber Entertainment - Family Pack\",\n    provider: \"jio\",\n    speed: \"150 Mbps\",\n    price: 1299,\n    validity: 90,\n    dataLimit: \"Unlimited\",\n    description: \"Perfect family entertainment package with multiple OTT subscriptions and high-speed internet\",\n    benefits: \"Netflix + Prime + 10 OTT Apps\",\n    planType: \"Gold\",\n    features: [\"Unlimited Data\", \"Netflix Standard\", \"Amazon Prime\", \"Disney+ Hotstar\", \"Sony LIV\", \"ZEE5\", \"Family Router\"],\n    subscribers: 1650,\n    rating: 4.7,\n    isActive: true,\n    createdAt: \"2024-01-15T10:00:00Z\"\n  }\n];\n\nexport const generateDummyComplaints = (): Complaint[] => [\n  {\n    id: 1,\n    customerId: 1,\n    customerName: \"Rajesh Kumar\",\n    title: \"Internet Connection Down\",\n    description: \"No internet connection for 2 hours in Building A\",\n    priority: \"high\",\n    status: \"pending\",\n    location: \"Mumbai Central\",\n    engineerId: null,\n    engineerName: null,\n    createdAt: \"2024-01-15T10:30:00Z\",\n    updatedAt: \"2024-01-15T10:30:00Z\"\n  },\n  {\n    id: 2,\n    customerId: 2,\n    customerName: \"Priya Sharma\",\n    title: \"Slow WiFi Speed\",\n    description: \"WiFi speed is very slow in conference room\",\n    priority: \"medium\",\n    status: \"assigned\",\n    location: \"Delhi NCR\",\n    engineerId: 1,\n    engineerName: \"Mike Johnson\",\n    createdAt: \"2024-01-14T14:20:00Z\",\n    updatedAt: \"2024-01-15T09:15:00Z\"\n  },\n  {\n    id: 3,\n    customerId: 3,\n    customerName: \"Amit Patel\",\n    title: \"Router Blinking Red\",\n    description: \"Router status light is blinking red constantly\",\n    priority: \"high\",\n    status: \"in-progress\",\n    location: \"Bangalore\",\n    engineerId: 2,\n    engineerName: \"Sarah Davis\",\n    createdAt: \"2024-01-13T16:45:00Z\",\n    updatedAt: \"2024-01-14T11:30:00Z\"\n  },\n  {\n    id: 4,\n    customerId: 4,\n    customerName: \"Sunita Verma\",\n    title: \"WiFi Password Issues\",\n    description: \"Unable to connect devices with provided password\",\n    priority: \"low\",\n    status: \"resolved\",\n    location: \"Patna\",\n    engineerId: 3,\n    engineerName: \"Tom Wilson\",\n    resolution: \"Password reset and shared with customer\",\n    rating: 5,\n    feedback: \"Quick resolution, very satisfied\",\n    createdAt: \"2024-01-12T09:15:00Z\",\n    updatedAt: \"2024-01-13T15:20:00Z\",\n    resolvedAt: \"2024-01-13T15:20:00Z\"\n  },\n  {\n    id: 5,\n    customerId: 5,\n    customerName: \"Vikram Singh\",\n    title: \"Network Outage\",\n    description: \"Complete network outage affecting entire floor\",\n    priority: \"urgent\",\n    status: \"pending\",\n    location: \"Hyderabad\",\n    engineerId: null,\n    engineerName: null,\n    createdAt: \"2024-01-15T08:00:00Z\",\n    updatedAt: \"2024-01-15T08:00:00Z\"\n  }\n];\n\nexport const generateDummySupportTickets = (): SupportTicket[] => [\n  {\n    id: 1,\n    customerId: 1,\n    customerName: \"Rajesh Kumar\",\n    subject: \"Billing inquiry for December\",\n    message: \"I have questions about my December bill charges\",\n    priority: \"medium\",\n    status: \"open\",\n    category: \"billing\",\n    tags: [\"billing\", \"december\", \"charges\"],\n    attachments: [],\n    slaBreached: false,\n    escalated: false,\n    createdAt: \"2024-01-15T09:00:00Z\",\n    updatedAt: \"2024-01-15T09:00:00Z\"\n  },\n  {\n    id: 2,\n    customerId: 2,\n    customerName: \"Priya Sharma\",\n    subject: \"Technical support needed\",\n    message: \"Need help configuring my new router settings\",\n    priority: \"high\",\n    status: \"in-progress\",\n    category: \"technical\",\n    assignedTo: 1,\n    assignedToName: \"Mike Johnson\",\n    tags: [\"router\", \"configuration\", \"technical\"],\n    attachments: [\"router_model.jpg\"],\n    slaBreached: false,\n    escalated: false,\n    createdAt: \"2024-01-14T11:30:00Z\",\n    updatedAt: \"2024-01-15T08:45:00Z\"\n  },\n  {\n    id: 3,\n    customerId: 3,\n    customerName: \"Amit Patel\",\n    subject: \"Service complaint\",\n    message: \"Frequent disconnections during peak hours\",\n    priority: \"high\",\n    status: \"resolved\",\n    category: \"complaint\",\n    assignedTo: 2,\n    assignedToName: \"Sarah Davis\",\n    response: \"Network optimization completed in your area\",\n    rating: 4,\n    feedback: \"Issue resolved quickly\",\n    tags: [\"disconnection\", \"peak-hours\", \"network\"],\n    attachments: [],\n    slaBreached: false,\n    escalated: false,\n    createdAt: \"2024-01-10T14:20:00Z\",\n    updatedAt: \"2024-01-12T16:30:00Z\",\n    resolvedAt: \"2024-01-12T16:30:00Z\"\n  }\n];\n\n// IPTV Plans Dummy Data\nexport const generateDummyIptvPlans = (): IptvPlan[] => [\n  {\n    id: 1,\n    name: \"Skypro Lite Play HD\",\n    totalChannels: 100,\n    payChannels: 80,\n    freeToAirChannels: 100,\n    price: 399,\n    lcoMarginPercent: 10,\n    distributorMarginPercent: 5,\n    channelList: [\"Star Plus\", \"Zee TV\", \"Sony Entertainment\", \"Colors\", \"Zee Cinema\", \"Star Movies\"],\n    planType: \"lite\",\n    quality: \"HD\",\n    provider: \"SkyPro Networks\",\n    logo: \"https://via.placeholder.com/150x100/007BFF/FFFFFF?text=SkyPro\",\n    description: \"Affordable HD IPTV plan with mix of popular channels.\",\n    isActive: true,\n    createdAt: \"2025-01-15T20:29:18.170Z\"\n  },\n  {\n    id: 2,\n    name: \"DishTV Premium 4K\",\n    totalChannels: 250,\n    payChannels: 200,\n    freeToAirChannels: 150,\n    price: 899,\n    lcoMarginPercent: 15,\n    distributorMarginPercent: 8,\n    channelList: [\"HBO\", \"Star Gold\", \"Zee Premium\", \"Sony Max\", \"Discovery\", \"National Geographic\"],\n    planType: \"premium\",\n    quality: \"4K\",\n    provider: \"DishTV\",\n    logo: \"https://via.placeholder.com/150x100/FF6B35/FFFFFF?text=DishTV\",\n    description: \"Premium 4K IPTV experience with extensive channel lineup.\",\n    isActive: true,\n    createdAt: \"2025-01-15T20:29:18.170Z\"\n  },\n  {\n    id: 3,\n    name: \"TataSky Standard\",\n    totalChannels: 180,\n    payChannels: 140,\n    freeToAirChannels: 120,\n    price: 649,\n    lcoMarginPercent: 12,\n    distributorMarginPercent: 6,\n    channelList: [\"ESPN\", \"Star Sports\", \"Sony Six\", \"Zee Sports\", \"MTV\", \"VH1\"],\n    planType: \"standard\",\n    quality: \"HD\",\n    provider: \"Tata Sky\",\n    logo: \"https://via.placeholder.com/150x100/1B998B/FFFFFF?text=TataSky\",\n    description: \"Balanced standard plan with sports and entertainment channels.\",\n    isActive: true,\n    createdAt: \"2025-01-15T20:29:18.170Z\"\n  }\n];\n\n// OTT Plans Dummy Data\nexport const generateDummyOttPlans = (): OttPlan[] => [\n  {\n    id: 1,\n    title: \"Fibre Basic Plus OTT 699\",\n    price: 699,\n    speedBeforeLimit: \"100 Mbps\",\n    speedAfterLimit: \"4 Mbps\",\n    dataLimitGB: 4000,\n    isUnlimited: true,\n    validity: \"1 Month\",\n    ottApps: [\"Hotstar\", \"Hungama\", \"Shemaroo\", \"Lionsgate\", \"Epicon\"],\n    callBenefit: \"Unlimited calls to any Network\",\n    provider: \"BSNL\",\n    logo: \"https://via.placeholder.com/150x100/FF9500/FFFFFF?text=BSNL\",\n    description: \"Up to 100 Mbps till 4000 GB, 4 Mbps beyond. Free access to 6 OTT platforms.\",\n    planType: \"ott\",\n    isActive: true,\n    createdAt: \"2025-01-15T18:46:03.779Z\"\n  },\n  {\n    id: 2,\n    title: \"JioFiber OTT Supreme\",\n    price: 1299,\n    speedBeforeLimit: \"150 Mbps\",\n    speedAfterLimit: \"10 Mbps\",\n    dataLimitGB: 0,\n    isUnlimited: true,\n    validity: \"1 Month\",\n    ottApps: [\"Netflix\", \"Amazon Prime\", \"Disney+ Hotstar\", \"Sony LIV\", \"ZEE5\", \"Voot\"],\n    callBenefit: \"Unlimited calls + Free JioSaavn\",\n    provider: \"Reliance Jio\",\n    logo: \"https://via.placeholder.com/150x100/0066CC/FFFFFF?text=Jio\",\n    description: \"Supreme unlimited plan with premium OTT apps and unlimited calling.\",\n    planType: \"ott\",\n    isActive: true,\n    createdAt: \"2025-01-15T18:46:03.779Z\"\n  },\n  {\n    id: 3,\n    title: \"Airtel Xstream Fiber\",\n    price: 999,\n    speedBeforeLimit: \"200 Mbps\",\n    speedAfterLimit: \"5 Mbps\",\n    dataLimitGB: 3500,\n    isUnlimited: false,\n    validity: \"1 Month\",\n    ottApps: [\"Airtel Xstream\", \"Amazon Prime\", \"Disney+ Hotstar\", \"ZEE5\"],\n    callBenefit: \"Unlimited calls + Free Wynk Music\",\n    provider: \"Bharti Airtel\",\n    logo: \"https://via.placeholder.com/150x100/E60026/FFFFFF?text=Airtel\",\n    description: \"High-speed fiber with premium OTT bundle and unlimited voice calls.\",\n    planType: \"ott\",\n    isActive: true,\n    createdAt: \"2025-01-15T18:46:03.779Z\"\n  }\n];\n\n// Fibre Plans Dummy Data\nexport const generateDummyFibrePlans = (): FibrePlan[] => [\n  {\n    id: 1,\n    title: \"Airtel Wi-Fi Annual Saver Plan\",\n    price: 4999,\n    validity: \"12 Months\",\n    speed: \"200 Mbps\",\n    dataLimit: \"Unlimited\",\n    provider: \"Airtel\",\n    logo: \"https://via.placeholder.com/150x100/E60026/FFFFFF?text=Airtel\",\n    benefits: \"Free Netflix + Amazon Prime\",\n    description: \"Best value annual plan from Airtel offering 200 Mbps internet and unlimited usage, bundled with both Netflix and Amazon Prime access.\",\n    planType: \"Premium\",\n    isActive: true,\n    createdAt: \"2025-01-15T10:25:31.731Z\"\n  },\n  {\n    id: 2,\n    title: \"JioFiber Gigabit Pro\",\n    price: 8999,\n    validity: \"12 Months\",\n    speed: \"1 Gbps\",\n    dataLimit: \"Unlimited\",\n    provider: \"Reliance Jio\",\n    logo: \"https://via.placeholder.com/150x100/0066CC/FFFFFF?text=Jio\",\n    benefits: \"All Premium OTT + Gaming Bundle\",\n    description: \"Ultimate gigabit experience with all premium OTT platforms and gaming optimizations.\",\n    planType: \"Premium\",\n    isActive: true,\n    createdAt: \"2025-01-15T10:25:31.731Z\"\n  },\n  {\n    id: 3,\n    title: \"BSNL Fiber Basic\",\n    price: 1999,\n    validity: \"6 Months\",\n    speed: \"50 Mbps\",\n    dataLimit: \"500 GB\",\n    provider: \"BSNL\",\n    logo: \"https://via.placeholder.com/150x100/FF9500/FFFFFF?text=BSNL\",\n    benefits: \"Basic Email Support\",\n    description: \"Affordable fiber plan for basic internet needs with reliable connectivity.\",\n    planType: \"Basic\",\n    isActive: true,\n    createdAt: \"2025-01-15T10:25:31.731Z\"\n  },\n  {\n    id: 4,\n    title: \"VI Fiber Standard\",\n    price: 3499,\n    validity: \"6 Months\",\n    speed: \"100 Mbps\",\n    dataLimit: \"1 TB\",\n    provider: \"Vodafone Idea\",\n    logo: \"https://via.placeholder.com/150x100/E60000/FFFFFF?text=VI\",\n    benefits: \"VI Movies & TV + Priority Support\",\n    description: \"Standard fiber plan with good speed and data allowance for families.\",\n    planType: \"Standard\",\n    isActive: true,\n    createdAt: \"2025-01-15T10:25:31.731Z\"\n  }\n];\n\nexport const generateDummyNotifications = (): Notification[] => [\n  {\n    id: 1,\n    title: \"System Maintenance Scheduled\",\n    message: \"Network maintenance will be performed on January 20th from 2:00 AM to 4:00 AM\",\n    type: \"info\",\n    priority: \"medium\",\n    recipientType: \"all-customers\",\n    recipients: [\"all\"],\n    sentBy: 1,\n    sentByName: \"Admin User\",\n    sentAt: \"2024-01-15T10:00:00Z\",\n    deliveredCount: 1250,\n    readCount: 980,\n    totalRecipients: 1250,\n    status: \"sent\",\n    channels: {\n      push: true,\n      email: true,\n      sms: false\n    }\n  },\n  {\n    id: 2,\n    title: \"Emergency Network Issue\",\n    message: \"We are experiencing network issues in South Mumbai. Our team is working to resolve this.\",\n    type: \"warning\",\n    priority: \"high\",\n    recipientType: \"location-based\",\n    recipients: [\"Mumbai Central\", \"South Mumbai\"],\n    sentBy: 2,\n    sentByName: \"Manager User\",\n    sentAt: \"2024-01-14T16:30:00Z\",\n    deliveredCount: 450,\n    readCount: 420,\n    totalRecipients: 450,\n    status: \"sent\",\n    channels: {\n      push: true,\n      email: true,\n      sms: true\n    }\n  }\n];\n\nexport const generateDashboardStats = (): DashboardStats => ({\n  totalComplaints: 156,\n  activeComplaints: 23,\n  resolvedToday: 8,\n  avgResolutionTime: 4.2,\n  totalEngineers: 25,\n  activeEngineers: 22,\n  totalCustomers: 1847,\n  networkUptime: 99.2,\n  customerSatisfaction: 4.3,\n  monthlyRevenue: 2847650\n});\n\n// Product Management Dummy Data Generators\nexport const generateDummyProducts = (): Product[] => [\n  {\n    id: 1,\n    name: \"TP-Link Archer AX73 WiFi 6 Router\",\n    model: \"Archer AX73\",\n    brand: \"TP-Link\",\n    category: \"router\",\n    productType: \"user-sale\",\n    description: \"High-performance WiFi 6 router with 4804 Mbps + 574 Mbps dual-band speed, 6 high-gain antennas, and advanced security features.\",\n    specifications: {\n      \"WiFi Standard\": \"802.11ax (WiFi 6)\",\n      \"Speed\": \"AX5400 (4804 + 574 Mbps)\",\n      \"Antenna\": \"6 × high-gain antennas\",\n      \"Ports\": \"1 × Gigabit WAN, 4 × Gigabit LAN, 1 × USB 3.0\",\n      \"Processor\": \"1.5GHz Triple-Core CPU\",\n      \"Coverage\": \"Up to 2,500 sq ft\"\n    },\n    price: 12999,\n    stock: 45,\n    lowStockThreshold: 10,\n    status: \"active\",\n    images: [\"/products/tp-link-ax73-1.jpg\", \"/products/tp-link-ax73-2.jpg\"],\n    warranty: \"2 years\",\n    supplier: \"TP-Link India Pvt Ltd\",\n    supplierContact: \"+91 80 4017 9999\",\n    location: \"Mumbai Warehouse A\",\n    createdAt: \"2024-01-10T10:00:00Z\",\n    updatedAt: \"2024-01-20T15:30:00Z\"\n  },\n  {\n    id: 2,\n    name: \"D-Link DSL-2750U ADSL2+ Modem Router\",\n    model: \"DSL-2750U\",\n    brand: \"D-Link\",\n    category: \"modem\",\n    productType: \"user-sale\",\n    description: \"ADSL2+ wireless N300 modem router with 4-port switch, ideal for home and small office use.\",\n    specifications: {\n      \"Technology\": \"ADSL2+\",\n      \"WiFi Speed\": \"300 Mbps (2.4GHz)\",\n      \"Ports\": \"4 × 10/100 Ethernet LAN\",\n      \"Antenna\": \"2 × 5dBi detachable antennas\",\n      \"Features\": \"QoS, Firewall, VPN Pass-through\"\n    },\n    price: 2999,\n    stock: 78,\n    lowStockThreshold: 15,\n    status: \"active\",\n    images: [\"/products/dlink-2750u-1.jpg\"],\n    warranty: \"1 year\",\n    supplier: \"D-Link India Ltd\",\n    supplierContact: \"+91 11 4710 9200\",\n    location: \"Delhi Warehouse B\",\n    createdAt: \"2024-01-05T10:00:00Z\",\n    updatedAt: \"2024-01-18T12:45:00Z\"\n  },\n  {\n    id: 3,\n    name: \"Cat6 Ethernet Cable - 50 Meter\",\n    model: \"CAT6-50M\",\n    brand: \"AMP Netconnect\",\n    category: \"cable\",\n    productType: \"engineer-only\",\n    description: \"High-quality Category 6 UTP cable for professional networking installations. Supports Gigabit Ethernet.\",\n    specifications: {\n      \"Category\": \"Cat 6 UTP\",\n      \"Length\": \"50 meters\",\n      \"Speed\": \"Up to 1 Gbps\",\n      \"Bandwidth\": \"250 MHz\",\n      \"Conductor\": \"23 AWG solid copper\",\n      \"Jacket\": \"PVC, flame retardant\"\n    },\n    price: 1899,\n    stock: 156,\n    lowStockThreshold: 25,\n    status: \"active\",\n    images: [\"/products/cat6-cable-1.jpg\"],\n    warranty: \"5 years\",\n    supplier: \"AMP Netconnect India\",\n    supplierContact: \"+91 80 2665 8800\",\n    location: \"Bangalore Warehouse C\",\n    createdAt: \"2024-01-08T10:00:00Z\",\n    updatedAt: \"2024-01-22T09:15:00Z\"\n  },\n  {\n    id: 4,\n    name: \"Netgear Nighthawk X6S Tri-Band Router\",\n    model: \"R8000P\",\n    brand: \"Netgear\",\n    category: \"router\",\n    productType: \"user-sale\",\n    description: \"Premium tri-band WiFi router with MU-MIMO technology, Smart Connect, and dynamic QoS for ultimate performance.\",\n    specifications: {\n      \"WiFi Standard\": \"802.11ac\",\n      \"Speed\": \"AC4000 (750 + 1625 + 1625 Mbps)\",\n      \"Bands\": \"Tri-band (1 × 2.4GHz + 2 × 5GHz)\",\n      \"Antenna\": \"6 × high-performance antennas\",\n      \"Ports\": \"1 × Gigabit WAN, 4 × Gigabit LAN, 2 × USB 3.0\",\n      \"Processor\": \"1.8GHz Dual-Core\"\n    },\n    price: 24999,\n    stock: 23,\n    lowStockThreshold: 5,\n    status: \"active\",\n    images: [\"/products/netgear-r8000p-1.jpg\", \"/products/netgear-r8000p-2.jpg\"],\n    warranty: \"2 years\",\n    supplier: \"Netgear India\",\n    supplierContact: \"+91 80 4172 6400\",\n    location: \"Chennai Warehouse D\",\n    createdAt: \"2024-01-12T10:00:00Z\",\n    updatedAt: \"2024-01-25T14:20:00Z\"\n  },\n  {\n    id: 5,\n    name: \"Fiber Optic Patch Cord - SC to LC\",\n    model: \"FOC-SC-LC-3M\",\n    brand: \"Panduit\",\n    category: \"fiber-cable\",\n    productType: \"engineer-only\",\n    description: \"Single-mode fiber optic patch cord with SC and LC connectors. 3-meter length for professional installations.\",\n    specifications: {\n      \"Fiber Type\": \"Single-mode 9/125μm\",\n      \"Length\": \"3 meters\",\n      \"Connector A\": \"SC/UPC\",\n      \"Connector B\": \"LC/UPC\",\n      \"Insertion Loss\": \"≤ 0.3dB\",\n      \"Return Loss\": \"≥ 50dB\"\n    },\n    price: 599,\n    stock: 234,\n    lowStockThreshold: 50,\n    status: \"active\",\n    images: [\"/products/fiber-patch-cord-1.jpg\"],\n    warranty: \"1 year\",\n    supplier: \"Panduit India Pvt Ltd\",\n    supplierContact: \"+91 124 471 6000\",\n    location: \"Gurgaon Warehouse E\",\n    createdAt: \"2024-01-15T10:00:00Z\",\n    updatedAt: \"2024-01-26T11:30:00Z\"\n  },\n  {\n    id: 6,\n    name: \"24-Port Gigabit Ethernet Switch\",\n    model: \"TL-SG1024\",\n    brand: \"TP-Link\",\n    category: \"switch\",\n    productType: \"engineer-only\",\n    description: \"Unmanaged 24-port Gigabit Ethernet switch for expanding network capacity in professional environments.\",\n    specifications: {\n      \"Ports\": \"24 × 10/100/1000 Mbps Auto-Negotiation\",\n      \"Switching Capacity\": \"48 Gbps\",\n      \"MAC Address Table\": \"8K\",\n      \"Buffer Memory\": \"4.1 Mb\",\n      \"Power Consumption\": \"16.5W maximum\",\n      \"Mounting\": \"Desktop/Rack mountable\"\n    },\n    price: 8999,\n    stock: 34,\n    lowStockThreshold: 8,\n    status: \"active\",\n    images: [\"/products/tp-link-sg1024-1.jpg\"],\n    warranty: \"Lifetime\",\n    supplier: \"TP-Link India Pvt Ltd\",\n    supplierContact: \"+91 80 4017 9999\",\n    location: \"Hyderabad Warehouse F\",\n    createdAt: \"2024-01-18T10:00:00Z\",\n    updatedAt: \"2024-01-27T16:45:00Z\"\n  },\n  {\n    id: 7,\n    name: \"WiFi Range Extender AC1200\",\n    model: \"RE315\",\n    brand: \"TP-Link\",\n    category: \"extender\",\n    productType: \"user-sale\",\n    description: \"Dual-band WiFi range extender that boosts WiFi coverage up to 1200 Mbps with OneMesh technology.\",\n    specifications: {\n      \"WiFi Speed\": \"AC1200 (300 + 867 Mbps)\",\n      \"Coverage\": \"Up to 1,500 sq ft\",\n      \"Antenna\": \"2 × dual-band antennas\",\n      \"Ethernet Port\": \"1 × Gigabit Ethernet\",\n      \"Features\": \"OneMesh, AP Mode, High-Speed Mode\"\n    },\n    price: 2499,\n    stock: 67,\n    lowStockThreshold: 12,\n    status: \"active\",\n    images: [\"/products/tp-link-re315-1.jpg\"],\n    warranty: \"1 year\",\n    supplier: \"TP-Link India Pvt Ltd\",\n    supplierContact: \"+91 80 4017 9999\",\n    location: \"Pune Warehouse G\",\n    createdAt: \"2024-01-20T10:00:00Z\",\n    updatedAt: \"2024-01-28T13:15:00Z\"\n  },\n  {\n    id: 8,\n    name: \"12V 2A Power Adapter\",\n    model: \"PSU-12V2A\",\n    brand: \"Generic\",\n    category: \"power-supply\",\n    productType: \"engineer-only\",\n    description: \"Universal 12V 2A switching power adapter for routers, modems, and networking equipment.\",\n    specifications: {\n      \"Input\": \"100-240V AC, 50/60Hz\",\n      \"Output\": \"12V DC, 2A\",\n      \"Connector\": \"5.5mm × 2.1mm DC jack\",\n      \"Cable Length\": \"1.5 meters\",\n      \"Protection\": \"Over-current, Over-voltage, Short-circuit\",\n      \"Efficiency\": \">80%\"\n    },\n    price: 399,\n    stock: 189,\n    lowStockThreshold: 30,\n    status: \"active\",\n    images: [\"/products/power-adapter-12v-1.jpg\"],\n    warranty: \"6 months\",\n    supplier: \"Power Solutions India\",\n    supplierContact: \"+91 22 2834 5600\",\n    location: \"Mumbai Warehouse A\",\n    createdAt: \"2024-01-22T10:00:00Z\",\n    updatedAt: \"2024-01-29T10:00:00Z\"\n  }\n];\n\nexport const generateDummyOrders = (): Order[] => [\n  {\n    id: 1,\n    orderNumber: \"ORD-2024-001\",\n    productId: 1,\n    productName: \"TP-Link Archer AX73 WiFi 6 Router\",\n    customerId: 1,\n    customerName: \"Rajesh Kumar\",\n    orderType: \"user-purchase\",\n    quantity: 1,\n    unitPrice: 12999,\n    totalAmount: 12999,\n    status: \"delivered\",\n    priority: \"medium\",\n    deliveryAddress: \"123 Main St, Mumbai Central\",\n    notes: \"Delivered to security guard\",\n    createdAt: \"2024-01-20T10:00:00Z\",\n    updatedAt: \"2024-01-25T16:30:00Z\",\n    deliveredAt: \"2024-01-25T16:30:00Z\"\n  },\n  {\n    id: 2,\n    orderNumber: \"ORD-2024-002\",\n    productId: 3,\n    productName: \"Cat6 Ethernet Cable - 50 Meter\",\n    engineerId: 1,\n    engineerName: \"Mike Johnson\",\n    orderType: \"engineer-request\",\n    quantity: 3,\n    unitPrice: 1899,\n    totalAmount: 5697,\n    status: \"approved\",\n    priority: \"high\",\n    deliveryAddress: \"Field Service Location - Mumbai Central\",\n    notes: \"Required for customer installation\",\n    createdAt: \"2024-01-22T09:15:00Z\",\n    updatedAt: \"2024-01-22T14:20:00Z\"\n  },\n  {\n    id: 3,\n    orderNumber: \"ORD-2024-003\",\n    productId: 4,\n    productName: \"Netgear Nighthawk X6S Tri-Band Router\",\n    customerId: 3,\n    customerName: \"Amit Patel\",\n    orderType: \"user-purchase\",\n    quantity: 1,\n    unitPrice: 24999,\n    totalAmount: 24999,\n    status: \"shipped\",\n    priority: \"medium\",\n    deliveryAddress: \"789 Tech Park, Bangalore\",\n    createdAt: \"2024-01-24T11:30:00Z\",\n    updatedAt: \"2024-01-26T09:45:00Z\"\n  },\n  {\n    id: 4,\n    orderNumber: \"ORD-2024-004\",\n    productId: 6,\n    productName: \"24-Port Gigabit Ethernet Switch\",\n    engineerId: 2,\n    engineerName: \"Sarah Davis\",\n    orderType: \"engineer-request\",\n    quantity: 1,\n    unitPrice: 8999,\n    totalAmount: 8999,\n    status: \"pending\",\n    priority: \"urgent\",\n    deliveryAddress: \"Corporate Office - Delhi NCR\",\n    notes: \"Urgent replacement needed for network outage\",\n    createdAt: \"2024-01-26T14:00:00Z\",\n    updatedAt: \"2024-01-26T14:00:00Z\"\n  },\n  {\n    id: 5,\n    orderNumber: \"ORD-2024-005\",\n    productId: 7,\n    productName: \"WiFi Range Extender AC1200\",\n    customerId: 4,\n    customerName: \"Sunita Verma\",\n    orderType: \"user-purchase\",\n    quantity: 2,\n    unitPrice: 2499,\n    totalAmount: 4998,\n    status: \"delivered\",\n    priority: \"low\",\n    deliveryAddress: \"321 Rural Lane, Patna\",\n    createdAt: \"2024-01-25T16:20:00Z\",\n    updatedAt: \"2024-01-28T11:15:00Z\",\n    deliveredAt: \"2024-01-28T11:15:00Z\"\n  }\n];\n\nexport const generateDummyProductFeedback = (): ProductFeedback[] => [\n  {\n    id: 1,\n    productId: 1,\n    productName: \"TP-Link Archer AX73 WiFi 6 Router\",\n    customerId: 1,\n    customerName: \"Rajesh Kumar\",\n    rating: 5,\n    title: \"Excellent WiFi 6 Performance\",\n    comment: \"Amazing speed and coverage. WiFi 6 makes a huge difference for streaming and gaming.\",\n    pros: [\"Fast WiFi 6 speeds\", \"Great coverage\", \"Easy setup\", \"Stable connection\"],\n    cons: [\"Slightly expensive\", \"Large size\"],\n    wouldRecommend: true,\n    verifiedPurchase: true,\n    helpfulVotes: 12,\n    createdAt: \"2024-01-28T10:30:00Z\"\n  },\n  {\n    id: 2,\n    productId: 2,\n    productName: \"D-Link DSL-2750U ADSL2+ Modem Router\",\n    customerId: 2,\n    customerName: \"Priya Sharma\",\n    rating: 4,\n    title: \"Good value for money\",\n    comment: \"Works well for basic internet needs. Setup was straightforward and it's been reliable.\",\n    pros: [\"Affordable\", \"Easy setup\", \"Reliable for basic use\"],\n    cons: [\"Limited range\", \"Only 2.4GHz\"],\n    wouldRecommend: true,\n    verifiedPurchase: true,\n    helpfulVotes: 8,\n    createdAt: \"2024-01-26T14:20:00Z\"\n  },\n  {\n    id: 3,\n    productId: 4,\n    productName: \"Netgear Nighthawk X6S Tri-Band Router\",\n    customerId: 3,\n    customerName: \"Amit Patel\",\n    rating: 5,\n    title: \"Premium Performance Router\",\n    comment: \"Outstanding tri-band performance. Perfect for heavy usage with multiple devices.\",\n    pros: [\"Tri-band technology\", \"Excellent speed\", \"Advanced features\", \"Great app control\"],\n    cons: [\"Expensive\", \"Complex for beginners\"],\n    wouldRecommend: true,\n    verifiedPurchase: true,\n    helpfulVotes: 15,\n    createdAt: \"2024-01-29T16:45:00Z\"\n  },\n  {\n    id: 4,\n    productId: 7,\n    productName: \"WiFi Range Extender AC1200\",\n    customerId: 4,\n    customerName: \"Sunita Verma\",\n    rating: 4,\n    title: \"Great range extension\",\n    comment: \"Solved my WiFi dead zones perfectly. Easy to install and works seamlessly.\",\n    pros: [\"Easy installation\", \"Good range extension\", \"OneMesh compatibility\"],\n    cons: [\"Speed reduction in extended areas\"],\n    wouldRecommend: true,\n    verifiedPurchase: true,\n    helpfulVotes: 6,\n    createdAt: \"2024-01-30T09:10:00Z\"\n  }\n];\n\n// Generate New Installations dummy data\nexport const generateDummyNewInstallations = (): NewInstallation[] => [\n  {\n    id: 1,\n    customerName: \"Rajesh Kumar\",\n    email: \"rajesh.kumar@gmail.com\",\n    phone: \"+91 98765 43210\",\n    alternatePhone: \"+91 98765 43211\",\n    address: \"123 Tech Park Road, Sector 5\",\n    location: \"Bangalore\",\n    aadharFront: \"/uploads/aadhar-front-1.jpg\",\n    aadharBack: \"/uploads/aadhar-back-1.jpg\",\n    passportPhoto: \"/uploads/passport-1.jpg\",\n    preferredPlan: \"Jio Fiber 100 Mbps\",\n    requestType: \"residential\",\n    status: \"pending\",\n    priority: \"medium\",\n    estimatedCost: 3500,\n    notes: \"Customer requested evening installation between 4-6 PM\",\n    assignedEngineerId: null,\n    assignedEngineerName: null,\n    scheduledDate: null,\n    installationDate: null,\n    rejectionReason: null,\n    createdAt: \"2024-01-25T10:30:00Z\",\n    updatedAt: \"2024-01-25T10:30:00Z\"\n  },\n  {\n    id: 2,\n    customerName: \"Priya Sharma\",\n    email: \"priya.sharma@yahoo.com\",\n    phone: \"+91 87654 32109\",\n    alternatePhone: \"+91 87654 32110\",\n    address: \"456 Residential Complex, Phase 2\",\n    location: \"Mumbai\",\n    aadharFront: \"/uploads/aadhar-front-2.jpg\",\n    aadharBack: \"/uploads/aadhar-back-2.jpg\",\n    passportPhoto: \"/uploads/passport-2.jpg\",\n    preferredPlan: \"BSNL Broadband 50 Mbps\",\n    requestType: \"residential\",\n    status: \"confirmed\",\n    priority: \"high\",\n    estimatedCost: 2800,\n    notes: \"Pre-wiring already done by customer\",\n    assignedEngineerId: 1,\n    assignedEngineerName: \"John Doe\",\n    scheduledDate: \"2024-02-05T09:00:00Z\",\n    installationDate: null,\n    rejectionReason: null,\n    createdAt: \"2024-01-22T14:15:00Z\",\n    updatedAt: \"2024-01-26T11:20:00Z\"\n  },\n  {\n    id: 3,\n    customerName: \"Amit Patel\",\n    email: \"amit.patel@company.co.in\",\n    phone: \"+91 76543 21098\",\n    address: \"789 Business Center, Commercial Zone\",\n    location: \"Delhi NCR\",\n    preferredPlan: \"Airtel Corporate 500 Mbps\",\n    requestType: \"commercial\",\n    status: \"rejected\",\n    priority: \"low\",\n    estimatedCost: null,\n    notes: \"Commercial installation requires additional approvals\",\n    assignedEngineerId: null,\n    assignedEngineerName: null,\n    scheduledDate: null,\n    installationDate: null,\n    rejectionReason: \"Infrastructure not suitable for high-speed connection\",\n    createdAt: \"2024-01-20T16:45:00Z\",\n    updatedAt: \"2024-01-24T09:30:00Z\"\n  },\n  {\n    id: 4,\n    customerName: \"Sunita Verma\",\n    email: \"sunita.verma@hotmail.com\",\n    phone: \"+91 91234 56789\",\n    address: \"321 Garden View Apartments\",\n    location: \"Chennai\",\n    preferredPlan: \"My Internet Premium 200 Mbps\",\n    requestType: \"residential\",\n    status: \"confirmed\",\n    priority: \"urgent\",\n    estimatedCost: 4200,\n    notes: \"Customer is relocating, needs urgent installation\",\n    assignedEngineerId: 4,\n    assignedEngineerName: \"Ravi Singh\",\n    scheduledDate: \"2024-02-01T08:00:00Z\",\n    installationDate: null,\n    rejectionReason: null,\n    createdAt: \"2024-01-28T11:20:00Z\",\n    updatedAt: \"2024-01-28T15:45:00Z\"\n  },\n  {\n    id: 5,\n    customerName: \"Vikram Singh\",\n    email: \"vikram.singh@gmail.com\",\n    phone: \"+91 98123 45678\",\n    address: \"654 IT Corridor, Tech City\",\n    location: \"Hyderabad\",\n    preferredPlan: \"Jio Fiber Business 300 Mbps\",\n    requestType: \"commercial\",\n    status: \"pending\",\n    priority: \"high\",\n    estimatedCost: 6800,\n    notes: \"Office setup for 20 employees, requires multiple access points\",\n    assignedEngineerId: null,\n    assignedEngineerName: null,\n    scheduledDate: null,\n    installationDate: null,\n    rejectionReason: null,\n    createdAt: \"2024-01-29T09:15:00Z\",\n    updatedAt: \"2024-01-29T09:15:00Z\"\n  }\n];\n\n// Generate Leads dummy data\nexport const generateDummyLeads = (): Lead[] => [\n  {\n    id: 1,\n    name: \"Deepak Agarwal\",\n    email: \"deepak.agarwal@email.com\",\n    phone: \"+91 99887 66554\",\n    address: \"45 IT Park, Hinjewadi Phase 1, Pune\",\n    location: \"Pune\",\n    source: \"website\",\n    inquiryType: \"pricing\",\n    message: \"Looking for high-speed internet plans for home office\",\n    status: \"new\",\n    priority: \"medium\",\n    isContactedByManager: false,\n    assignedTo: null,\n    assignedToName: null,\n    followUpDate: \"2024-02-02T10:00:00Z\",\n    lastContactDate: null,\n    conversionProbability: 60,\n    estimatedValue: 12000,\n\n    notes: \"Interested in 100+ Mbps plans\",\n    createdAt: \"2024-01-30T14:22:00Z\",\n    updatedAt: \"2024-01-30T14:22:00Z\"\n  },\n  {\n    id: 2,\n    name: \"Kavya Reddy\",\n    email: \"kavya.reddy@gmail.com\",\n    phone: \"+91 88776 65443\",\n    address: \"78 Software Layout, Electronic City\",\n    location: \"Bangalore\",\n    source: \"ivr\",\n    inquiryType: \"general\",\n    message: null,\n    status: \"contacted\",\n    priority: \"high\",\n    isContactedByManager: true,\n    assignedTo: 1,\n    assignedToName: \"Admin User\",\n    followUpDate: \"2024-02-05T15:30:00Z\",\n    lastContactDate: \"2024-01-29T16:45:00Z\",\n    conversionProbability: 85,\n    estimatedValue: 18000,\n\n    notes: \"Very interested, comparing with competitors\",\n    createdAt: \"2024-01-28T11:30:00Z\",\n    updatedAt: \"2024-01-29T16:45:00Z\"\n  },\n  {\n    id: 3,\n    name: \"Mohit Gupta\",\n    email: null,\n    phone: \"+91 77665 54332\",\n    address: \"12 Cyber Hub, Sector 15, Gurgaon\",\n    location: \"Gurgaon\",\n    source: \"whatsapp\",\n    inquiryType: \"technical\",\n    message: \"Need fiber connection for gaming, low latency required\",\n    status: \"qualified\",\n    priority: \"medium\",\n    isContactedByManager: true,\n    assignedTo: 1,\n    assignedToName: \"Admin User\",\n    followUpDate: \"2024-02-03T11:00:00Z\",\n    lastContactDate: \"2024-01-27T14:20:00Z\",\n    conversionProbability: 70,\n    estimatedValue: 15000,\n\n    notes: \"Gaming enthusiast, prefers fiber over cable\",\n    createdAt: \"2024-01-26T09:45:00Z\",\n    updatedAt: \"2024-01-27T14:20:00Z\"\n  },\n  {\n    id: 4,\n    name: \"Ananya Joshi\",\n    email: \"ananya.joshi@company.com\",\n    phone: \"+91 66554 43321\",\n    address: \"34 Business District, Bandra East\",\n    location: \"Mumbai\",\n    source: \"referral\",\n    inquiryType: \"pricing\",\n    message: \"Referred by existing customer, need commercial plan\",\n    status: \"converted\",\n    priority: \"high\",\n    isContactedByManager: true,\n    assignedTo: 1,\n    assignedToName: \"Admin User\",\n    followUpDate: null,\n    lastContactDate: \"2024-01-25T10:15:00Z\",\n    conversionProbability: 100,\n    estimatedValue: 25000,\n\n    notes: \"Successfully converted to commercial plan subscription\",\n    createdAt: \"2024-01-24T08:30:00Z\",\n    updatedAt: \"2024-01-25T10:15:00Z\"\n  },\n  {\n    id: 5,\n    name: \"Suresh Yadav\",\n    email: \"suresh.yadav@yahoo.com\",\n    phone: \"+91 55443 32210\",\n    address: \"56 Pink City Area, Civil Lines\",\n    location: \"Jaipur\",\n    source: \"social_media\",\n    inquiryType: \"support\",\n    message: \"Saw your Facebook ad, interested in rural connectivity\",\n    status: \"closed\",\n    priority: \"low\",\n    isContactedByManager: false,\n    assignedTo: null,\n    assignedToName: null,\n    followUpDate: null,\n    lastContactDate: \"2024-01-23T13:45:00Z\",\n    conversionProbability: 20,\n    estimatedValue: null,\n\n    notes: \"Not in service area, closed after initial contact\",\n    createdAt: \"2024-01-22T16:20:00Z\",\n    updatedAt: \"2024-01-23T13:45:00Z\"\n  },\n  {\n    id: 6,\n    name: \"Ravi Kumar\",\n    email: \"ravi.kumar@tech.in\",\n    phone: \"+91 44332 21109\",\n    address: \"89 Tech Park, OMR Road\",\n    location: \"Chennai\",\n    source: \"website\",\n    inquiryType: \"technical\",\n    message: \"Need dedicated IP for server hosting\",\n    status: \"new\",\n    priority: \"urgent\",\n    isContactedByManager: false,\n    assignedTo: null,\n    assignedToName: null,\n    followUpDate: \"2024-02-01T09:00:00Z\",\n    lastContactDate: null,\n    conversionProbability: 80,\n    estimatedValue: 35000,\n\n    notes: \"Requires technical consultation for server hosting setup\",\n    createdAt: \"2024-01-30T17:10:00Z\",\n    updatedAt: \"2024-01-30T17:10:00Z\"\n  }\n];\n\n// Export data arrays for easy access\nexport const dummyUsers = generateDummyUsers();\nexport const dummyCustomers = generateDummyCustomers();\nexport const dummyEngineers = generateDummyEngineers();\nexport const dummyServicePlans = generateDummyServicePlans();\nexport const dummyComplaints = generateDummyComplaints();\nexport const dummySupportTickets = generateDummySupportTickets();\nexport const dummyNotifications = generateDummyNotifications();\nexport const dashboardStats = generateDashboardStats();\nexport const dummyProducts = generateDummyProducts();\nexport const dummyOrders = generateDummyOrders();\nexport const dummyProductFeedback = generateDummyProductFeedback();\nexport const dummyNewInstallations = generateDummyNewInstallations();\nexport const dummyLeads = generateDummyLeads();","size_bytes":49510},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/analytics.tsx":{"content":"import { MainLayout } from \"@/components/layout/main-layout\";\nimport { StatsCard } from \"@/components/ui/stats-card\";\nimport { ComplaintChart } from \"@/components/charts/complaint-chart\";\nimport { StatusChart } from \"@/components/charts/status-chart\";\nimport { RevenueChart } from \"@/components/charts/revenue-chart\";\nimport { PerformanceChart } from \"@/components/charts/performance-chart\";\nimport { HeatmapChart } from \"@/components/charts/heatmap-chart\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  TrendingUp, \n  Clock, \n  Star, \n  Users, \n  DollarSign, \n  Activity, \n  Shield, \n  Zap,\n  Network,\n  AlertTriangle,\n  CheckCircle,\n  Target,\n  BarChart3,\n  PieChart,\n  LineChart,\n  MapPin,\n  Calendar,\n  Filter,\n  Download,\n  RefreshCw\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Analytics() {\n  // Comprehensive analytics data for admin panel\n  const stats = {\n    revenue: {\n      monthly: 147500,\n      growth: 12.4,\n      target: 150000,\n      customers: 1847\n    },\n    operations: {\n      uptime: 99.7,\n      responseTime: 0.8,\n      satisfaction: 4.6,\n      engineerEfficiency: 91.2\n    },\n    issues: {\n      total: 89,\n      resolved: 76,\n      pending: 8,\n      inProgress: 5,\n      resolutionRate: 85.4\n    },\n    performance: {\n      networkHealth: 97.3,\n      systemLoad: 68.2,\n      alertsActive: 3,\n      slaCompliance: 99.1\n    }\n  };\n  \n  const isLoading = false;\n\n  if (isLoading) {\n    return (\n      <MainLayout title=\"Analytics Dashboard\">\n        <div className=\"animate-pulse space-y-6 p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[1, 2, 3, 4, 5, 6, 7, 8].map((i) => (\n              <div key={i} className=\"bg-card rounded-xl shadow-sm p-6 border\">\n                <div className=\"h-6 bg-muted rounded mb-2\"></div>\n                <div className=\"h-8 bg-muted rounded\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </MainLayout>\n    );\n  }\n\n  return (\n    <MainLayout title=\"Analytics Dashboard\">\n      <div className=\"space-y-8 p-6\">\n        {/* Header with actions */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Admin Analytics</h1>\n            <p className=\"text-muted-foreground mt-1\">Comprehensive business intelligence and performance metrics</p>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Filter className=\"h-4 w-4 mr-2\" />\n              Filters\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        {/* Key Performance Indicators */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Monthly Revenue\"\n            value={`$${(stats.revenue.monthly / 1000).toFixed(0)}K`}\n            icon={DollarSign}\n            iconColor=\"text-green-600\"\n            change={`+${stats.revenue.growth}%`}\n            changeType=\"positive\"\n          />\n          <StatsCard\n            title=\"System Uptime\"\n            value={`${stats.operations.uptime}%`}\n            icon={Activity}\n            iconColor=\"text-blue-600\"\n            change=\"99.7% target\"\n            changeType=\"neutral\"\n          />\n          <StatsCard\n            title=\"Customer Satisfaction\"\n            value={`${stats.operations.satisfaction}/5`}\n            icon={Star}\n            iconColor=\"text-yellow-600\"\n            change=\"+0.3 vs last month\"\n            changeType=\"positive\"\n          />\n          <StatsCard\n            title=\"Issue Resolution\"\n            value={`${stats.issues.resolutionRate}%`}\n            icon={CheckCircle}\n            iconColor=\"text-emerald-600\"\n            change={`${stats.issues.resolved}/${stats.issues.total} resolved`}\n            changeType=\"neutral\"\n          />\n        </div>\n\n        {/* Advanced Metrics Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"border-2 border-blue-200 bg-blue-50/50\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center text-sm font-medium text-blue-700\">\n                <Network className=\"h-4 w-4 mr-2\" />\n                Network Health\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-900\">{stats.performance.networkHealth}%</div>\n              <Progress value={stats.performance.networkHealth} className=\"mt-2 h-2\" />\n              <p className=\"text-xs text-blue-600 mt-2\">Excellent performance</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-2 border-orange-200 bg-orange-50/50\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center text-sm font-medium text-orange-700\">\n                <Zap className=\"h-4 w-4 mr-2\" />\n                System Load\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-orange-900\">{stats.performance.systemLoad}%</div>\n              <Progress value={stats.performance.systemLoad} className=\"mt-2 h-2\" />\n              <p className=\"text-xs text-orange-600 mt-2\">Optimal range</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-2 border-red-200 bg-red-50/50\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center text-sm font-medium text-red-700\">\n                <AlertTriangle className=\"h-4 w-4 mr-2\" />\n                Active Alerts\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-900\">{stats.performance.alertsActive}</div>\n              <div className=\"flex gap-1 mt-2\">\n                <Badge variant=\"destructive\" className=\"text-xs\">High: 1</Badge>\n                <Badge variant=\"outline\" className=\"text-xs\">Med: 2</Badge>\n              </div>\n              <p className=\"text-xs text-red-600 mt-2\">Require attention</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-2 border-green-200 bg-green-50/50\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center text-sm font-medium text-green-700\">\n                <Target className=\"h-4 w-4 mr-2\" />\n                SLA Compliance\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-900\">{stats.performance.slaCompliance}%</div>\n              <Progress value={stats.performance.slaCompliance} className=\"mt-2 h-2\" />\n              <p className=\"text-xs text-green-600 mt-2\">Above target</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Charts Grid */}\n        <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-8\">\n          {/* Revenue and Financial Analytics */}\n          <Card className=\"col-span-1\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <DollarSign className=\"h-5 w-5 mr-2 text-green-600\" />\n                Revenue Analytics\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart title=\"Financial Performance\" />\n            </CardContent>\n          </Card>\n\n          {/* Performance Radar */}\n          <Card className=\"col-span-1\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Activity className=\"h-5 w-5 mr-2 text-blue-600\" />\n                Performance Matrix\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <PerformanceChart title=\"Multi-Dimensional Analysis\" />\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Operations and Issue Tracking */}\n        <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-8\">\n          <Card className=\"col-span-1\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <BarChart3 className=\"h-5 w-5 mr-2 text-purple-600\" />\n                Issue Management\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <StatusChart title=\"Issue Status & Resolution Trends\" />\n            </CardContent>\n          </Card>\n\n          <Card className=\"col-span-1\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <LineChart className=\"h-5 w-5 mr-2 text-orange-600\" />\n                Network Performance\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ComplaintChart title=\"Network Quality Metrics\" />\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Heatmap and Geographic Analysis */}\n        <Card className=\"w-full\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <MapPin className=\"h-5 w-5 mr-2 text-red-600\" />\n              Activity Patterns & Regional Analysis\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <HeatmapChart title=\"Time-based Activity Analysis\" />\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions and Summary */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card className=\"border-2 border-primary/20 bg-primary/5\">\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Button className=\"w-full justify-start\" variant=\"outline\">\n                <Calendar className=\"h-4 w-4 mr-2\" />\n                Generate Report\n              </Button>\n              <Button className=\"w-full justify-start\" variant=\"outline\">\n                <Shield className=\"h-4 w-4 mr-2\" />\n                Security Audit\n              </Button>\n              <Button className=\"w-full justify-start\" variant=\"outline\">\n                <Users className=\"h-4 w-4 mr-2\" />\n                Team Performance\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-2 border-green-200 bg-green-50/50\">\n            <CardHeader>\n              <CardTitle className=\"text-lg text-green-700\">Today's Highlights</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span>New Customers:</span>\n                <span className=\"font-semibold\">+12</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Issues Resolved:</span>\n                <span className=\"font-semibold\">18</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Revenue Generated:</span>\n                <span className=\"font-semibold\">$4,920</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>System Uptime:</span>\n                <span className=\"font-semibold\">100%</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-2 border-blue-200 bg-blue-50/50\">\n            <CardHeader>\n              <CardTitle className=\"text-lg text-blue-700\">Next Actions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2 text-sm\">\n              <div className=\"flex items-center justify-between\">\n                <span>Review high alerts</span>\n                <Badge variant=\"destructive\">High</Badge>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span>Weekly team meeting</span>\n                <Badge variant=\"outline\">2h</Badge>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span>System maintenance</span>\n                <Badge variant=\"secondary\">Tomorrow</Badge>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span>Budget review</span>\n                <Badge variant=\"outline\">Friday</Badge>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </MainLayout>\n  );\n}\n","size_bytes":12881},"client/src/pages/complaint-detail.tsx":{"content":"import React from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { ArrowLeft, AlertCircle, User, Wrench, MapPin, Calendar, Clock, Star, MessageSquare, CheckCircle, X, Flag, Phone, Mail } from 'lucide-react';\nimport { dummyComplaints, dummyCustomers, dummyEngineers } from '@/lib/dummyData';\nimport { MainLayout } from '@/components/layout/main-layout';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { cn } from '@/lib/utils';\n\nexport default function ComplaintDetail() {\n  const params = useParams();\n  const [, navigate] = useLocation();\n  const complaintId = params?.id ? parseInt(params.id) : null;\n  \n  const complaint = complaintId ? dummyComplaints.find(c => c.id === complaintId) : null;\n  const customer = complaint ? dummyCustomers.find(c => c.id === complaint.customerId) : null;\n  const engineer = complaint?.engineerId ? dummyEngineers.find(e => e.id === complaint.engineerId) : null;\n\n  if (!complaint) {\n    return (\n      <MainLayout>\n        <div className=\"p-8 text-center\">\n          <AlertCircle className=\"h-16 w-16 mx-auto mb-4 text-gray-400\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">Complaint Not Found</h3>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">The complaint you're looking for doesn't exist.</p>\n          <Button onClick={() => navigate('/complaints')} variant=\"outline\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Complaints\n          </Button>\n        </div>\n      </MainLayout>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'resolved':\n        return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300';\n      case 'in-progress':\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300';\n      case 'assigned':\n        return 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-300';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-300';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent':\n        return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300';\n      case 'high':\n        return 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-300';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300';\n      case 'low':\n        return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-300';\n    }\n  };\n\n  const getTimeElapsed = (date: string) => {\n    const now = new Date();\n    const created = new Date(date);\n    const diffMs = now.getTime() - created.getTime();\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffHours / 24);\n    \n    if (diffDays > 0) {\n      return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;\n    }\n    return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;\n  };\n\n  // Mock timeline data\n  const timeline = [\n    {\n      id: 1,\n      action: \"Complaint Created\",\n      description: `Complaint filed by ${customer?.name}`,\n      timestamp: complaint.createdAt,\n      type: \"created\",\n      user: customer?.name\n    },\n    ...(complaint.engineerId ? [{\n      id: 2,\n      action: \"Engineer Assigned\",\n      description: `Assigned to ${engineer?.name}`,\n      timestamp: complaint.updatedAt,\n      type: \"assigned\",\n      user: engineer?.name\n    }] : []),\n    ...(complaint.status === 'in-progress' ? [{\n      id: 3,\n      action: \"Work Started\",\n      description: \"Engineer began working on the issue\",\n      timestamp: complaint.updatedAt,\n      type: \"progress\",\n      user: engineer?.name\n    }] : []),\n    ...(complaint.resolvedAt ? [{\n      id: 4,\n      action: \"Complaint Resolved\",\n      description: complaint.resolution || \"Issue has been resolved\",\n      timestamp: complaint.resolvedAt,\n      type: \"resolved\",\n      user: engineer?.name\n    }] : [])\n  ];\n\n  return (\n    <MainLayout>\n      <div className=\"p-6 max-w-6xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => navigate('/complaints')}\n              className=\"text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Complaints\n            </Button>\n            <div>\n              <div className=\"flex items-center gap-3 mb-1\">\n                <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">#{complaint.id}</h1>\n                <Badge className={cn(\"capitalize\", getPriorityColor(complaint.priority))}>\n                  {complaint.priority}\n                </Badge>\n                <Badge className={cn(\"capitalize\", getStatusColor(complaint.status))}>\n                  {complaint.status}\n                </Badge>\n              </div>\n              <p className=\"text-gray-600 dark:text-gray-400\">{complaint.title}</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" size=\"sm\">\n              <MessageSquare className=\"h-4 w-4 mr-2\" />\n              Add Note\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Flag className=\"h-4 w-4 mr-2\" />\n              Escalate\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column - Details */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Complaint Details */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <AlertCircle className=\"h-5 w-5\" />\n                  Complaint Details\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-medium text-gray-900 dark:text-white mb-2\">Description</h4>\n                  <p className=\"text-gray-600 dark:text-gray-400 leading-relaxed\">\n                    {complaint.description}\n                  </p>\n                </div>\n                \n                <Separator />\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">Created</p>\n                    <p className=\"font-medium\">{new Date(complaint.createdAt).toLocaleString()}</p>\n                    <p className=\"text-xs text-gray-400\">{getTimeElapsed(complaint.createdAt)}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">Last Updated</p>\n                    <p className=\"font-medium\">{new Date(complaint.updatedAt).toLocaleString()}</p>\n                    <p className=\"text-xs text-gray-400\">{getTimeElapsed(complaint.updatedAt)}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">Location</p>\n                    <div className=\"flex items-center gap-1\">\n                      <MapPin className=\"h-3 w-3\" />\n                      <span className=\"font-medium\">{complaint.location}</span>\n                    </div>\n                  </div>\n                  {complaint.resolvedAt && (\n                    <div>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400\">Resolved</p>\n                      <p className=\"font-medium\">{new Date(complaint.resolvedAt).toLocaleString()}</p>\n                      <p className=\"text-xs text-gray-400\">{getTimeElapsed(complaint.resolvedAt)}</p>\n                    </div>\n                  )}\n                </div>\n\n                {complaint.resolution && (\n                  <>\n                    <Separator />\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 dark:text-white mb-2 flex items-center gap-2\">\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                        Resolution\n                      </h4>\n                      <p className=\"text-gray-600 dark:text-gray-400 leading-relaxed bg-green-50 dark:bg-green-900/10 p-3 rounded-lg\">\n                        {complaint.resolution}\n                      </p>\n                    </div>\n                  </>\n                )}\n\n                {complaint.feedback && (\n                  <>\n                    <Separator />\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 dark:text-white mb-2 flex items-center gap-2\">\n                        <MessageSquare className=\"h-4 w-4 text-blue-600\" />\n                        Customer Feedback\n                        {complaint.rating && (\n                          <div className=\"flex items-center gap-1\">\n                            <Star className=\"h-4 w-4 text-yellow-500 fill-current\" />\n                            <span className=\"text-sm font-medium\">{complaint.rating}/5</span>\n                          </div>\n                        )}\n                      </h4>\n                      <p className=\"text-gray-600 dark:text-gray-400 leading-relaxed bg-blue-50 dark:bg-blue-900/10 p-3 rounded-lg\">\n                        {complaint.feedback}\n                      </p>\n                    </div>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Timeline */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Clock className=\"h-5 w-5\" />\n                  Activity Timeline\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {timeline.map((item, index) => (\n                    <div key={item.id} className=\"flex gap-4\">\n                      <div className=\"flex flex-col items-center\">\n                        <div className={cn(\n                          \"w-8 h-8 rounded-full flex items-center justify-center\",\n                          item.type === 'created' && \"bg-blue-100 text-blue-600 dark:bg-blue-900/20 dark:text-blue-400\",\n                          item.type === 'assigned' && \"bg-orange-100 text-orange-600 dark:bg-orange-900/20 dark:text-orange-400\",\n                          item.type === 'progress' && \"bg-yellow-100 text-yellow-600 dark:bg-yellow-900/20 dark:text-yellow-400\",\n                          item.type === 'resolved' && \"bg-green-100 text-green-600 dark:bg-green-900/20 dark:text-green-400\"\n                        )}>\n                          {item.type === 'created' && <AlertCircle className=\"h-4 w-4\" />}\n                          {item.type === 'assigned' && <User className=\"h-4 w-4\" />}\n                          {item.type === 'progress' && <Clock className=\"h-4 w-4\" />}\n                          {item.type === 'resolved' && <CheckCircle className=\"h-4 w-4\" />}\n                        </div>\n                        {index < timeline.length - 1 && (\n                          <div className=\"w-px h-8 bg-gray-200 dark:bg-gray-700 mt-2\" />\n                        )}\n                      </div>\n                      <div className=\"flex-1 pb-4\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <h4 className=\"font-medium text-gray-900 dark:text-white\">{item.action}</h4>\n                          <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                            {new Date(item.timestamp).toLocaleString()}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">{item.description}</p>\n                        {item.user && (\n                          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">by {item.user}</p>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column - Customer & Engineer Info */}\n          <div className=\"space-y-6\">\n            {/* Customer Info */}\n            {customer && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <User className=\"h-5 w-5\" />\n                    Customer Information\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Avatar>\n                      <AvatarFallback className=\"bg-blue-100 text-blue-600 dark:bg-blue-900/20 dark:text-blue-400\">\n                        {customer.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <p className=\"font-medium text-gray-900 dark:text-white\">{customer.name}</p>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">{customer.email}</p>\n                    </div>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <Phone className=\"h-4 w-4 text-gray-400\" />\n                      <span>{customer.phone}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <MapPin className=\"h-4 w-4 text-gray-400\" />\n                      <span>{customer.address}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <Badge className={cn(\n                        \"capitalize text-xs\",\n                        customer.status === 'active' \n                          ? \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300\"\n                          : \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300\"\n                      )}>\n                        {customer.status}\n                      </Badge>\n                      <span className=\"text-xs text-gray-500\">Status</span>\n                    </div>\n                  </div>\n                  \n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"w-full\"\n                    onClick={() => navigate(`/users/${customer.id}`)}\n                  >\n                    View Customer Details\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Engineer Info */}\n            {engineer ? (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Wrench className=\"h-5 w-5\" />\n                    Assigned Engineer\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Avatar>\n                      <AvatarFallback className=\"bg-green-100 text-green-600 dark:bg-green-900/20 dark:text-green-400\">\n                        {engineer.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <p className=\"font-medium text-gray-900 dark:text-white\">{engineer.name}</p>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">{engineer.specialization}</p>\n                    </div>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <Mail className=\"h-4 w-4 text-gray-400\" />\n                      <span>{engineer.email}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <Phone className=\"h-4 w-4 text-gray-400\" />\n                      <span>{engineer.phone}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <Star className=\"h-4 w-4 text-yellow-500\" />\n                      <span>{engineer.rating}/50 Rating</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      <span>{engineer.completedJobs} Jobs Completed</span>\n                    </div>\n                  </div>\n                  \n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"w-full\"\n                    onClick={() => navigate(`/engineers/${engineer.id}`)}\n                  >\n                    View Engineer Details\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Wrench className=\"h-5 w-5\" />\n                    Engineer Assignment\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"text-center py-6\">\n                  <Wrench className=\"h-8 w-8 mx-auto mb-3 text-gray-400\" />\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">No engineer assigned yet</p>\n                  <Button size=\"sm\" className=\"w-full\">\n                    Assign Engineer\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":18739},"client/src/pages/complaints.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { DataTable, StatusBadge } from \"@/components/ui/data-table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Plus,\n  Filter,\n  Search,\n  Edit,\n  Eye,\n  Trash2,\n  Phone,\n  MapPin,\n  Clock,\n  User,\n  AlertCircle,\n  CheckCircle,\n  Activity,\n  ChevronLeft,\n  ChevronRight,\n  List,\n  Grid,\n  Star,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\nimport { generateDummyComplaints, generateDummyEngineers, generateDummyCustomers, type Complaint } from \"@/lib/dummyData\";\n\n// Local type definitions\nconst insertComplaintSchema = z.object({\n  customerName: z.string().min(1, \"Customer name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  phone: z.string().min(10, \"Valid phone number is required\"),\n  location: z.string().min(1, \"Location is required\"),\n  priority: z.enum([\"low\", \"medium\", \"high\", \"urgent\"]),\n  description: z.string().min(10, \"Description must be at least 10 characters\"),\n  category: z.string().min(1, \"Category is required\"),\n});\n\ntype InsertComplaint = z.infer<typeof insertComplaintSchema>;\n\nexport default function Complaints() {\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [priorityFilter, setPriorityFilter] = useState(\"all\");\n  const [locationFilter, setLocationFilter] = useState(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [selectedComplaint, setSelectedComplaint] = useState<any>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [viewMode, setViewMode] = useState<\"card\" | \"table\">(\"card\");\n  const [isAssignDialogOpen, setIsAssignDialogOpen] = useState(false);\n  const [selectedEngineerId, setSelectedEngineerId] = useState<string>(\"\");\n  const itemsPerPage = 5;\n\n  const { toast } = useToast();\n\n  // Load dummy data\n  const [complaints, setComplaints] = useState(generateDummyComplaints());\n  const engineers = generateDummyEngineers();\n  const customers = generateDummyCustomers();\n\n  const isLoading = false;\n\n  const form = useForm<InsertComplaint>({\n    resolver: zodResolver(insertComplaintSchema),\n    defaultValues: {\n      customerName: \"\",\n      email: \"\",\n      phone: \"\",\n      description: \"\",\n      priority: \"medium\",\n      location: \"\",\n      category: \"technical\",\n    },\n  });\n\n  const editForm = useForm<InsertComplaint>({\n    resolver: zodResolver(insertComplaintSchema),\n  });\n\n  // Simple state management functions (no API calls)\n  const onSubmit = (data: InsertComplaint) => {\n    const newComplaint: Complaint = {\n      id: Math.max(...complaints.map(c => c.id)) + 1,\n      title: data.category + \" Issue\",\n      customerId: customers.length + 1,\n      customerName: data.customerName,\n      description: data.description,\n      priority: data.priority,\n      status: \"pending\",\n      location: data.location,\n      engineerId: null,\n      engineerName: null,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    setComplaints([...complaints, newComplaint]);\n    toast({\n      title: \"Success\",\n      description: \"Complaint created successfully\",\n    });\n    setIsAddDialogOpen(false);\n    form.reset();\n  };\n\n  const onEditSubmit = (data: InsertComplaint) => {\n    const updatedComplaints = complaints.map(complaint => \n      complaint.id === selectedComplaint.id \n        ? { \n            ...complaint, \n            ...data,\n            customerName: customers.find(c => c.id === data.customerId)?.name || \"Unknown\",\n            engineerName: data.engineerId ? engineers.find(e => e.id === data.engineerId)?.name || null : null,\n            updatedAt: new Date().toISOString()\n          }\n        : complaint\n    );\n    setComplaints(updatedComplaints);\n    toast({\n      title: \"Success\",\n      description: \"Complaint updated successfully\",\n    });\n    setIsEditDialogOpen(false);\n  };\n\n  const handleDelete = (complaint: any) => {\n    setComplaints(complaints.filter(c => c.id !== complaint.id));\n    toast({\n      title: \"Success\",\n      description: \"Complaint deleted successfully\",\n    });\n  };\n\n  const handleAssignEngineer = () => {\n    if (!selectedEngineerId || !selectedComplaint) return;\n    \n    const updatedComplaints = complaints.map(complaint => \n      complaint.id === selectedComplaint.id \n        ? { \n            ...complaint, \n            engineerId: parseInt(selectedEngineerId),\n            engineerName: engineers.find(e => e.id === parseInt(selectedEngineerId))?.name || null,\n            status: \"assigned\",\n            updatedAt: new Date().toISOString()\n          }\n        : complaint\n    );\n    setComplaints(updatedComplaints);\n    toast({\n      title: \"Success\",\n      description: \"Complaint assigned successfully\",\n    });\n    setIsAssignDialogOpen(false);\n    setSelectedEngineerId(\"\");\n  };\n\n  const handleView = (complaint: any) => {\n    setSelectedComplaint(complaint);\n    setIsViewDialogOpen(true);\n  };\n\n  const handleEdit = (complaint: any) => {\n    setSelectedComplaint(complaint);\n    editForm.reset({\n      title: complaint.title,\n      description: complaint.description,\n      priority: complaint.priority,\n      location: complaint.location,\n      customerId: complaint.customerId,\n      engineerId: complaint.engineerId,\n      status: complaint.status,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleAssign = (complaint: any) => {\n    setSelectedComplaint(complaint);\n    setSelectedEngineerId(\"\");\n    setIsAssignDialogOpen(true);\n  };\n\n  const getCustomerName = (customerId: number) => {\n    const customer = customers.find((c: any) => c.id === customerId);\n    return customer?.name || \"Unknown Customer\";\n  };\n\n  const getEngineerName = (engineerId: number | null) => {\n    if (!engineerId) return null;\n    const engineer = engineers.find((e: any) => e.id === engineerId);\n    return engineer?.name || \"Unknown Engineer\";\n  };\n\n  const filteredComplaints = complaints.filter((complaint: any) => {\n    const customerName = getCustomerName(complaint.customerId);\n    const matchesSearch =\n      !searchQuery ||\n      complaint.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      complaint.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      customerName.toLowerCase().includes(searchQuery.toLowerCase());\n\n    return (\n      matchesSearch &&\n      (statusFilter === \"all\" || complaint.status === statusFilter) &&\n      (priorityFilter === \"all\" || complaint.priority === priorityFilter) &&\n      (locationFilter === \"all\" || complaint.location === locationFilter)\n    );\n  });\n\n  // Reset to page 1 when filters change\n  const resetPagination = () => setCurrentPage(1);\n\n  // Pagination calculations\n  const totalPages = Math.ceil(filteredComplaints.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const paginatedComplaints = filteredComplaints.slice(startIndex, startIndex + itemsPerPage);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"assigned\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"in-progress\":\n        return \"bg-purple-100 text-purple-800\";\n      case \"visited\":\n        return \"bg-indigo-100 text-indigo-800\";\n      case \"resolved\":\n        return \"bg-green-100 text-green-800\";\n      case \"not-resolved\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"urgent\":\n        return \"bg-red-100 text-red-800\";\n      case \"high\":\n        return \"bg-orange-100 text-orange-800\";\n      case \"medium\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"low\":\n        return \"bg-green-100 text-green-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const renderStars = (rating: number | null) => {\n    if (!rating) return null;\n    return (\n      <div className=\"flex items-center\">\n        {[1, 2, 3, 4, 5].map((star) => (\n          <Star\n            key={star}\n            className={`h-3 w-3 ${\n              star <= rating\n                ? \"text-yellow-400 fill-current\"\n                : \"text-gray-300\"\n            }`}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  const getTimeAgo = (date: string) => {\n    const now = new Date();\n    const past = new Date(date);\n    const diffMs = now.getTime() - past.getTime();\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffHours / 24);\n\n    if (diffDays > 0) {\n      return `${diffDays}d ago`;\n    } else if (diffHours > 0) {\n      return `${diffHours}h ago`;\n    } else {\n      return \"Just now\";\n    }\n  };\n\n  const columns = [\n    {\n      key: \"id\",\n      label: \"ID\",\n      sortable: true,\n      render: (value: number) => (\n        <div className=\"font-mono text-sm font-medium text-foreground\">\n          #{value}\n        </div>\n      ),\n    },\n    {\n      key: \"customer\",\n      label: \"Customer\",\n      render: (value: any, row: any) => (\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\n            <User className=\"h-4 w-4 text-white\" />\n          </div>\n          <div>\n            <div className=\"text-sm font-medium text-foreground\">\n              {getCustomerName(row.customerId)}\n            </div>\n            <div className=\"text-xs text-muted-foreground flex items-center\">\n              <MapPin className=\"h-3 w-3 mr-1\" />\n              {row.location}\n            </div>\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: \"title\",\n      label: \"Issue\",\n      render: (value: string, row: any) => (\n        <div className=\"max-w-xs\">\n          <div className=\"text-sm font-medium text-foreground truncate\">\n            {value}\n          </div>\n          <div className=\"text-xs text-muted-foreground truncate\">\n            {row.description}\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: \"priority\",\n      label: \"Priority\",\n      render: (value: string) => (\n        <Badge className={`${getPriorityColor(value)} font-medium`}>\n          {value.toUpperCase()}\n        </Badge>\n      ),\n    },\n    {\n      key: \"status\",\n      label: \"Status\",\n      render: (value: string) => (\n        <Badge className={`${getStatusColor(value)} font-medium`}>\n          {value.replace('-', ' ').toUpperCase()}\n        </Badge>\n      ),\n    },\n    {\n      key: \"engineer\",\n      label: \"Engineer\",\n      render: (value: any, row: any) => {\n        const engineerName = getEngineerName(row.engineerId);\n        return (\n          <div className=\"flex items-center space-x-2\">\n            {engineerName ? (\n              <>\n                <div className=\"w-6 h-6 bg-gradient-to-br from-green-500 to-blue-600 rounded-full flex items-center justify-center\">\n                  <span className=\"text-xs font-medium text-white\">\n                    {engineerName.split(\" \").map((n: string) => n[0]).join(\"\")}\n                  </span>\n                </div>\n                <span className=\"text-sm font-medium text-foreground\">\n                  {engineerName}\n                </span>\n              </>\n            ) : (\n              <Badge variant=\"outline\" className=\"text-muted-foreground\">\n                Unassigned\n              </Badge>\n            )}\n          </div>\n        );\n      },\n    },\n    {\n      key: \"createdAt\",\n      label: \"Created\",\n      render: (value: string) => (\n        <div className=\"text-sm text-muted-foreground flex items-center\">\n          <Clock className=\"h-3 w-3 mr-1\" />\n          {getTimeAgo(value)}\n        </div>\n      ),\n    },\n    {\n      key: \"actions\",\n      label: \"Actions\",\n      render: (value: any, row: any) => (\n        <div className=\"flex space-x-1\">\n          {row.status === \"pending\" && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => handleAssign(row)}\n              className=\"text-purple-600 hover:text-purple-900 hover:bg-purple-50\"\n            >\n              <User className=\"h-4 w-4\" />\n            </Button>\n          )}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => handleView(row)}\n            className=\"text-blue-600 hover:text-blue-900 hover:bg-blue-50\"\n          >\n            <Eye className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => handleEdit(row)}\n            className=\"text-green-600 hover:text-green-900 hover:bg-green-50\"\n          >\n            <Edit className=\"h-4 w-4\" />\n          </Button>\n          <AlertDialog>\n            <AlertDialogTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-red-600 hover:text-red-900 hover:bg-red-50\"\n              >\n                <Trash2 className=\"h-4 w-4\" />\n              </Button>\n            </AlertDialogTrigger>\n            <AlertDialogContent>\n              <AlertDialogHeader>\n                <AlertDialogTitle>Delete Complaint</AlertDialogTitle>\n                <AlertDialogDescription>\n                  Are you sure you want to delete this complaint? This action cannot be undone.\n                </AlertDialogDescription>\n              </AlertDialogHeader>\n              <AlertDialogFooter>\n                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                <AlertDialogAction onClick={() => handleDelete(row)}>\n                  Delete\n                </AlertDialogAction>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n        </div>\n      ),\n    },\n  ];\n\n  if (isLoading) {\n    return (\n      <MainLayout title=\"Complaint Management\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"bg-white rounded-xl shadow-sm p-6 border border-slate-200\">\n            <div className=\"h-8 bg-slate-200 rounded mb-4\"></div>\n            <div className=\"space-y-3\">\n              {[1, 2, 3, 4, 5].map((i) => (\n                <div key={i} className=\"h-12 bg-slate-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </MainLayout>\n    );\n  }\n\n  return (\n    <MainLayout title=\"Complaint Management\">\n      <div className=\"space-y-6\">\n        {/* Analytics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"border-0 shadow-sm bg-gradient-to-br from-red-50 to-orange-50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Complaints</p>\n                  <p className=\"text-2xl font-bold text-foreground\">{complaints.length}</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">All time</p>\n                </div>\n                <div className=\"w-12 h-12 bg-red-100 rounded-full flex items-center justify-center\">\n                  <AlertCircle className=\"h-6 w-6 text-red-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-0 shadow-sm bg-gradient-to-br from-yellow-50 to-amber-50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Pending</p>\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    {complaints.filter((c: any) => c.status === \"pending\").length}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {complaints.length > 0 \n                      ? `${Math.round((complaints.filter((c: any) => c.status === \"pending\").length / complaints.length) * 100)}%` \n                      : '0%'} of total\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center\">\n                  <Clock className=\"h-6 w-6 text-yellow-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-0 shadow-sm bg-gradient-to-br from-blue-50 to-indigo-50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">In Progress</p>\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    {complaints.filter((c: any) => [\"assigned\", \"in-progress\", \"visited\"].includes(c.status)).length}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Active cases\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                  <Activity className=\"h-6 w-6 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-0 shadow-sm bg-gradient-to-br from-green-50 to-emerald-50\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Resolved</p>\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    {complaints.filter((c: any) => c.status === \"resolved\").length}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {complaints.length > 0 \n                      ? `${Math.round((complaints.filter((c: any) => c.status === \"resolved\").length / complaints.length) * 100)}%` \n                      : '0%'} success rate\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                  <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Priority & Location Analytics */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card className=\"border-0 shadow-sm\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-lg font-semibold text-foreground\">Priority Distribution</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {['urgent', 'high', 'medium', 'low'].map(priority => {\n                const count = complaints.filter((c: any) => c.priority === priority).length;\n                const percentage = complaints.length > 0 ? (count / complaints.length) * 100 : 0;\n                return (\n                  <div key={priority} className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Badge className={getPriorityColor(priority)}>{priority.toUpperCase()}</Badge>\n                      <span className=\"text-sm text-foreground\">{count} complaints</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-24 h-2 bg-gray-200 rounded-full overflow-hidden\">\n                        <div \n                          className={`h-full ${priority === 'urgent' ? 'bg-red-500' : priority === 'high' ? 'bg-orange-500' : priority === 'medium' ? 'bg-yellow-500' : 'bg-green-500'}`}\n                          style={{ width: `${percentage}%` }}\n                        />\n                      </div>\n                      <span className=\"text-xs text-muted-foreground w-8\">{Math.round(percentage)}%</span>\n                    </div>\n                  </div>\n                );\n              })}\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-0 shadow-sm\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-lg font-semibold text-foreground\">Location Analytics</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {['Mumbai Central', 'Delhi NCR', 'Bangalore', 'Chennai'].map(location => {\n                const locationComplaints = complaints.filter((c: any) => c.location === location);\n                const count = locationComplaints.length;\n                const resolvedCount = locationComplaints.filter((c: any) => c.status === 'resolved').length;\n                const percentage = complaints.length > 0 ? (count / complaints.length) * 100 : 0;\n                return (\n                  <div key={location} className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"text-sm font-medium text-foreground\">{location}</span>\n                      </div>\n                      <span className=\"text-xs text-muted-foreground\">{count} total</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"flex-1 h-2 bg-gray-200 rounded-full overflow-hidden\">\n                        <div \n                          className=\"h-full bg-blue-500\"\n                          style={{ width: `${percentage}%` }}\n                        />\n                      </div>\n                      <span className=\"text-xs text-muted-foreground\">{resolvedCount}/{count} resolved</span>\n                    </div>\n                  </div>\n                );\n              })}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">\n              Complaint Management\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Track and manage customer complaints efficiently\n            </p>\n          </div>\n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white shadow-lg\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                New Complaint\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Create New Complaint</DialogTitle>\n              </DialogHeader>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"title\">Title</Label>\n                  <Input\n                    id=\"title\"\n                    placeholder=\"Enter complaint title\"\n                    {...form.register(\"title\")}\n                  />\n                  {form.formState.errors.title && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {form.formState.errors.title.message}\n                    </p>\n                  )}\n                </div>\n                <div>\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    placeholder=\"Enter complaint description\"\n                    {...form.register(\"description\")}\n                  />\n                  {form.formState.errors.description && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {form.formState.errors.description.message}\n                    </p>\n                  )}\n                </div>\n                <div>\n                  <Label htmlFor=\"priority\">Priority</Label>\n                  <Select\n                    value={form.watch(\"priority\")}\n                    onValueChange={(value) => form.setValue(\"priority\", value)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select priority\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"urgent\">Urgent</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.priority && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {form.formState.errors.priority.message}\n                    </p>\n                  )}\n                </div>\n                <div>\n                  <Label htmlFor=\"location\">Location</Label>\n                  <Input\n                    id=\"location\"\n                    placeholder=\"Enter location\"\n                    {...form.register(\"location\")}\n                  />\n                  {form.formState.errors.location && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {form.formState.errors.location.message}\n                    </p>\n                  )}\n                </div>\n                <div>\n                  <Label htmlFor=\"customerId\">Customer</Label>\n                  <Select\n                    value={form.watch(\"customerId\")?.toString()}\n                    onValueChange={(value) => form.setValue(\"customerId\", parseInt(value))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select customer\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {customers.map((customer: any) => (\n                        <SelectItem key={customer.id} value={customer.id.toString()}>\n                          {customer.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.customerId && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {form.formState.errors.customerId.message}\n                    </p>\n                  )}\n                </div>\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsAddDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                  >\n                    Create Complaint\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Filters and View Toggle */}\n        <Card className=\"border-0 shadow-sm bg-gradient-to-r from-slate-50 to-blue-50/30\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                    <Input\n                      placeholder=\"Search complaints...\"\n                      value={searchQuery}\n                      onChange={(e) => {\n                        setSearchQuery(e.target.value);\n                        resetPagination();\n                      }}\n                      className=\"pl-10 w-64\"\n                    />\n                  </div>\n                  <Select value={statusFilter} onValueChange={(value) => { setStatusFilter(value); resetPagination(); }}>\n                    <SelectTrigger className=\"w-40\">\n                      <SelectValue placeholder=\"All Status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"assigned\">Assigned</SelectItem>\n                      <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                      <SelectItem value=\"visited\">Visited</SelectItem>\n                      <SelectItem value=\"resolved\">Resolved</SelectItem>\n                      <SelectItem value=\"not-resolved\">Not Resolved</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Select value={priorityFilter} onValueChange={(value) => { setPriorityFilter(value); resetPagination(); }}>\n                    <SelectTrigger className=\"w-40\">\n                      <SelectValue placeholder=\"All Priority\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Priority</SelectItem>\n                      <SelectItem value=\"urgent\">Urgent</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Select value={locationFilter} onValueChange={(value) => { setLocationFilter(value); resetPagination(); }}>\n                    <SelectTrigger className=\"w-40\">\n                      <SelectValue placeholder=\"All Locations\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Locations</SelectItem>\n                      <SelectItem value=\"Mumbai Central\">Mumbai Central</SelectItem>\n                      <SelectItem value=\"Delhi NCR\">Delhi NCR</SelectItem>\n                      <SelectItem value=\"Bangalore\">Bangalore</SelectItem>\n                      <SelectItem value=\"Chennai\">Chennai</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant={viewMode === \"card\" ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(\"card\")}\n                    className=\"px-3\"\n                  >\n                    <Grid className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant={viewMode === \"table\" ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(\"table\")}\n                    className=\"px-3\"\n                  >\n                    <List className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Main Content */}\n        <Card className=\"border-0 shadow-sm\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg font-semibold text-foreground\">\n                Complaints ({filteredComplaints.length})\n              </CardTitle>\n              <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                <span>Page {currentPage} of {totalPages}</span>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            {viewMode === \"table\" ? (\n              <div className=\"px-6\">\n                <DataTable columns={columns} data={paginatedComplaints} />\n              </div>\n            ) : (\n              <div className=\"px-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                  {paginatedComplaints.map((complaint: any) => (\n                    <Card key={complaint.id} className=\"border border-border/50 hover:shadow-md transition-shadow\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"space-y-4\">\n                          {/* Header */}\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\n                                <span className=\"text-sm font-medium text-white\">\n                                  #{complaint.id}\n                                </span>\n                              </div>\n                              <div>\n                                <h3 className=\"font-semibold text-foreground truncate\">\n                                  {complaint.title}\n                                </h3>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  {getCustomerName(complaint.customerId)}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"flex space-x-1\">\n                              <Badge className={getPriorityColor(complaint.priority)}>\n                                {complaint.priority.toUpperCase()}\n                              </Badge>\n                            </div>\n                          </div>\n\n                          {/* Description */}\n                          <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                            {complaint.description}\n                          </p>\n\n                          {/* Details */}\n                          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                            <div className=\"flex items-center space-x-2\">\n                              <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                              <span className=\"text-foreground\">{complaint.location}</span>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                              <span className=\"text-foreground\">{getTimeAgo(complaint.createdAt)}</span>\n                            </div>\n                          </div>\n\n                          {/* Status and Engineer */}\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Badge className={getStatusColor(complaint.status)}>\n                                {complaint.status.replace('-', ' ').toUpperCase()}\n                              </Badge>\n                              {complaint.rating && (\n                                <div className=\"flex items-center space-x-1\">\n                                  {renderStars(complaint.rating)}\n                                  <span className=\"text-xs text-muted-foreground\">\n                                    ({complaint.rating}/5)\n                                  </span>\n                                </div>\n                              )}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {getEngineerName(complaint.engineerId) || \"Unassigned\"}\n                            </div>\n                          </div>\n\n                          {/* Engineer Assignment Info */}\n                          {complaint.status === \"assigned\" && complaint.engineerId && (\n                            <div className=\"p-3 bg-blue-50 rounded-lg border border-blue-200\">\n                              <div className=\"flex items-center space-x-2\">\n                                <div className=\"w-6 h-6 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\n                                  <span className=\"text-xs font-medium text-white\">\n                                    {getEngineerName(complaint.engineerId)?.split(\" \").map((n: string) => n[0]).join(\"\")}\n                                  </span>\n                                </div>\n                                <div>\n                                  <p className=\"text-sm font-medium text-blue-900\">\n                                    Assigned to: {getEngineerName(complaint.engineerId)}\n                                  </p>\n                                  <p className=\"text-xs text-blue-600\">Engineer assigned</p>\n                                </div>\n                              </div>\n                            </div>\n                          )}\n\n                          {/* Actions */}\n                          <div className=\"flex justify-end space-x-2 pt-2 border-t border-border/50\">\n                            {complaint.status === \"pending\" && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleAssign(complaint)}\n                                className=\"text-purple-600 border-purple-200 hover:bg-purple-50\"\n                              >\n                                <User className=\"h-4 w-4 mr-1\" />\n                                Assign\n                              </Button>\n                            )}\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleView(complaint)}\n                              className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n                            >\n                              <Eye className=\"h-4 w-4 mr-1\" />\n                              View\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(complaint)}\n                              className=\"text-green-600 border-green-200 hover:bg-green-50\"\n                            >\n                              <Edit className=\"h-4 w-4 mr-1\" />\n                              Edit\n                            </Button>\n                            <AlertDialog>\n                              <AlertDialogTrigger asChild>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                                >\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              </AlertDialogTrigger>\n                              <AlertDialogContent>\n                                <AlertDialogHeader>\n                                  <AlertDialogTitle>Delete Complaint</AlertDialogTitle>\n                                  <AlertDialogDescription>\n                                    Are you sure you want to delete this complaint? This action cannot be undone.\n                                  </AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                  <AlertDialogAction onClick={() => handleDelete(complaint)}>\n                                    Delete\n                                  </AlertDialogAction>\n                                </AlertDialogFooter>\n                              </AlertDialogContent>\n                            </AlertDialog>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            )}\n            \n            {/* Pagination Controls */}\n            {totalPages > 1 && (\n              <div className=\"px-6 py-4 border-t border-border/50 bg-muted/20\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"text-sm text-muted-foreground\">\n                    Showing {startIndex + 1} to {Math.min(startIndex + itemsPerPage, filteredComplaints.length)} of {filteredComplaints.length} results\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(currentPage - 1)}\n                      disabled={currentPage <= 1}\n                      className=\"h-8 w-8 p-0\"\n                    >\n                      <ChevronLeft className=\"h-4 w-4\" />\n                    </Button>\n                    \n                    <div className=\"flex items-center space-x-1\">\n                      {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                        <Button\n                          key={page}\n                          variant={currentPage === page ? \"default\" : \"outline\"}\n                          size=\"sm\"\n                          onClick={() => setCurrentPage(page)}\n                          className=\"h-8 w-8 p-0\"\n                        >\n                          {page}\n                        </Button>\n                      ))}\n                    </div>\n                    \n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(currentPage + 1)}\n                      disabled={currentPage >= totalPages}\n                      className=\"h-8 w-8 p-0\"\n                    >\n                      <ChevronRight className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* View Modal */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Complaint Details</DialogTitle>\n          </DialogHeader>\n          {selectedComplaint && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">Complaint ID</Label>\n                  <p className=\"text-sm font-mono\">#{selectedComplaint.id}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">Status</Label>\n                  <Badge className={getStatusColor(selectedComplaint.status)}>\n                    {selectedComplaint.status.replace('-', ' ').toUpperCase()}\n                  </Badge>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">Customer</Label>\n                  <p className=\"text-sm\">{getCustomerName(selectedComplaint.customerId)}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">Priority</Label>\n                  <Badge className={getPriorityColor(selectedComplaint.priority)}>\n                    {selectedComplaint.priority.toUpperCase()}\n                  </Badge>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">Location</Label>\n                  <p className=\"text-sm\">{selectedComplaint.location}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">Engineer</Label>\n                  <p className=\"text-sm\">{getEngineerName(selectedComplaint.engineerId) || \"Unassigned\"}</p>\n                </div>\n              </div>\n              \n              <div>\n                <Label className=\"text-sm font-medium text-muted-foreground\">Title</Label>\n                <p className=\"text-sm font-medium mt-1\">{selectedComplaint.title}</p>\n              </div>\n              \n              <div>\n                <Label className=\"text-sm font-medium text-muted-foreground\">Description</Label>\n                <p className=\"text-sm mt-1\">{selectedComplaint.description}</p>\n              </div>\n              \n              {selectedComplaint.resolution && (\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">Resolution</Label>\n                  <p className=\"text-sm mt-1\">{selectedComplaint.resolution}</p>\n                </div>\n              )}\n              \n              {selectedComplaint.rating && (\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">Rating</Label>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    {renderStars(selectedComplaint.rating)}\n                    <span className=\"text-sm\">({selectedComplaint.rating}/5)</span>\n                  </div>\n                </div>\n              )}\n              \n              {selectedComplaint.feedback && (\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">Feedback</Label>\n                  <p className=\"text-sm mt-1\">{selectedComplaint.feedback}</p>\n                </div>\n              )}\n              \n              <div className=\"grid grid-cols-2 gap-6 text-sm text-muted-foreground\">\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">Created</Label>\n                  <p className=\"text-sm\">{new Date(selectedComplaint.createdAt).toLocaleString()}</p>\n                </div>\n                {selectedComplaint.resolvedAt && (\n                  <div>\n                    <Label className=\"text-sm font-medium text-muted-foreground\">Resolved</Label>\n                    <p className=\"text-sm\">{new Date(selectedComplaint.resolvedAt).toLocaleString()}</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Modal */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Complaint</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"edit-title\">Title</Label>\n              <Input\n                id=\"edit-title\"\n                placeholder=\"Enter complaint title\"\n                {...editForm.register(\"title\")}\n              />\n              {editForm.formState.errors.title && (\n                <p className=\"text-sm text-red-600 mt-1\">{editForm.formState.errors.title.message}</p>\n              )}\n            </div>\n            <div>\n              <Label htmlFor=\"edit-description\">Description</Label>\n              <Textarea\n                id=\"edit-description\"\n                placeholder=\"Enter complaint description\"\n                {...editForm.register(\"description\")}\n              />\n              {editForm.formState.errors.description && (\n                <p className=\"text-sm text-red-600 mt-1\">{editForm.formState.errors.description.message}</p>\n              )}\n            </div>\n            <div>\n              <Label htmlFor=\"edit-priority\">Priority</Label>\n              <Select\n                value={editForm.watch(\"priority\")}\n                onValueChange={(value) => editForm.setValue(\"priority\", value)}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select priority\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"urgent\">Urgent</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                </SelectContent>\n              </Select>\n              {editForm.formState.errors.priority && (\n                <p className=\"text-sm text-red-600 mt-1\">{editForm.formState.errors.priority.message}</p>\n              )}\n            </div>\n            <div>\n              <Label htmlFor=\"edit-location\">Location</Label>\n              <Input\n                id=\"edit-location\"\n                placeholder=\"Enter location\"\n                {...editForm.register(\"location\")}\n              />\n              {editForm.formState.errors.location && (\n                <p className=\"text-sm text-red-600 mt-1\">{editForm.formState.errors.location.message}</p>\n              )}\n            </div>\n            <div>\n              <Label htmlFor=\"edit-status\">Status</Label>\n              <Select\n                value={editForm.watch(\"status\")}\n                onValueChange={(value) => editForm.setValue(\"status\", value)}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"assigned\">Assigned</SelectItem>\n                  <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                  <SelectItem value=\"visited\">Visited</SelectItem>\n                  <SelectItem value=\"resolved\">Resolved</SelectItem>\n                  <SelectItem value=\"not-resolved\">Not Resolved</SelectItem>\n                </SelectContent>\n              </Select>\n              {editForm.formState.errors.status && (\n                <p className=\"text-sm text-red-600 mt-1\">{editForm.formState.errors.status.message}</p>\n              )}\n            </div>\n            <div>\n              <Label htmlFor=\"edit-engineer\">Engineer</Label>\n              <Select\n                value={editForm.watch(\"engineerId\")?.toString() || \"unassigned\"}\n                onValueChange={(value) => editForm.setValue(\"engineerId\", value === \"unassigned\" ? null : parseInt(value))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select engineer\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n                  {engineers.map((engineer: any) => (\n                    <SelectItem key={engineer.id} value={engineer.id.toString()}>\n                      {engineer.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {editForm.formState.errors.engineerId && (\n                <p className=\"text-sm text-red-600 mt-1\">{editForm.formState.errors.engineerId.message}</p>\n              )}\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsEditDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                Update Complaint\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Assignment Modal */}\n      <Dialog open={isAssignDialogOpen} onOpenChange={setIsAssignDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Assign Engineer</DialogTitle>\n          </DialogHeader>\n          {selectedComplaint && (\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-slate-50 rounded-lg\">\n                <h4 className=\"font-medium text-foreground\">Complaint Details</h4>\n                <p className=\"text-sm text-muted-foreground mt-1\">{selectedComplaint.title}</p>\n                <div className=\"flex items-center space-x-4 mt-2 text-sm\">\n                  <span className=\"flex items-center\">\n                    <MapPin className=\"h-3 w-3 mr-1\" />\n                    {selectedComplaint.location}\n                  </span>\n                  <Badge className={getPriorityColor(selectedComplaint.priority)}>\n                    {selectedComplaint.priority.toUpperCase()}\n                  </Badge>\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"engineer-select\">Select Engineer</Label>\n                <Select value={selectedEngineerId} onValueChange={setSelectedEngineerId}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Choose an engineer\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {engineers\n                      .filter((engineer: any) => engineer.isActive)\n                      .map((engineer: any) => (\n                        <SelectItem key={engineer.id} value={engineer.id.toString()}>\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-4 h-4 bg-gradient-to-br from-green-500 to-blue-600 rounded-full flex items-center justify-center\">\n                              <span className=\"text-xs font-medium text-white\">\n                                {engineer.name.split(\" \").map((n: string) => n[0]).join(\"\")}\n                              </span>\n                            </div>\n                            <span>{engineer.name}</span>\n                            <span className=\"text-xs text-muted-foreground\">\n                              ({engineer.location})\n                            </span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsAssignDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleAssignEngineer}\n                  disabled={!selectedEngineerId}\n                  className=\"bg-purple-600 hover:bg-purple-700\"\n                >\n                  Assign Engineer\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </MainLayout>\n  );\n}","size_bytes":56442},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { StatsCard } from \"@/components/ui/stats-card\";\nimport { ComplaintChart } from \"@/components/charts/complaint-chart\";\nimport { StatusChart } from \"@/components/charts/status-chart\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { generateDashboardStats } from \"@/lib/dummyData\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  AlertCircle, \n  CheckCircle, \n  Clock, \n  Users, \n  TrendingUp, \n  UserPlus, \n  AlertTriangle,\n  Activity,\n  Zap,\n  Target,\n  Wifi,\n  Signal,\n  Router,\n  Shield,\n  Star,\n  Heart,\n  Sparkles,\n  Crown,\n  Award,\n  Flame,\n  Rocket,\n  Globe,\n  Settings,\n  Eye,\n  BarChart3,\n  PieChart,\n  Calendar,\n  Bell,\n  Filter,\n  RefreshCw,\n  Download,\n  Share2,\n  MessageSquare,\n  Coffee,\n  Headphones,\n  Briefcase,\n  MapPin,\n  Clock3,\n  Gem\n} from \"lucide-react\";\n\nexport default function Dashboard() {\n  const stats = generateDashboardStats();\n  const isLoading = false;\n\n  if (isLoading) {\n    return (\n      <MainLayout title=\"Dashboard\">\n        <div className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"bg-white rounded-xl shadow-sm p-6 border border-slate-200 animate-pulse\">\n                <div className=\"h-6 bg-slate-200 rounded mb-2\"></div>\n                <div className=\"h-8 bg-slate-200 rounded\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </MainLayout>\n    );\n  }\n\n  return (\n    <MainLayout title=\"Dashboard\">\n      <div className=\"min-h-screen dashboard-hero\">\n        <div className=\"space-y-8 p-6\">\n          {/* Welcome Header */}\n          <div className=\"text-center py-8\">\n            <div className=\"flex items-center justify-center mb-4\">\n              <div className=\"relative\">\n                <Crown className=\"h-12 w-12 dashboard-welcome-icon sparkle-animation\" />\n                <div className=\"absolute -top-1 -right-1\">\n                  <Sparkles className=\"h-4 w-4 dashboard-welcome-icon animate-pulse\" />\n                </div>\n              </div>\n            </div>\n            <h1 className=\"text-4xl font-bold dashboard-welcome-text mb-2\">\n              Welcome to Your Command Center\n            </h1>\n            <p className=\"dashboard-welcome-muted text-lg\">\n              Manage your WiFi network with style and efficiency\n            </p>\n            <div className=\"flex items-center justify-center gap-3 mt-4\">\n              <Badge className=\"badge-super-admin\">\n                <Crown className=\"h-3 w-3 mr-1\" />\n                Super Admin\n              </Badge>\n              <Badge className=\"badge-admin\">\n                <Shield className=\"h-3 w-3 mr-1\" />\n                Admin Access\n              </Badge>\n              <Badge className=\"badge-manager\">\n                <Award className=\"h-3 w-3 mr-1\" />\n                Manager Panel\n              </Badge>\n            </div>\n          </div>\n\n          {/* Enhanced Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <StatsCard\n              title=\"Total Complaints\"\n              value={stats?.totalComplaints || 156}\n              change=\"12%\"\n              changeType=\"positive\"\n              icon={AlertCircle}\n              iconColor=\"dashboard-welcome-icon\"\n              gradient\n              className=\"dashboard-stats-card rainbow-border\"\n            />\n            <StatsCard\n              title=\"Resolved Issues\"\n              value={stats?.resolvedIssues || 142}\n              change=\"18%\"\n              changeType=\"positive\"\n              icon={CheckCircle}\n              iconColor=\"dashboard-welcome-icon\"\n              gradient\n              className=\"dashboard-stats-card\"\n            />\n            <StatsCard\n              title=\"Avg Resolution Time\"\n              value={`${stats?.avgResolutionTime || 2.4}h`}\n              change=\"15%\"\n              changeType=\"positive\"\n              icon={Clock}\n              iconColor=\"dashboard-welcome-icon\"\n              gradient\n              className=\"dashboard-stats-card\"\n            />\n            <StatsCard\n              title=\"Active Engineers\"\n              value={stats?.activeEngineers || 24}\n              change=\"5%\"\n              changeType=\"positive\"\n              icon={Users}\n              iconColor=\"dashboard-welcome-icon\"\n              gradient\n              className=\"dashboard-stats-card\"\n            />\n          </div>\n\n          {/* Performance Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            <StatsCard\n              title=\"Network Uptime\"\n              value=\"99.8%\"\n              change=\"0.2%\"\n              changeType=\"positive\"\n              icon={Wifi}\n              iconColor=\"dashboard-welcome-icon\"\n              className=\"dashboard-stats-card\"\n            />\n            <StatsCard\n              title=\"Customer Satisfaction\"\n              value=\"4.8\"\n              change=\"0.3\"\n              changeType=\"positive\"\n              icon={Star}\n              iconColor=\"dashboard-welcome-icon\"\n              className=\"dashboard-stats-card sparkle-animation\"\n            />\n            <StatsCard\n              title=\"Response Time\"\n              value=\"1.2s\"\n              change=\"0.8s\"\n              changeType=\"positive\"\n              icon={Zap}\n              iconColor=\"dashboard-welcome-icon\"\n              className=\"dashboard-stats-card\"\n            />\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 py-6\">\n            <Button className=\"dashboard-stats-card h-16 flex items-center justify-center gap-3 hover:scale-105 transition-all duration-300\">\n              <Rocket className=\"h-5 w-5 dashboard-welcome-icon\" />\n              <span className=\"font-medium dashboard-welcome-text\">Quick Deploy</span>\n            </Button>\n            <Button className=\"dashboard-stats-card h-16 flex items-center justify-center gap-3 hover:scale-105 transition-all duration-300\">\n              <Eye className=\"h-5 w-5 dashboard-welcome-icon\" />\n              <span className=\"font-medium dashboard-welcome-text\">Live Monitor</span>\n            </Button>\n            <Button className=\"dashboard-stats-card h-16 flex items-center justify-center gap-3 hover:scale-105 transition-all duration-300\">\n              <Settings className=\"h-5 w-5 dashboard-welcome-icon\" />\n              <span className=\"font-medium dashboard-welcome-text\">System Config</span>\n            </Button>\n            <Button className=\"dashboard-stats-card h-16 flex items-center justify-center gap-3 hover:scale-105 transition-all duration-300\">\n              <Download className=\"h-5 w-5 dashboard-welcome-icon\" />\n              <span className=\"font-medium dashboard-welcome-text\">Export Data</span>\n            </Button>\n          </div>\n\n          {/* Charts Row */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card className=\"dashboard-chart-card shadow-2xl\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-xl font-bold dashboard-welcome-text flex items-center gap-2\">\n                  <Activity className=\"h-5 w-5 dashboard-welcome-icon\" />\n                  Performance Analytics\n                  <Gem className=\"h-4 w-4 dashboard-welcome-icon sparkle-animation\" />\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ComplaintChart title=\"Network Performance\" />\n              </CardContent>\n            </Card>\n            \n            {/* Enhanced Status Distribution */}\n            <Card className=\"dashboard-chart-card shadow-2xl\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-xl font-bold dashboard-welcome-text flex items-center gap-2\">\n                  <Target className=\"h-5 w-5 dashboard-welcome-icon\" />\n                  Issue Status\n                  <Flame className=\"h-4 w-4 dashboard-welcome-icon animate-bounce\" />\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <StatusChart title=\"Issue Status Distribution\" />\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Charts Row */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <Card className=\"dashboard-chart-card shadow-2xl\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg font-bold dashboard-welcome-text flex items-center gap-2\">\n                  <BarChart3 className=\"h-5 w-5 dashboard-welcome-icon\" />\n                  Issue Trends\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <StatusChart title=\"Issue Trends\" />\n              </CardContent>\n            </Card>\n\n            <Card className=\"dashboard-chart-card shadow-2xl\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg font-bold dashboard-welcome-text flex items-center gap-2\">\n                  <Signal className=\"h-5 w-5 dashboard-welcome-icon\" />\n                  Network Metrics\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ComplaintChart title=\"Network Uptime\" type=\"area\" />\n              </CardContent>\n            </Card>\n\n            <Card className=\"dashboard-chart-card shadow-2xl\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg font-bold dashboard-welcome-text flex items-center gap-2\">\n                  <Users className=\"h-5 w-5 dashboard-welcome-icon\" />\n                  Engineer Performance\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-3 rounded-lg dashboard-stats-card hover:scale-105 transition-transform duration-300\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-8 h-8 rounded-full flex items-center justify-center text-white text-xs font-bold dashboard-welcome-icon\">\n                        JD\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium dashboard-welcome-text\">John Doe</p>\n                        <p className=\"text-xs dashboard-welcome-muted\">24 resolved</p>\n                      </div>\n                    </div>\n                    <Badge className=\"badge-super-admin\">Top</Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 rounded-lg dashboard-stats-card hover:scale-105 transition-transform duration-300\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-8 h-8 rounded-full flex items-center justify-center text-white text-xs font-bold dashboard-welcome-icon\">\n                        JS\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium dashboard-welcome-text\">Jane Smith</p>\n                        <p className=\"text-xs dashboard-welcome-muted\">18 resolved</p>\n                      </div>\n                    </div>\n                    <Badge className=\"badge-admin\">Good</Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 rounded-lg dashboard-stats-card hover:scale-105 transition-transform duration-300\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-8 h-8 rounded-full flex items-center justify-center text-white text-xs font-bold dashboard-welcome-icon\">\n                        MB\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium dashboard-welcome-text\">Mike Brown</p>\n                        <p className=\"text-xs dashboard-welcome-muted\">12 resolved</p>\n                      </div>\n                    </div>\n                    <Badge className=\"badge-manager\">Active</Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Recent Activities */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card className=\"dashboard-chart-card shadow-2xl\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-xl font-bold dashboard-welcome-text flex items-center gap-2\">\n                  <Activity className=\"h-5 w-5 dashboard-welcome-icon\" />\n                  Recent Activities\n                  <Heart className=\"h-4 w-4 dashboard-welcome-icon animate-pulse\" />\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start space-x-4 p-4 rounded-lg dashboard-stats-card hover:scale-105 transition-transform duration-300\">\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"h-12 w-12 rounded-full flex items-center justify-center shadow-lg sparkle-animation dashboard-welcome-icon\">\n                        <CheckCircle className=\"h-6 w-6 text-white\" />\n                      </div>\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium dashboard-welcome-text\">Complaint #WFC-2025-156 resolved by Engineer Sarah Chen</p>\n                      <p className=\"text-xs dashboard-welcome-muted flex items-center gap-1\">\n                        <MapPin className=\"h-3 w-3\" />\n                        Mumbai Central • \n                        <Clock3 className=\"h-3 w-3\" />\n                        3 minutes ago\n                      </p>\n                      <Badge className=\"mt-2 badge-super-admin text-xs shadow-sm\">\n                        <Award className=\"h-3 w-3 mr-1\" />\n                        Resolved\n                      </Badge>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-4 p-4 rounded-lg dashboard-stats-card hover:scale-105 transition-transform duration-300\">\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"h-12 w-12 rounded-full flex items-center justify-center shadow-lg dashboard-welcome-icon\">\n                        <UserPlus className=\"h-6 w-6 text-white\" />\n                      </div>\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium dashboard-welcome-text\">New engineer Raj Patel assigned to Delhi region</p>\n                      <p className=\"text-xs dashboard-welcome-muted flex items-center gap-1\">\n                        <MapPin className=\"h-3 w-3\" />\n                        Delhi North • \n                        <Clock3 className=\"h-3 w-3\" />\n                        12 minutes ago\n                      </p>\n                      <Badge className=\"mt-2 badge-admin text-xs shadow-sm\">\n                        <Briefcase className=\"h-3 w-3 mr-1\" />\n                        New Assignment\n                      </Badge>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-4 p-4 rounded-lg dashboard-stats-card hover:scale-105 transition-transform duration-300\">\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"h-12 w-12 rounded-full flex items-center justify-center shadow-lg dashboard-welcome-icon\">\n                        <AlertTriangle className=\"h-6 w-6 text-white\" />\n                      </div>\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium dashboard-welcome-text\">Critical network outage reported in Bangalore</p>\n                      <p className=\"text-xs dashboard-welcome-muted flex items-center gap-1\">\n                        <MapPin className=\"h-3 w-3\" />\n                        Bangalore South • \n                        <Clock3 className=\"h-3 w-3\" />\n                        45 minutes ago\n                      </p>\n                      <Badge variant=\"destructive\" className=\"mt-2 text-xs shadow-sm\">\n                        <Flame className=\"h-3 w-3 mr-1\" />\n                        High Priority\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Network Status */}\n            <Card className=\"dashboard-chart-card shadow-2xl rainbow-border\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-xl font-bold dashboard-welcome-text flex items-center gap-2\">\n                  <Shield className=\"h-5 w-5 dashboard-welcome-icon\" />\n                  Network Health\n                  <Coffee className=\"h-4 w-4 dashboard-welcome-icon\" />\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 rounded-lg dashboard-stats-card hover:scale-105 transition-transform duration-300\">\n                    <div className=\"flex items-center gap-3\">\n                      <Router className=\"h-6 w-6 dashboard-welcome-icon sparkle-animation\" />\n                      <div>\n                        <p className=\"font-medium dashboard-welcome-text\">Core Network</p>\n                        <p className=\"text-xs dashboard-welcome-muted\">All systems operational</p>\n                      </div>\n                    </div>\n                    <Badge className=\"badge-super-admin shadow-sm\">\n                      <Sparkles className=\"h-3 w-3 mr-1\" />\n                      Online\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 rounded-lg dashboard-stats-card hover:scale-105 transition-transform duration-300\">\n                    <div className=\"flex items-center gap-3\">\n                      <Signal className=\"h-6 w-6 dashboard-welcome-icon\" />\n                      <div>\n                        <p className=\"font-medium dashboard-welcome-text\">Regional Towers</p>\n                        <p className=\"text-xs dashboard-welcome-muted\">847/852 towers active</p>\n                      </div>\n                    </div>\n                    <Badge className=\"badge-admin shadow-sm\">\n                      <TrendingUp className=\"h-3 w-3 mr-1\" />\n                      99.4%\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 rounded-lg dashboard-stats-card hover:scale-105 transition-transform duration-300\">\n                    <div className=\"flex items-center gap-3\">\n                      <Wifi className=\"h-6 w-6 dashboard-welcome-icon\" />\n                      <div>\n                        <p className=\"font-medium dashboard-welcome-text\">Customer Connections</p>\n                        <p className=\"text-xs dashboard-welcome-muted\">Minor latency detected</p>\n                      </div>\n                    </div>\n                    <Badge className=\"badge-manager shadow-sm\">\n                      <Eye className=\"h-3 w-3 mr-1\" />\n                      Watch\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Fun Admin Corner */}\n          <div className=\"text-center py-8\">\n            <div className=\"flex items-center justify-center gap-3 mb-4\">\n              <Headphones className=\"h-8 w-8 dashboard-welcome-icon\" />\n              <MessageSquare className=\"h-8 w-8 dashboard-welcome-icon sparkle-animation\" />\n              <Globe className=\"h-8 w-8 dashboard-welcome-icon\" />\n            </div>\n            <p className=\"text-2xl font-bold dashboard-welcome-text mb-2\">\n              You're doing amazing work! 🎉\n            </p>\n            <p className=\"dashboard-welcome-muted\">\n              Managing networks has never looked this good. Keep up the fantastic work!\n            </p>\n            <div className=\"flex items-center justify-center gap-4 mt-6\">\n              <Button className=\"dashboard-stats-card px-6 py-3 hover:scale-110 transition-all duration-300\">\n                <Share2 className=\"h-4 w-4 mr-2 dashboard-welcome-icon\" />\n                <span className=\"dashboard-welcome-text\">Share Success</span>\n              </Button>\n              <Button className=\"dashboard-stats-card px-6 py-3 hover:scale-110 transition-all duration-300\">\n                <RefreshCw className=\"h-4 w-4 mr-2 dashboard-welcome-icon\" />\n                <span className=\"dashboard-welcome-text\">Refresh Data</span>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </MainLayout>\n  );\n}\n","size_bytes":21401},"client/src/pages/engineer-detail.tsx":{"content":"import React from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { ArrowLeft, Wrench, Mail, Phone, MapPin, Calendar, Star, Briefcase, Clock, Award, MoreHorizontal, Edit } from 'lucide-react';\nimport { dummyEngineers, dummyComplaints } from '@/lib/dummyData';\nimport { MainLayout } from '@/components/layout/main-layout';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { cn } from '@/lib/utils';\n\nexport default function EngineerDetail() {\n  const params = useParams();\n  const [, navigate] = useLocation();\n  const engineerId = params?.id ? parseInt(params.id) : null;\n  \n  const engineer = engineerId ? dummyEngineers.find(e => e.id === engineerId) : null;\n  const engineerComplaints = engineerId ? dummyComplaints.filter(c => c.engineerId === engineerId) : [];\n\n  if (!engineer) {\n    return (\n      <MainLayout>\n        <div className=\"p-8 text-center\">\n          <Wrench className=\"h-16 w-16 mx-auto mb-4 text-gray-400\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">Engineer Not Found</h3>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">The engineer you're looking for doesn't exist.</p>\n          <Button onClick={() => navigate('/engineers')} variant=\"outline\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Engineers\n          </Button>\n        </div>\n      </MainLayout>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'resolved':\n        return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300';\n      case 'in-progress':\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300';\n      case 'assigned':\n        return 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-300';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-300';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent':\n        return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300';\n      case 'high':\n        return 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-300';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300';\n      case 'low':\n        return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-300';\n    }\n  };\n\n  const getRatingColor = (rating: number) => {\n    if (rating >= 45) return 'text-green-600 dark:text-green-400';\n    if (rating >= 35) return 'text-yellow-600 dark:text-yellow-400';\n    return 'text-red-600 dark:text-red-400';\n  };\n\n  const completionRate = engineer.completedJobs / (engineer.completedJobs + engineer.activeJobs) * 100;\n\n  return (\n    <MainLayout>\n      <div className=\"p-6 max-w-6xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => navigate('/engineers')}\n              className=\"text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Engineers\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">{engineer.name}</h1>\n              <p className=\"text-gray-600 dark:text-gray-400\">Engineer Details</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Edit className=\"h-4 w-4 mr-2\" />\n              Edit\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column - Engineer Info */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            {/* Profile Card */}\n            <Card>\n              <CardHeader className=\"text-center pb-4\">\n                <div className=\"mx-auto w-20 h-20 bg-gradient-to-br from-green-500 to-blue-600 rounded-full flex items-center justify-center text-white text-2xl font-bold mb-4\">\n                  {engineer.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                </div>\n                <CardTitle className=\"text-xl\">{engineer.name}</CardTitle>\n                <p className=\"text-gray-600 dark:text-gray-400\">{engineer.specialization}</p>\n                <div className=\"flex justify-center\">\n                  <Badge className={cn(\n                    \"capitalize\",\n                    engineer.isActive \n                      ? \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300\"\n                      : \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300\"\n                  )}>\n                    {engineer.isActive ? 'Active' : 'Inactive'}\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center gap-3 text-sm\">\n                  <Mail className=\"h-4 w-4 text-gray-400\" />\n                  <span className=\"text-gray-600 dark:text-gray-400\">Email:</span>\n                  <span className=\"font-medium\">{engineer.email}</span>\n                </div>\n                <div className=\"flex items-center gap-3 text-sm\">\n                  <Phone className=\"h-4 w-4 text-gray-400\" />\n                  <span className=\"text-gray-600 dark:text-gray-400\">Phone:</span>\n                  <span className=\"font-medium\">{engineer.phone}</span>\n                </div>\n                <div className=\"flex items-center gap-3 text-sm\">\n                  <MapPin className=\"h-4 w-4 text-gray-400\" />\n                  <span className=\"text-gray-600 dark:text-gray-400\">Location:</span>\n                  <span className=\"font-medium\">{engineer.location}</span>\n                </div>\n                <div className=\"flex items-center gap-3 text-sm\">\n                  <Calendar className=\"h-4 w-4 text-gray-400\" />\n                  <span className=\"text-gray-600 dark:text-gray-400\">Joined:</span>\n                  <span className=\"font-medium\">{new Date(engineer.createdAt).toLocaleDateString()}</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Performance Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Award className=\"h-5 w-5\" />\n                  Performance Metrics\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Rating */}\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm text-gray-600 dark:text-gray-400\">Rating</span>\n                    <div className=\"flex items-center gap-1\">\n                      <Star className={cn(\"h-4 w-4\", getRatingColor(engineer.rating))} />\n                      <span className={cn(\"font-bold\", getRatingColor(engineer.rating))}>\n                        {engineer.rating}/50\n                      </span>\n                    </div>\n                  </div>\n                  <Progress value={(engineer.rating / 50) * 100} className=\"h-2\" />\n                </div>\n\n                {/* Completion Rate */}\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm text-gray-600 dark:text-gray-400\">Completion Rate</span>\n                    <span className=\"font-bold text-green-600 dark:text-green-400\">\n                      {completionRate.toFixed(1)}%\n                    </span>\n                  </div>\n                  <Progress value={completionRate} className=\"h-2\" />\n                </div>\n\n                {/* Jobs Stats */}\n                <div className=\"grid grid-cols-2 gap-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"text-center\">\n                    <div className=\"flex items-center justify-center w-10 h-10 bg-green-100 dark:bg-green-900/20 rounded-lg mx-auto mb-2\">\n                      <Briefcase className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n                    </div>\n                    <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{engineer.completedJobs}</p>\n                    <p className=\"text-xs text-gray-600 dark:text-gray-400\">Completed</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"flex items-center justify-center w-10 h-10 bg-blue-100 dark:bg-blue-900/20 rounded-lg mx-auto mb-2\">\n                      <Clock className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                    </div>\n                    <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{engineer.activeJobs}</p>\n                    <p className=\"text-xs text-gray-600 dark:text-gray-400\">Active</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column - Assigned Complaints */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>Assigned Complaints</span>\n                  <Badge variant=\"secondary\">{engineerComplaints.length}</Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {engineerComplaints.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {engineerComplaints.map((complaint) => (\n                      <div\n                        key={complaint.id}\n                        className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:bg-gray-50 dark:hover:bg-gray-800/50 cursor-pointer transition-colors\"\n                        onClick={() => navigate(`/complaints/${complaint.id}`)}\n                      >\n                        <div className=\"flex items-start justify-between mb-2\">\n                          <h4 className=\"font-medium text-gray-900 dark:text-white\">{complaint.title}</h4>\n                          <div className=\"flex gap-2\">\n                            <Badge className={cn(\"text-xs\", getPriorityColor(complaint.priority))}>\n                              {complaint.priority}\n                            </Badge>\n                            <Badge className={cn(\"text-xs\", getStatusColor(complaint.status))}>\n                              {complaint.status}\n                            </Badge>\n                          </div>\n                        </div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3 line-clamp-2\">\n                          {complaint.description}\n                        </p>\n                        <div className=\"flex items-center justify-between text-xs text-gray-500 dark:text-gray-400\">\n                          <div className=\"flex items-center gap-4\">\n                            <span>Customer: {complaint.customerName}</span>\n                            <span>Location: {complaint.location}</span>\n                          </div>\n                          <span>Created: {new Date(complaint.createdAt).toLocaleDateString()}</span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Briefcase className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No Active Complaints</h3>\n                    <p className=\"text-gray-600 dark:text-gray-400\">This engineer has no complaints assigned currently.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Performance Insights */}\n            <Card className=\"mt-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Award className=\"h-5 w-5\" />\n                  Performance Insights\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"text-center p-4 bg-green-50 dark:bg-green-900/10 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-green-600 dark:text-green-400 mb-1\">\n                      {((engineer.completedJobs / (engineer.completedJobs + engineer.activeJobs)) * 100).toFixed(0)}%\n                    </div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">Success Rate</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-blue-50 dark:bg-blue-900/10 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400 mb-1\">\n                      {Math.round(engineer.completedJobs / 12)}\n                    </div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">Avg Jobs/Month</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-purple-50 dark:bg-purple-900/10 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-purple-600 dark:text-purple-400 mb-1\">\n                      {engineer.rating >= 45 ? 'Excellent' : engineer.rating >= 35 ? 'Good' : 'Average'}\n                    </div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">Performance</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":14483},"client/src/pages/engineers.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { UserPlus, MapPin, Phone, Mail, Star, Edit, Trash2, Search, Filter, Grid, List, Eye, Settings, Activity, Users, CheckCircle, TrendingUp, ChevronLeft, ChevronRight, User, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\nimport { generateDummyEngineers, type Engineer } from \"@/lib/dummyData\";\n\n// Local type definitions\nconst insertEngineerSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  phone: z.string().min(10, \"Valid phone number is required\"),\n  location: z.string().min(1, \"Location is required\"),\n  specialization: z.string().min(1, \"Specialization is required\"),\n  rating: z.number().min(0).max(5).default(4.0),\n  completedJobs: z.number().min(0).default(0),\n  activeJobs: z.number().min(0).default(0),\n  isActive: z.boolean().default(true),\n});\n\ntype InsertEngineer = z.infer<typeof insertEngineerSchema>;\ntype EngineerData = Engineer;\n\nexport default function Engineers() {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [locationFilter, setLocationFilter] = useState(\"all\");\n  const [specializationFilter, setSpecializationFilter] = useState(\"all\");\n  const [viewMode, setViewMode] = useState<\"card\" | \"table\">(\"card\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [selectedEngineer, setSelectedEngineer] = useState<EngineerData | null>(null);\n  const itemsPerPage = 6;\n\n  const { toast } = useToast();\n\n  // Load dummy data\n  const [engineers, setEngineers] = useState(generateDummyEngineers());\n\n  const form = useForm<InsertEngineer>({\n    resolver: zodResolver(insertEngineerSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      location: \"\",\n      specialization: \"\",\n      rating: 4.0,\n      completedJobs: 0,\n      activeJobs: 0,\n      isActive: true,\n    },\n  });\n\n  const editForm = useForm<InsertEngineer>({\n    resolver: zodResolver(insertEngineerSchema),\n  });\n\n  // Filter engineers based on search and filter criteria\n  const filteredEngineers = engineers.filter((engineer) => {\n    const matchesSearch = \n      engineer.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      engineer.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      engineer.location.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || \n      (statusFilter === \"active\" && engineer.isActive) ||\n      (statusFilter === \"inactive\" && !engineer.isActive);\n    \n    const matchesLocation = locationFilter === \"all\" || engineer.location === locationFilter;\n    const matchesSpecialization = specializationFilter === \"all\" || engineer.specialization === specializationFilter;\n\n    return matchesSearch && matchesStatus && matchesLocation && matchesSpecialization;\n  });\n\n  // Pagination\n  const totalPages = Math.ceil(filteredEngineers.length / itemsPerPage);\n  const currentEngineers = filteredEngineers.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  const handleCreateEngineer = (data: InsertEngineer) => {\n    const newEngineer: EngineerData = {\n      ...data,\n      id: Math.max(...engineers.map(e => e.id)) + 1,\n      createdAt: new Date().toISOString(),\n    };\n    setEngineers([...engineers, newEngineer]);\n    toast({\n      title: \"Success\",\n      description: \"Engineer created successfully\",\n    });\n    setIsCreateDialogOpen(false);\n    form.reset();\n  };\n\n  const handleEditEngineer = (data: InsertEngineer) => {\n    const updatedEngineers = engineers.map(engineer => \n      engineer.id === selectedEngineer?.id ? { ...engineer, ...data } : engineer\n    );\n    setEngineers(updatedEngineers);\n    toast({\n      title: \"Success\",\n      description: \"Engineer updated successfully\",\n    });\n    setIsEditDialogOpen(false);\n  };\n\n  const handleDeleteEngineer = (engineerId: number) => {\n    setEngineers(engineers.filter(engineer => engineer.id !== engineerId));\n    toast({\n      title: \"Success\",\n      description: \"Engineer deleted successfully\",\n    });\n  };\n\n  const getStatusBadge = (isActive: boolean) => {\n    return (\n      <Badge className={`${isActive ? \"bg-green-100 text-green-800\" : \"bg-red-100 text-red-800\"} border-0`}>\n        {isActive ? (\n          <>\n            <CheckCircle className=\"w-3 h-3 mr-1\" />\n            Active\n          </>\n        ) : (\n          <>\n            <X className=\"w-3 h-3 mr-1\" />\n            Inactive\n          </>\n        )}\n      </Badge>\n    );\n  };\n\n  const getRatingStars = (rating: number) => {\n    return (\n      <div className=\"flex items-center gap-1\">\n        {[1, 2, 3, 4, 5].map((star) => (\n          <Star\n            key={star}\n            className={`w-4 h-4 ${\n              star <= rating ? \"fill-yellow-400 text-yellow-400\" : \"text-gray-300\"\n            }`}\n          />\n        ))}\n        <span className=\"text-sm text-muted-foreground ml-1\">({rating})</span>\n      </div>\n    );\n  };\n\n  const stats = {\n    total: engineers.length,\n    active: engineers.filter(e => e.isActive).length,\n    inactive: engineers.filter(e => !e.isActive).length,\n    avgRating: engineers.reduce((sum, e) => sum + e.rating, 0) / engineers.length,\n  };\n\n  return (\n    <MainLayout title=\"Engineer Management\">\n      <div className=\"space-y-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Engineers</p>\n                  <p className=\"text-2xl font-bold\">{stats.total}</p>\n                </div>\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Active Engineers</p>\n                  <p className=\"text-2xl font-bold text-green-600\">{stats.active}</p>\n                </div>\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Inactive</p>\n                  <p className=\"text-2xl font-bold text-red-600\">{stats.inactive}</p>\n                </div>\n                <X className=\"h-4 w-4 text-red-600\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Avg Rating</p>\n                  <p className=\"text-2xl font-bold text-yellow-600\">{stats.avgRating.toFixed(1)}</p>\n                </div>\n                <Star className=\"h-4 w-4 text-yellow-600\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search and Filters */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col md:flex-row gap-4 items-center justify-between\">\n              <div className=\"flex-1 flex gap-4\">\n                <div className=\"relative flex-1 max-w-sm\">\n                  <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search engineers...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-8\"\n                  />\n                </div>\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"w-[140px]\">\n                    <SelectValue placeholder=\"Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"active\">Active</SelectItem>\n                    <SelectItem value=\"inactive\">Inactive</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Select value={locationFilter} onValueChange={setLocationFilter}>\n                  <SelectTrigger className=\"w-[140px]\">\n                    <SelectValue placeholder=\"Location\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Locations</SelectItem>\n                    {Array.from(new Set(engineers.map(e => e.location))).map(location => (\n                      <SelectItem key={location} value={location}>{location}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setViewMode(viewMode === \"card\" ? \"table\" : \"card\")}\n                >\n                  {viewMode === \"card\" ? <List className=\"h-4 w-4\" /> : <Grid className=\"h-4 w-4\" />}\n                </Button>\n                <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button>\n                      <UserPlus className=\"h-4 w-4 mr-2\" />\n                      Add Engineer\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-2xl\">\n                    <DialogHeader>\n                      <DialogTitle>Create New Engineer</DialogTitle>\n                    </DialogHeader>\n                    <form onSubmit={form.handleSubmit(handleCreateEngineer)} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"name\">Name</Label>\n                          <Input {...form.register(\"name\")} />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"email\">Email</Label>\n                          <Input {...form.register(\"email\")} type=\"email\" />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"phone\">Phone</Label>\n                          <Input {...form.register(\"phone\")} />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"location\">Location</Label>\n                          <Input {...form.register(\"location\")} />\n                        </div>\n                        <div className=\"col-span-2\">\n                          <Label htmlFor=\"specialization\">Specialization</Label>\n                          <Input {...form.register(\"specialization\")} />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"rating\">Rating</Label>\n                          <Input {...form.register(\"rating\", { valueAsNumber: true })} type=\"number\" min=\"0\" max=\"5\" step=\"0.1\" />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"completedJobs\">Completed Jobs</Label>\n                          <Input {...form.register(\"completedJobs\", { valueAsNumber: true })} type=\"number\" min=\"0\" />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"activeJobs\">Active Jobs</Label>\n                          <Input {...form.register(\"activeJobs\", { valueAsNumber: true })} type=\"number\" min=\"0\" />\n                        </div>\n                      </div>\n                      <div className=\"flex justify-end gap-2\">\n                        <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                          Cancel\n                        </Button>\n                        <Button type=\"submit\">Create Engineer</Button>\n                      </div>\n                    </form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Engineers Display */}\n        {viewMode === \"card\" ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {currentEngineers.map((engineer) => (\n              <Card key={engineer.id} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                        <User className=\"w-5 h-5 text-blue-600\" />\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold\">{engineer.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{engineer.email}</p>\n                      </div>\n                    </div>\n                    {getStatusBadge(engineer.isActive)}\n                  </div>\n                  \n                  <div className=\"space-y-2 mb-4\">\n                    <div className=\"flex items-center text-sm text-muted-foreground\">\n                      <Phone className=\"w-4 h-4 mr-2\" />\n                      {engineer.phone}\n                    </div>\n                    <div className=\"flex items-center text-sm text-muted-foreground\">\n                      <MapPin className=\"w-4 h-4 mr-2\" />\n                      {engineer.location}\n                    </div>\n                    <div className=\"flex items-center text-sm text-muted-foreground\">\n                      <Settings className=\"w-4 h-4 mr-2\" />\n                      {engineer.specialization}\n                    </div>\n                  </div>\n\n                  <div className=\"mb-4\">\n                    {getRatingStars(engineer.rating)}\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4 mb-4 text-sm\">\n                    <div>\n                      <span className=\"text-muted-foreground\">Completed:</span>\n                      <span className=\"font-medium ml-1\">{engineer.completedJobs}</span>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Active:</span>\n                      <span className=\"font-medium ml-1\">{engineer.activeJobs}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex gap-2\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => {\n                        setSelectedEngineer(engineer);\n                        setIsViewDialogOpen(true);\n                      }}\n                    >\n                      <Eye className=\"w-4 h-4\" />\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => {\n                        setSelectedEngineer(engineer);\n                        editForm.reset(engineer);\n                        setIsEditDialogOpen(true);\n                      }}\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    <AlertDialog>\n                      <AlertDialogTrigger asChild>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </AlertDialogTrigger>\n                      <AlertDialogContent>\n                        <AlertDialogHeader>\n                          <AlertDialogTitle>Delete Engineer</AlertDialogTitle>\n                          <AlertDialogDescription>\n                            Are you sure you want to delete this engineer? This action cannot be undone.\n                          </AlertDialogDescription>\n                        </AlertDialogHeader>\n                        <AlertDialogFooter>\n                          <AlertDialogCancel>Cancel</AlertDialogCancel>\n                          <AlertDialogAction onClick={() => handleDeleteEngineer(engineer.id)}>\n                            Delete\n                          </AlertDialogAction>\n                        </AlertDialogFooter>\n                      </AlertDialogContent>\n                    </AlertDialog>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"p-0\">\n              <DataTable\n                data={currentEngineers}\n                columns={[\n                  { key: \"name\", label: \"Name\" },\n                  { key: \"email\", label: \"Email\" },\n                  { key: \"location\", label: \"Location\" },\n                  { key: \"specialization\", label: \"Specialization\" },\n                  { \n                    key: \"rating\", \n                    label: \"Rating\",\n                    render: (value) => getRatingStars(value)\n                  },\n                  { \n                    key: \"isActive\", \n                    label: \"Status\",\n                    render: (value) => getStatusBadge(value)\n                  },\n                  {\n                    key: \"actions\",\n                    label: \"Actions\",\n                    render: (_, engineer) => (\n                      <div className=\"flex gap-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => {\n                            setSelectedEngineer(engineer);\n                            setIsViewDialogOpen(true);\n                          }}\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => {\n                            setSelectedEngineer(engineer);\n                            editForm.reset(engineer);\n                            setIsEditDialogOpen(true);\n                          }}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button variant=\"outline\" size=\"sm\">\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete Engineer</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete this engineer? This action cannot be undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction onClick={() => handleDeleteEngineer(engineer.id)}>\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    )\n                  }\n                ]}\n              />\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Pagination */}\n        {totalPages > 1 && (\n          <div className=\"flex items-center justify-between\">\n            <p className=\"text-sm text-muted-foreground\">\n              Showing {(currentPage - 1) * itemsPerPage + 1} to {Math.min(currentPage * itemsPerPage, filteredEngineers.length)} of {filteredEngineers.length} engineers\n            </p>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setCurrentPage(currentPage - 1)}\n                disabled={currentPage === 1}\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n                Previous\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setCurrentPage(currentPage + 1)}\n                disabled={currentPage === totalPages}\n              >\n                Next\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Edit Engineer Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Engineer</DialogTitle>\n          </DialogHeader>\n          <div className=\"grid grid-cols-2 gap-4 py-4\">\n            <div>\n              <Label htmlFor=\"edit-name\">Name</Label>\n              <Input\n                id=\"edit-name\"\n                {...editForm.register(\"name\")}\n                defaultValue={selectedEngineer?.name}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"edit-email\">Email</Label>\n              <Input\n                id=\"edit-email\"\n                {...editForm.register(\"email\")}\n                type=\"email\"\n                defaultValue={selectedEngineer?.email}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"edit-phone\">Phone</Label>\n              <Input\n                id=\"edit-phone\"\n                {...editForm.register(\"phone\")}\n                defaultValue={selectedEngineer?.phone}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"edit-location\">Location</Label>\n              <Input\n                id=\"edit-location\"\n                {...editForm.register(\"location\")}\n                defaultValue={selectedEngineer?.location}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"edit-specialization\">Specialization</Label>\n              <Select \n                value={editForm.watch(\"specialization\")} \n                onValueChange={(value) => editForm.setValue(\"specialization\", value as any)}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select specialization\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Network\">Network</SelectItem>\n                  <SelectItem value=\"Hardware\">Hardware</SelectItem>\n                  <SelectItem value=\"Software\">Software</SelectItem>\n                  <SelectItem value=\"Installation\">Installation</SelectItem>\n                  <SelectItem value=\"Maintenance\">Maintenance</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"edit-rating\">Rating</Label>\n              <Input\n                id=\"edit-rating\"\n                {...editForm.register(\"rating\", { valueAsNumber: true })}\n                type=\"number\"\n                min=\"0\"\n                max=\"5\"\n                step=\"0.1\"\n                defaultValue={selectedEngineer?.rating}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"edit-completed\">Completed Jobs</Label>\n              <Input\n                id=\"edit-completed\"\n                {...editForm.register(\"completedJobs\", { valueAsNumber: true })}\n                type=\"number\"\n                min=\"0\"\n                defaultValue={selectedEngineer?.completedJobs}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"edit-active\">Active Jobs</Label>\n              <Input\n                id=\"edit-active\"\n                {...editForm.register(\"activeJobs\", { valueAsNumber: true })}\n                type=\"number\"\n                min=\"0\"\n                defaultValue={selectedEngineer?.activeJobs}\n              />\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <input\n              type=\"checkbox\"\n              id=\"edit-is-active\"\n              {...editForm.register(\"isActive\")}\n              defaultChecked={selectedEngineer?.isActive}\n              className=\"rounded border-gray-300\"\n            />\n            <Label htmlFor=\"edit-is-active\">Active Status</Label>\n          </div>\n          <div className=\"flex justify-end gap-2 mt-4\">\n            <Button variant=\"outline\" onClick={() => setIsEditDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button onClick={editForm.handleSubmit(handleEditEngineer)}>\n              Update Engineer\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* View Engineer Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Engineer Details</DialogTitle>\n          </DialogHeader>\n          {selectedEngineer && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center\">\n                  <User className=\"w-8 h-8\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-semibold\">{selectedEngineer.name}</h3>\n                  <p className=\"text-muted-foreground\">{selectedEngineer.email}</p>\n                  <div className=\"mt-2 flex items-center gap-2\">\n                    {getStatusBadge(selectedEngineer.isActive)}\n                    <Badge variant=\"outline\">\n                      {selectedEngineer.specialization}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium text-muted-foreground\">Contact Information</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <Phone className=\"w-4 h-4 text-muted-foreground\" />\n                      <span>{selectedEngineer.phone}</span>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <Mail className=\"w-4 h-4 text-muted-foreground\" />\n                      <span>{selectedEngineer.email}</span>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n                      <span>{selectedEngineer.location}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium text-muted-foreground\">Performance Metrics</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <Star className=\"w-4 h-4 text-yellow-500\" />\n                      <span>{getRatingStars(selectedEngineer.rating)}</span>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                      <span>{selectedEngineer.completedJobs} completed jobs</span>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <Activity className=\"w-4 h-4 text-blue-500\" />\n                      <span>{selectedEngineer.activeJobs} active jobs</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-muted-foreground\">Specialization</h4>\n                <p>{selectedEngineer.specialization}</p>\n              </div>\n\n              <div className=\"pt-4 border-t\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Created: {new Date(selectedEngineer.createdAt).toLocaleDateString()}\n                </p>\n              </div>\n            </div>\n          )}\n          <div className=\"flex justify-end\">\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </MainLayout>\n  );\n}","size_bytes":30409},"client/src/pages/installations-leads.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { format, parseISO, isAfter, isBefore, startOfDay, endOfDay } from \"date-fns\";\nimport {\n  HardHat,\n  Phone,\n  MessageCircle,\n  Mail,\n  Search,\n  Filter,\n  Download,\n  Eye,\n  CheckCircle,\n  XCircle,\n  Clock,\n  AlertCircle,\n  BarChart3,\n  Users,\n  TrendingUp,\n  CalendarIcon,\n  MapPin,\n  Building,\n  Target,\n  Star,\n  Zap,\n} from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { dummyNewInstallations, dummyLeads, type NewInstallation, type Lead } from \"@/lib/dummyData\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function InstallationsLeads() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [sourceFilter, setSourceFilter] = useState(\"all\");\n  const [dateFilter, setDateFilter] = useState<{ from?: Date; to?: Date }>({});\n  const [priorityFilter, setPriorityFilter] = useState(\"all\");\n  const [installations, setInstallations] = useState(dummyNewInstallations);\n  const [leads, setLeads] = useState(dummyLeads);\n  const [showNewInstallationForm, setShowNewInstallationForm] = useState(false);\n  const [showNewLeadForm, setShowNewLeadForm] = useState(false);\n\n  // Action handlers for installations\n  const updateInstallationStatus = (id: number, status: 'pending' | 'confirmed' | 'rejected') => {\n    setInstallations(prev => prev.map(installation => \n      installation.id === id \n        ? { ...installation, status, updatedAt: new Date().toISOString() }\n        : installation\n    ));\n  };\n\n  // Action handlers for leads\n  const updateLeadStatus = (id: number, status: 'new' | 'contacted' | 'qualified' | 'converted' | 'closed') => {\n    setLeads(prev => prev.map(lead => \n      lead.id === id \n        ? { ...lead, status, updatedAt: new Date().toISOString() }\n        : lead\n    ));\n  };\n\n  // Filter installations\n  const filteredInstallations = useMemo(() => {\n    return installations.filter((installation) => {\n      const matchesSearch = \n        installation.customerName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        installation.location.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        installation.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        installation.phone.includes(searchTerm);\n\n      const matchesStatus = statusFilter === \"all\" || installation.status === statusFilter;\n      const matchesPriority = priorityFilter === \"all\" || installation.priority === priorityFilter;\n      \n      let matchesDate = true;\n      if (dateFilter.from && dateFilter.to) {\n        const installationDate = parseISO(installation.createdAt);\n        const fromDate = startOfDay(dateFilter.from);\n        const toDate = endOfDay(dateFilter.to);\n        matchesDate = isAfter(installationDate, fromDate) && isBefore(installationDate, toDate);\n      }\n\n      return matchesSearch && matchesStatus && matchesPriority && matchesDate;\n    });\n  }, [searchTerm, statusFilter, priorityFilter, dateFilter]);\n\n  // Filter leads\n  const filteredLeads = useMemo(() => {\n    return leads.filter((lead) => {\n      const matchesSearch = \n        lead.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        lead.phone.includes(searchTerm) ||\n        (lead.email && lead.email.toLowerCase().includes(searchTerm.toLowerCase()));\n\n      const matchesStatus = statusFilter === \"all\" || lead.status === statusFilter;\n      const matchesSource = sourceFilter === \"all\" || lead.source === sourceFilter;\n      const matchesPriority = priorityFilter === \"all\" || lead.priority === priorityFilter;\n      \n      let matchesDate = true;\n      if (dateFilter.from && dateFilter.to) {\n        const leadDate = parseISO(lead.createdAt);\n        const fromDate = startOfDay(dateFilter.from);\n        const toDate = endOfDay(dateFilter.to);\n        matchesDate = isAfter(leadDate, fromDate) && isBefore(leadDate, toDate);\n      }\n\n      return matchesSearch && matchesStatus && matchesSource && matchesPriority && matchesDate;\n    });\n  }, [searchTerm, statusFilter, sourceFilter, priorityFilter, dateFilter]);\n\n  // Analytics calculations\n  const analytics = useMemo(() => {\n    // Installation analytics\n    const totalInstallations = dummyNewInstallations.length;\n    const pendingInstallations = dummyNewInstallations.filter(i => i.status === \"pending\").length;\n    const confirmedInstallations = dummyNewInstallations.filter(i => i.status === \"confirmed\").length;\n    const rejectedInstallations = dummyNewInstallations.filter(i => i.status === \"rejected\").length;\n\n    // Lead analytics\n    const totalLeads = dummyLeads.length;\n    const newLeads = dummyLeads.filter(l => l.status === \"new\").length;\n    const contactedLeads = dummyLeads.filter(l => l.isContactedByManager).length;\n    const convertedLeads = dummyLeads.filter(l => l.status === \"converted\").length;\n\n    const conversionRate = totalLeads > 0 ? (convertedLeads / totalLeads * 100).toFixed(1) : '0';\n    const contactRate = totalLeads > 0 ? (contactedLeads / totalLeads * 100).toFixed(1) : '0';\n    const installationSuccessRate = totalInstallations > 0 ? (confirmedInstallations / totalInstallations * 100).toFixed(1) : '0';\n\n    return {\n      totalInstallations,\n      pendingInstallations,\n      confirmedInstallations,\n      rejectedInstallations,\n      totalLeads,\n      newLeads,\n      contactedLeads,\n      convertedLeads,\n      conversionRate,\n      contactRate,\n      installationSuccessRate\n    };\n  }, []);\n\n  const exportInstallationsToExcel = () => {\n    const headers = [\"ID\", \"Customer Name\", \"Email\", \"Phone\", \"Location\", \"Preferred Plan\", \"Request Type\", \"Status\", \"Priority\", \"Estimated Cost\", \"Created Date\"];\n    const csvContent = [\n      headers.join(\",\"),\n      ...filteredInstallations.map(installation => [\n        installation.id,\n        `\"${installation.customerName}\"`,\n        installation.email,\n        installation.phone,\n        `\"${installation.location}\"`,\n        installation.preferredPlan || \"N/A\",\n        installation.requestType,\n        installation.status,\n        installation.priority,\n        installation.estimatedCost || \"N/A\",\n        installation.createdAt\n      ].join(\",\"))\n    ].join(\"\\n\");\n\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `installations_${format(new Date(), \"yyyy-MM-dd\")}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  const exportLeadsToExcel = () => {\n    const headers = [\"ID\", \"Name\", \"Phone\", \"Email\", \"Address\", \"Location\", \"Source\", \"Status\", \"Priority\", \"Inquiry Type\", \"Contacted by Manager\", \"Created Date\"];\n    const csvContent = [\n      headers.join(\",\"),\n      ...filteredLeads.map(lead => [\n        lead.id,\n        `\"${lead.name}\"`,\n        lead.phone,\n        lead.email || \"N/A\",\n        `\"${lead.address}\"`,\n        lead.location || \"N/A\",\n        lead.source,\n        lead.status,\n        lead.priority,\n        lead.inquiryType,\n        lead.isContactedByManager ? \"Yes\" : \"No\",\n        lead.createdAt\n      ].join(\",\"))\n    ].join(\"\\n\");\n\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `leads_${format(new Date(), \"yyyy-MM-dd\")}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  const getStatusBadge = (status: string, type: \"installation\" | \"lead\") => {\n    if (type === \"installation\") {\n      switch (status) {\n        case \"pending\":\n          return <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\"><Clock className=\"h-3 w-3 mr-1\" />Pending</Badge>;\n        case \"confirmed\":\n          return <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\"><CheckCircle className=\"h-3 w-3 mr-1\" />Confirmed</Badge>;\n        case \"rejected\":\n          return <Badge variant=\"destructive\"><XCircle className=\"h-3 w-3 mr-1\" />Rejected</Badge>;\n        default:\n          return <Badge variant=\"outline\">{status}</Badge>;\n      }\n    } else {\n      const colors = {\n        new: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',\n        contacted: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',\n        qualified: 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200',\n        converted: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',\n        closed: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n      };\n      return <Badge className={colors[status as keyof typeof colors] || 'bg-gray-100 text-gray-800'}>{status}</Badge>;\n    }\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    switch (priority) {\n      case \"urgent\":\n        return <Badge variant=\"destructive\">Urgent</Badge>;\n      case \"high\":\n        return <Badge variant=\"secondary\" className=\"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\">High</Badge>;\n      case \"medium\":\n        return <Badge variant=\"outline\">Medium</Badge>;\n      case \"low\":\n        return <Badge variant=\"secondary\" className=\"bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-300\">Low</Badge>;\n      default:\n        return <Badge variant=\"outline\">{priority}</Badge>;\n    }\n  };\n\n  const getSourceIcon = (source: string) => {\n    switch (source) {\n      case 'ivr': return <Phone className=\"h-4 w-4\" />;\n      case 'whatsapp': return <MessageCircle className=\"h-4 w-4\" />;\n      case 'website': return <Mail className=\"h-4 w-4\" />;\n      case 'referral': return <Users className=\"h-4 w-4\" />;\n      case 'social_media': return <Target className=\"h-4 w-4\" />;\n      default: return <Phone className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <MainLayout title=\"New Installation & Leads\">\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">New Installation & Leads</h1>\n            <p className=\"text-gray-600 dark:text-gray-400 mt-1\">Manage installation requests and customer inquiries</p>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"analytics\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\n            <TabsTrigger value=\"analytics\" className=\"flex items-center gap-2\">\n              <BarChart3 className=\"h-4 w-4\" />\n              Analytics\n            </TabsTrigger>\n            <TabsTrigger value=\"installations\" className=\"flex items-center gap-2\">\n              <HardHat className=\"h-4 w-4\" />\n              New Installations\n            </TabsTrigger>\n            <TabsTrigger value=\"leads\" className=\"flex items-center gap-2\">\n              <Phone className=\"h-4 w-4\" />\n              Leads\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Installations</CardTitle>\n                  <HardHat className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{analytics.totalInstallations}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {analytics.installationSuccessRate}% success rate\n                  </p>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Pending Installations</CardTitle>\n                  <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{analytics.pendingInstallations}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Awaiting confirmation\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Leads</CardTitle>\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{analytics.totalLeads}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {analytics.conversionRate}% conversion rate\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Manager Contact Rate</CardTitle>\n                  <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{analytics.contactRate}%</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {analytics.contactedLeads} leads contacted\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Installation Status Distribution</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">Pending</span>\n                      <span className=\"text-sm font-medium\">{analytics.pendingInstallations}</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div className=\"bg-yellow-600 h-2 rounded-full\" style={{ width: `${(analytics.pendingInstallations / analytics.totalInstallations) * 100}%` }}></div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">Confirmed</span>\n                      <span className=\"text-sm font-medium\">{analytics.confirmedInstallations}</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div className=\"bg-green-600 h-2 rounded-full\" style={{ width: `${(analytics.confirmedInstallations / analytics.totalInstallations) * 100}%` }}></div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">Rejected</span>\n                      <span className=\"text-sm font-medium\">{analytics.rejectedInstallations}</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div className=\"bg-red-600 h-2 rounded-full\" style={{ width: `${(analytics.rejectedInstallations / analytics.totalInstallations) * 100}%` }}></div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Lead Status Distribution</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">New Leads</span>\n                      <span className=\"text-sm font-medium\">{analytics.newLeads}</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div className=\"bg-blue-600 h-2 rounded-full\" style={{ width: `${(analytics.newLeads / analytics.totalLeads) * 100}%` }}></div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">Contacted</span>\n                      <span className=\"text-sm font-medium\">{analytics.contactedLeads}</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div className=\"bg-yellow-600 h-2 rounded-full\" style={{ width: `${(analytics.contactedLeads / analytics.totalLeads) * 100}%` }}></div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">Converted</span>\n                      <span className=\"text-sm font-medium\">{analytics.convertedLeads}</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div className=\"bg-green-600 h-2 rounded-full\" style={{ width: `${(analytics.convertedLeads / analytics.totalLeads) * 100}%` }}></div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"installations\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <CardTitle>New Installation Requests</CardTitle>\n                    <CardDescription>Manage customer installation applications</CardDescription>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                          <HardHat className=\"mr-2 h-4 w-4\" />\n                          New Installation\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                        <DialogHeader>\n                          <DialogTitle>New Installation Request</DialogTitle>\n                          <DialogDescription>\n                            Fill in customer details and upload required documents\n                          </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <Label>Customer Name</Label>\n                            <Input placeholder=\"Enter full name\" />\n                          </div>\n                          <div>\n                            <Label>Email</Label>\n                            <Input type=\"email\" placeholder=\"customer@email.com\" />\n                          </div>\n                          <div>\n                            <Label>Phone Number (with country code)</Label>\n                            <Input placeholder=\"+91 98765 43210\" />\n                          </div>\n                          <div>\n                            <Label>Alternate Phone Number</Label>\n                            <Input placeholder=\"+91 98765 43211\" />\n                          </div>\n                          <div className=\"col-span-2\">\n                            <Label>Address</Label>\n                            <Input placeholder=\"Complete address with area and city\" />\n                          </div>\n                          <div>\n                            <Label>Aadhar Card - Front Side</Label>\n                            <Input type=\"file\" accept=\"image/*\" />\n                          </div>\n                          <div>\n                            <Label>Aadhar Card - Back Side</Label>\n                            <Input type=\"file\" accept=\"image/*\" />\n                          </div>\n                          <div className=\"col-span-2\">\n                            <Label>Passport Size Photo</Label>\n                            <Input type=\"file\" accept=\"image/*\" />\n                          </div>\n                          <div>\n                            <Label>Request Type</Label>\n                            <Select>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select type\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"residential\">Residential</SelectItem>\n                                <SelectItem value=\"commercial\">Commercial</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <Label>Priority</Label>\n                            <Select>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select priority\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"low\">Low</SelectItem>\n                                <SelectItem value=\"medium\">Medium</SelectItem>\n                                <SelectItem value=\"high\">High</SelectItem>\n                                <SelectItem value=\"urgent\">Urgent</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </div>\n                        <div className=\"flex justify-end gap-2 pt-4\">\n                          <Button variant=\"outline\">Cancel</Button>\n                          <Button className=\"bg-blue-600 hover:bg-blue-700\">Submit Request</Button>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                    <Button onClick={exportInstallationsToExcel} className=\"bg-green-600 hover:bg-green-700\">\n                      <Download className=\"mr-2 h-4 w-4\" />\n                      Export Excel\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex flex-col sm:flex-row gap-4\">\n                  <div className=\"flex-1\">\n                    <Input\n                      placeholder=\"Search installations...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"max-w-sm\"\n                    />\n                  </div>\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-[180px]\">\n                      <SelectValue placeholder=\"Filter by status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                      <SelectItem value=\"rejected\">Rejected</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Select value={priorityFilter} onValueChange={setPriorityFilter}>\n                    <SelectTrigger className=\"w-[180px]\">\n                      <SelectValue placeholder=\"Filter by priority\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Priority</SelectItem>\n                      <SelectItem value=\"urgent\">Urgent</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"rounded-md border\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Customer</TableHead>\n                        <TableHead>Contact</TableHead>\n                        <TableHead>Location</TableHead>\n                        <TableHead>Type</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Priority</TableHead>\n                        <TableHead>Created</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredInstallations.map((installation) => (\n                        <TableRow key={installation.id}>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">{installation.customerName}</div>\n                              <div className=\"text-sm text-gray-500\">{installation.email}</div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"text-sm\">{installation.phone}</div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center\">\n                              <MapPin className=\"h-4 w-4 mr-1 text-gray-500\" />\n                              {installation.location}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={installation.requestType === 'commercial' ? 'default' : 'secondary'}>\n                              {installation.requestType}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            {getStatusBadge(installation.status, \"installation\")}\n                          </TableCell>\n                          <TableCell>\n                            {getPriorityBadge(installation.priority)}\n                          </TableCell>\n                          <TableCell>\n                            {format(parseISO(installation.createdAt), \"MMM dd, yyyy\")}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex gap-2\">\n                              <Dialog>\n                                <DialogTrigger asChild>\n                                  <Button variant=\"outline\" size=\"sm\">\n                                    <Eye className=\"h-4 w-4\" />\n                                  </Button>\n                                </DialogTrigger>\n                                <DialogContent className=\"max-w-3xl\">\n                                  <DialogHeader>\n                                    <DialogTitle>Installation Details - {installation.customerName}</DialogTitle>\n                                    <DialogDescription>\n                                      View installation request details and update status\n                                    </DialogDescription>\n                                  </DialogHeader>\n                                  <div className=\"grid grid-cols-2 gap-4\">\n                                    <div>\n                                      <Label>Customer Name</Label>\n                                      <p className=\"text-sm\">{installation.customerName}</p>\n                                    </div>\n                                    <div>\n                                      <Label>Email</Label>\n                                      <p className=\"text-sm\">{installation.email}</p>\n                                    </div>\n                                    <div>\n                                      <Label>Phone</Label>\n                                      <p className=\"text-sm\">{installation.phone}</p>\n                                    </div>\n                                    <div>\n                                      <Label>Alternate Phone</Label>\n                                      <p className=\"text-sm\">{installation.alternatePhone || \"Not provided\"}</p>\n                                    </div>\n                                    <div className=\"col-span-2\">\n                                      <Label>Address</Label>\n                                      <p className=\"text-sm\">{installation.address}</p>\n                                    </div>\n                                    <div>\n                                      <Label>Request Type</Label>\n                                      <p className=\"text-sm capitalize\">{installation.requestType}</p>\n                                    </div>\n                                    <div>\n                                      <Label>Current Status</Label>\n                                      <div className=\"text-sm\">{getStatusBadge(installation.status, \"installation\")}</div>\n                                    </div>\n                                    {installation.aadharFront && (\n                                      <div>\n                                        <Label>Aadhar Front</Label>\n                                        <p className=\"text-sm text-blue-600\">Document uploaded</p>\n                                      </div>\n                                    )}\n                                    {installation.aadharBack && (\n                                      <div>\n                                        <Label>Aadhar Back</Label>\n                                        <p className=\"text-sm text-blue-600\">Document uploaded</p>\n                                      </div>\n                                    )}\n                                    {installation.passportPhoto && (\n                                      <div>\n                                        <Label>Passport Photo</Label>\n                                        <p className=\"text-sm text-blue-600\">Photo uploaded</p>\n                                      </div>\n                                    )}\n                                  </div>\n                                  <div className=\"flex gap-2 pt-4\">\n                                    <Button \n                                      onClick={() => updateInstallationStatus(installation.id, 'confirmed')}\n                                      variant={installation.status === 'confirmed' ? 'default' : 'outline'}\n                                      className=\"bg-green-600 hover:bg-green-700 text-white\"\n                                    >\n                                      <CheckCircle className=\"h-4 w-4 mr-2\" />\n                                      Confirm\n                                    </Button>\n                                    <Button \n                                      onClick={() => updateInstallationStatus(installation.id, 'rejected')}\n                                      variant={installation.status === 'rejected' ? 'destructive' : 'outline'}\n                                      className=\"bg-red-600 hover:bg-red-700 text-white\"\n                                    >\n                                      <XCircle className=\"h-4 w-4 mr-2\" />\n                                      Reject\n                                    </Button>\n                                    <Button \n                                      onClick={() => updateInstallationStatus(installation.id, 'pending')}\n                                      variant={installation.status === 'pending' ? 'default' : 'outline'}\n                                    >\n                                      <Clock className=\"h-4 w-4 mr-2\" />\n                                      Set Pending\n                                    </Button>\n                                  </div>\n                                </DialogContent>\n                              </Dialog>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"leads\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <CardTitle>Lead Management</CardTitle>\n                    <CardDescription>Track customer inquiries from various sources</CardDescription>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button className=\"bg-purple-600 hover:bg-purple-700\">\n                          <Users className=\"mr-2 h-4 w-4\" />\n                          New Lead\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-2xl\">\n                        <DialogHeader>\n                          <DialogTitle>Add New Lead</DialogTitle>\n                          <DialogDescription>\n                            Register a new customer inquiry\n                          </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <Label>Full Name</Label>\n                            <Input placeholder=\"Enter customer name\" />\n                          </div>\n                          <div>\n                            <Label>Phone Number</Label>\n                            <Input placeholder=\"+91 98765 43210\" />\n                          </div>\n                          <div>\n                            <Label>Email (Optional)</Label>\n                            <Input type=\"email\" placeholder=\"customer@email.com\" />\n                          </div>\n                          <div>\n                            <Label>Source</Label>\n                            <Select>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select source\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"website\">Website</SelectItem>\n                                <SelectItem value=\"ivr\">IVR Call</SelectItem>\n                                <SelectItem value=\"whatsapp\">WhatsApp</SelectItem>\n                                <SelectItem value=\"referral\">Referral</SelectItem>\n                                <SelectItem value=\"social_media\">Social Media</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div className=\"col-span-2\">\n                            <Label>Address</Label>\n                            <Input placeholder=\"Complete address\" />\n                          </div>\n                          <div>\n                            <Label>Inquiry Type</Label>\n                            <Select>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select type\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"general\">General</SelectItem>\n                                <SelectItem value=\"pricing\">Pricing</SelectItem>\n                                <SelectItem value=\"technical\">Technical</SelectItem>\n                                <SelectItem value=\"support\">Support</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <Label>Priority</Label>\n                            <Select>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select priority\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"low\">Low</SelectItem>\n                                <SelectItem value=\"medium\">Medium</SelectItem>\n                                <SelectItem value=\"high\">High</SelectItem>\n                                <SelectItem value=\"urgent\">Urgent</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div className=\"col-span-2\">\n                            <Label>Message (Optional)</Label>\n                            <Input placeholder=\"Customer inquiry or message\" />\n                          </div>\n                        </div>\n                        <div className=\"flex justify-end gap-2 pt-4\">\n                          <Button variant=\"outline\">Cancel</Button>\n                          <Button className=\"bg-purple-600 hover:bg-purple-700\">Add Lead</Button>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                    <Button onClick={exportLeadsToExcel} className=\"bg-green-600 hover:bg-green-700\">\n                      <Download className=\"mr-2 h-4 w-4\" />\n                      Export Excel\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex flex-col sm:flex-row gap-4\">\n                  <div className=\"flex-1\">\n                    <Input\n                      placeholder=\"Search leads...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"max-w-sm\"\n                    />\n                  </div>\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-[180px]\">\n                      <SelectValue placeholder=\"Filter by status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"new\">New</SelectItem>\n                      <SelectItem value=\"contacted\">Contacted</SelectItem>\n                      <SelectItem value=\"qualified\">Qualified</SelectItem>\n                      <SelectItem value=\"converted\">Converted</SelectItem>\n                      <SelectItem value=\"closed\">Closed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Select value={sourceFilter} onValueChange={setSourceFilter}>\n                    <SelectTrigger className=\"w-[180px]\">\n                      <SelectValue placeholder=\"Filter by source\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Sources</SelectItem>\n                      <SelectItem value=\"ivr\">IVR Call</SelectItem>\n                      <SelectItem value=\"whatsapp\">WhatsApp</SelectItem>\n                      <SelectItem value=\"website\">Website</SelectItem>\n                      <SelectItem value=\"referral\">Referral</SelectItem>\n                      <SelectItem value=\"social_media\">Social Media</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"rounded-md border\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Lead</TableHead>\n                        <TableHead>Contact</TableHead>\n                        <TableHead>Source</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Priority</TableHead>\n                        <TableHead>Manager Contact</TableHead>\n                        <TableHead>Address</TableHead>\n                        <TableHead>Created</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredLeads.map((lead) => (\n                        <TableRow key={lead.id}>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">{lead.name}</div>\n                              <div className=\"text-sm text-gray-500\">{lead.inquiryType}</div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div>\n                              <div className=\"text-sm\">{lead.phone}</div>\n                              <div className=\"text-sm text-gray-500\">{lead.email || \"No email\"}</div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center\">\n                              {getSourceIcon(lead.source)}\n                              <span className=\"ml-2 capitalize\">{lead.source.replace('_', ' ')}</span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            {getStatusBadge(lead.status, \"lead\")}\n                          </TableCell>\n                          <TableCell>\n                            {getPriorityBadge(lead.priority)}\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={lead.isContactedByManager ? \"default\" : \"secondary\"}>\n                              {lead.isContactedByManager ? \"Yes\" : \"No\"}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"text-sm text-gray-600\">\n                              {lead.address}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            {format(parseISO(lead.createdAt), \"MMM dd, yyyy\")}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex gap-2\">\n                              <Dialog>\n                                <DialogTrigger asChild>\n                                  <Button variant=\"outline\" size=\"sm\">\n                                    <Eye className=\"h-4 w-4\" />\n                                  </Button>\n                                </DialogTrigger>\n                                <DialogContent className=\"max-w-2xl\">\n                                  <DialogHeader>\n                                    <DialogTitle>Lead Details - {lead.name}</DialogTitle>\n                                    <DialogDescription>\n                                      View and manage lead information\n                                    </DialogDescription>\n                                  </DialogHeader>\n                                  <div className=\"grid grid-cols-2 gap-4\">\n                                    <div>\n                                      <Label>Name</Label>\n                                      <p className=\"text-sm\">{lead.name}</p>\n                                    </div>\n                                    <div>\n                                      <Label>Phone</Label>\n                                      <p className=\"text-sm\">{lead.phone}</p>\n                                    </div>\n                                    <div>\n                                      <Label>Email</Label>\n                                      <p className=\"text-sm\">{lead.email || \"Not provided\"}</p>\n                                    </div>\n                                    <div>\n                                      <Label>Address</Label>\n                                      <p className=\"text-sm\">{lead.address}</p>\n                                    </div>\n                                    <div>\n                                      <Label>Source</Label>\n                                      <p className=\"text-sm capitalize\">{lead.source.replace('_', ' ')}</p>\n                                    </div>\n                                    <div>\n                                      <Label>Status</Label>\n                                      <p className=\"text-sm\">{lead.status}</p>\n                                    </div>\n                                    <div className=\"col-span-2\">\n                                      <Label>Message</Label>\n                                      <p className=\"text-sm\">{lead.message || \"No message provided\"}</p>\n                                    </div>\n                                  </div>\n                                  <div className=\"flex gap-2 pt-4\">\n                                    <Button \n                                      onClick={() => updateLeadStatus(lead.id, 'contacted')}\n                                      variant={lead.status === 'contacted' ? 'default' : 'outline'}\n                                      className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                                    >\n                                      <Phone className=\"h-4 w-4 mr-2\" />\n                                      Mark Contacted\n                                    </Button>\n                                    <Button \n                                      onClick={() => updateLeadStatus(lead.id, 'qualified')}\n                                      variant={lead.status === 'qualified' ? 'default' : 'outline'}\n                                      className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n                                    >\n                                      <CheckCircle className=\"h-4 w-4 mr-2\" />\n                                      Mark Qualified\n                                    </Button>\n                                    <Button \n                                      onClick={() => updateLeadStatus(lead.id, 'converted')}\n                                      variant={lead.status === 'converted' ? 'default' : 'outline'}\n                                      className=\"bg-green-600 hover:bg-green-700 text-white\"\n                                    >\n                                      <Star className=\"h-4 w-4 mr-2\" />\n                                      Convert\n                                    </Button>\n                                  </div>\n                                </DialogContent>\n                              </Dialog>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":48696},"client/src/pages/installations.tsx":{"content":"import { useState } from \"react\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { format } from \"date-fns\";\nimport {\n  HardHat,\n  Plus,\n  Search,\n  Filter,\n  Download,\n  Eye,\n  Edit,\n  CheckCircle,\n  XCircle,\n  Clock,\n  AlertCircle,\n  BarChart3,\n  Users,\n  TrendingUp,\n  CalendarIcon,\n  MapPin,\n  Phone,\n  Mail,\n  Building,\n  Home,\n} from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { dummyNewInstallations, dummyEngineers, type NewInstallation } from \"@/lib/dummyData\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function Installations() {\n  const [installations] = useState<NewInstallation[]>(dummyNewInstallations);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [priorityFilter, setPriorityFilter] = useState(\"all\");\n  const [dateFilter, setDateFilter] = useState<Date | undefined>();\n  const [selectedInstallation, setSelectedInstallation] = useState<NewInstallation | null>(null);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n\n  // Filter installations based on search and filters\n  const filteredInstallations = installations.filter((installation) => {\n    const matchesSearch = \n      installation.customerName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      installation.location.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      installation.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      installation.phone.includes(searchTerm);\n\n    const matchesStatus = statusFilter === \"all\" || installation.status === statusFilter;\n    const matchesPriority = priorityFilter === \"all\" || installation.priority === priorityFilter;\n    \n    let matchesDate = true;\n    if (dateFilter) {\n      const installationDate = new Date(installation.createdAt);\n      const filterDate = new Date(dateFilter);\n      matchesDate = installationDate.toDateString() === filterDate.toDateString();\n    }\n\n    return matchesSearch && matchesStatus && matchesPriority && matchesDate;\n  });\n\n  // Calculate analytics\n  const totalInstallations = installations.length;\n  const pendingInstallations = installations.filter(i => i.status === \"pending\").length;\n  const confirmedInstallations = installations.filter(i => i.status === \"confirmed\").length;\n  const rejectedInstallations = installations.filter(i => i.status === \"rejected\").length;\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\"><Clock className=\"h-3 w-3 mr-1\" />Pending</Badge>;\n      case \"confirmed\":\n        return <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\"><CheckCircle className=\"h-3 w-3 mr-1\" />Confirmed</Badge>;\n      case \"rejected\":\n        return <Badge variant=\"destructive\"><XCircle className=\"h-3 w-3 mr-1\" />Rejected</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    switch (priority) {\n      case \"urgent\":\n        return <Badge variant=\"destructive\">Urgent</Badge>;\n      case \"high\":\n        return <Badge variant=\"secondary\" className=\"bg-orange-100 text-orange-800\">High</Badge>;\n      case \"medium\":\n        return <Badge variant=\"outline\">Medium</Badge>;\n      case \"low\":\n        return <Badge variant=\"secondary\" className=\"bg-gray-100 text-gray-600\">Low</Badge>;\n      default:\n        return <Badge variant=\"outline\">{priority}</Badge>;\n    }\n  };\n\n  const exportToExcel = () => {\n    // Create CSV content\n    const headers = [\"ID\", \"Customer Name\", \"Email\", \"Phone\", \"Location\", \"Preferred Plan\", \"Request Type\", \"Status\", \"Priority\", \"Estimated Cost\", \"Created Date\"];\n    const csvContent = [\n      headers.join(\",\"),\n      ...filteredInstallations.map(installation => [\n        installation.id,\n        `\"${installation.customerName}\"`,\n        installation.email,\n        installation.phone,\n        `\"${installation.location}\"`,\n        installation.preferredPlan || \"N/A\",\n        installation.requestType,\n        installation.status,\n        installation.priority,\n        installation.estimatedCost || \"N/A\",\n        new Date(installation.createdAt).toLocaleDateString()\n      ].join(\",\"))\n    ].join(\"\\n\");\n\n    // Download CSV file\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\n    const link = document.createElement(\"a\");\n    const url = URL.createObjectURL(blob);\n    link.setAttribute(\"href\", url);\n    link.setAttribute(\"download\", `installations_${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = \"hidden\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <MainLayout title=\"New Installation Management\">\n      <div className=\"flex-1 space-y-6 p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-3xl font-bold tracking-tight flex items-center gap-2\">\n              <HardHat className=\"h-8 w-8 text-primary\" />\n              New Installation Management\n            </h2>\n            <p className=\"text-muted-foreground\">\n              Manage installation requests and track progress\n            </p>\n          </div>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                New Installation Request\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create Installation Request</DialogTitle>\n                <DialogDescription>\n                  Add a new installation request to the system\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"grid gap-4 py-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"customerName\">Customer Name</Label>\n                    <Input id=\"customerName\" placeholder=\"Enter customer name\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input id=\"email\" type=\"email\" placeholder=\"customer@email.com\" />\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Phone</Label>\n                    <Input id=\"phone\" placeholder=\"+91 98765 43210\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"location\">Location</Label>\n                    <Input id=\"location\" placeholder=\"City/Area\" />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">Address</Label>\n                  <Textarea id=\"address\" placeholder=\"Full address\" />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"requestType\">Request Type</Label>\n                    <Select>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"residential\">Residential</SelectItem>\n                        <SelectItem value=\"commercial\">Commercial</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"priority\">Priority</Label>\n                    <Select>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select priority\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Low</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"high\">High</SelectItem>\n                        <SelectItem value=\"urgent\">Urgent</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"notes\">Notes</Label>\n                  <Textarea id=\"notes\" placeholder=\"Additional notes or requirements\" />\n                </div>\n              </div>\n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button onClick={() => setIsCreateDialogOpen(false)}>\n                  Create Request\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n          <TabsList>\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"installations\">Installations</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-4\">\n            {/* Analytics Cards */}\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Requests</CardTitle>\n                  <HardHat className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{totalInstallations}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    All installation requests\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n                  <Clock className=\"h-4 w-4 text-yellow-600\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{pendingInstallations}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Awaiting confirmation\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Confirmed</CardTitle>\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{confirmedInstallations}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Ready for installation\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Rejected</CardTitle>\n                  <XCircle className=\"h-4 w-4 text-red-600\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{rejectedInstallations}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Unable to proceed\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Installations */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Installation Requests</CardTitle>\n                <CardDescription>Latest installation requests requiring attention</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {installations.slice(0, 5).map((installation) => (\n                    <div key={installation.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className={cn(\n                          \"h-10 w-10 rounded-full flex items-center justify-center\",\n                          installation.requestType === \"residential\" ? \"bg-blue-100 text-blue-600\" : \"bg-purple-100 text-purple-600\"\n                        )}>\n                          {installation.requestType === \"residential\" ? <Home className=\"h-5 w-5\" /> : <Building className=\"h-5 w-5\" />}\n                        </div>\n                        <div>\n                          <p className=\"font-medium\">{installation.customerName}</p>\n                          <p className=\"text-sm text-muted-foreground\">{installation.location}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        {getStatusBadge(installation.status)}\n                        {getPriorityBadge(installation.priority)}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"installations\" className=\"space-y-4\">\n            {/* Filters */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Filter Installations</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-wrap gap-4\">\n                  <div className=\"flex-1 min-w-[200px]\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        placeholder=\"Search by name, location, email, or phone...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-8\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-[140px]\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                      <SelectItem value=\"rejected\">Rejected</SelectItem>\n                    </SelectContent>\n                  </Select>\n\n                  <Select value={priorityFilter} onValueChange={setPriorityFilter}>\n                    <SelectTrigger className=\"w-[140px]\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Priority</SelectItem>\n                      <SelectItem value=\"urgent\">Urgent</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                    </SelectContent>\n                  </Select>\n\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <Button variant=\"outline\" className={cn(\"w-[200px] justify-start text-left font-normal\", !dateFilter && \"text-muted-foreground\")}>\n                        <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                        {dateFilter ? format(dateFilter, \"PPP\") : \"Filter by date\"}\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                      <Calendar\n                        mode=\"single\"\n                        selected={dateFilter}\n                        onSelect={setDateFilter}\n                        initialFocus\n                      />\n                    </PopoverContent>\n                  </Popover>\n\n                  <Button onClick={exportToExcel} variant=\"outline\">\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Export Excel\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Installations Table */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Installation Requests ({filteredInstallations.length})</CardTitle>\n                <CardDescription>\n                  Manage and track all installation requests\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Customer</TableHead>\n                      <TableHead>Contact</TableHead>\n                      <TableHead>Location</TableHead>\n                      <TableHead>Plan</TableHead>\n                      <TableHead>Type</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Priority</TableHead>\n                      <TableHead>Cost</TableHead>\n                      <TableHead>Date</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredInstallations.map((installation) => (\n                      <TableRow key={installation.id}>\n                        <TableCell>\n                          <div>\n                            <p className=\"font-medium\">{installation.customerName}</p>\n                            <p className=\"text-sm text-muted-foreground\">{installation.email}</p>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                            <span className=\"text-sm\">{installation.phone}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                            <span className=\"text-sm\">{installation.location}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-sm\">{installation.preferredPlan || \"Not specified\"}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\" className={installation.requestType === \"residential\" ? \"bg-blue-50 text-blue-700\" : \"bg-purple-50 text-purple-700\"}>\n                            {installation.requestType}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>{getStatusBadge(installation.status)}</TableCell>\n                        <TableCell>{getPriorityBadge(installation.priority)}</TableCell>\n                        <TableCell className=\"text-sm\">\n                          {installation.estimatedCost ? `₹${installation.estimatedCost.toLocaleString()}` : \"TBD\"}\n                        </TableCell>\n                        <TableCell className=\"text-sm\">\n                          {new Date(installation.createdAt).toLocaleDateString()}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => setSelectedInstallation(installation)}\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"space-y-4\">\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Status Distribution</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Pending</span>\n                    <span className=\"text-sm font-medium\">{pendingInstallations} ({Math.round((pendingInstallations / totalInstallations) * 100)}%)</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div className=\"bg-yellow-500 h-2 rounded-full\" style={{ width: `${(pendingInstallations / totalInstallations) * 100}%` }}></div>\n                  </div>\n                  \n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Confirmed</span>\n                    <span className=\"text-sm font-medium\">{confirmedInstallations} ({Math.round((confirmedInstallations / totalInstallations) * 100)}%)</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div className=\"bg-green-500 h-2 rounded-full\" style={{ width: `${(confirmedInstallations / totalInstallations) * 100}%` }}></div>\n                  </div>\n                  \n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Rejected</span>\n                    <span className=\"text-sm font-medium\">{rejectedInstallations} ({Math.round((rejectedInstallations / totalInstallations) * 100)}%)</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div className=\"bg-red-500 h-2 rounded-full\" style={{ width: `${(rejectedInstallations / totalInstallations) * 100}%` }}></div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Request Type</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Home className=\"h-4 w-4 text-blue-600\" />\n                        <span className=\"text-sm\">Residential</span>\n                      </div>\n                      <span className=\"text-sm font-medium\">\n                        {installations.filter(i => i.requestType === \"residential\").length}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Building className=\"h-4 w-4 text-purple-600\" />\n                        <span className=\"text-sm\">Commercial</span>\n                      </div>\n                      <span className=\"text-sm font-medium\">\n                        {installations.filter(i => i.requestType === \"commercial\").length}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Priority Distribution</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  {[\"urgent\", \"high\", \"medium\", \"low\"].map(priority => {\n                    const count = installations.filter(i => i.priority === priority).length;\n                    const percentage = Math.round((count / totalInstallations) * 100);\n                    return (\n                      <div key={priority} className=\"flex justify-between items-center\">\n                        <span className=\"text-sm capitalize\">{priority}</span>\n                        <span className=\"text-sm font-medium\">{count} ({percentage}%)</span>\n                      </div>\n                    );\n                  })}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        {/* Installation Detail Dialog */}\n        {selectedInstallation && (\n          <Dialog open={!!selectedInstallation} onOpenChange={() => setSelectedInstallation(null)}>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Installation Request Details</DialogTitle>\n                <DialogDescription>\n                  Complete information for installation ID #{selectedInstallation.id}\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"grid gap-4 py-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Customer Name</Label>\n                    <p className=\"text-sm\">{selectedInstallation.customerName}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium\">Email</Label>\n                    <p className=\"text-sm\">{selectedInstallation.email}</p>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Phone</Label>\n                    <p className=\"text-sm\">{selectedInstallation.phone}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium\">Location</Label>\n                    <p className=\"text-sm\">{selectedInstallation.location}</p>\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Address</Label>\n                  <p className=\"text-sm\">{selectedInstallation.address}</p>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Request Type</Label>\n                    <Badge variant=\"outline\" className=\"mt-1\">\n                      {selectedInstallation.requestType}\n                    </Badge>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium\">Preferred Plan</Label>\n                    <p className=\"text-sm\">{selectedInstallation.preferredPlan || \"Not specified\"}</p>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Status</Label>\n                    <div className=\"mt-1\">{getStatusBadge(selectedInstallation.status)}</div>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium\">Priority</Label>\n                    <div className=\"mt-1\">{getPriorityBadge(selectedInstallation.priority)}</div>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium\">Estimated Cost</Label>\n                    <p className=\"text-sm\">{selectedInstallation.estimatedCost ? `₹${selectedInstallation.estimatedCost.toLocaleString()}` : \"TBD\"}</p>\n                  </div>\n                </div>\n                {selectedInstallation.notes && (\n                  <div>\n                    <Label className=\"text-sm font-medium\">Notes</Label>\n                    <p className=\"text-sm bg-gray-50 p-2 rounded\">{selectedInstallation.notes}</p>\n                  </div>\n                )}\n                {selectedInstallation.rejectionReason && (\n                  <div>\n                    <Label className=\"text-sm font-medium\">Rejection Reason</Label>\n                    <p className=\"text-sm text-red-600 bg-red-50 p-2 rounded\">{selectedInstallation.rejectionReason}</p>\n                  </div>\n                )}\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Created Date</Label>\n                    <p className=\"text-sm\">{new Date(selectedInstallation.createdAt).toLocaleString()}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium\">Last Updated</Label>\n                    <p className=\"text-sm\">{new Date(selectedInstallation.updatedAt).toLocaleString()}</p>\n                  </div>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":30754},"client/src/pages/leads.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { CalendarDays, Download, Eye, Phone, MessageCircle, Mail, TrendingUp, Users, Clock, CheckCircle } from 'lucide-react';\nimport { format, parseISO, isAfter, isBefore, startOfDay, endOfDay } from 'date-fns';\nimport { dummyLeads } from '@/lib/dummyData';\n\nexport default function Leads() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedStatus, setSelectedStatus] = useState<string>('all');\n  const [selectedSource, setSelectedSource] = useState<string>('all');\n  const [dateFilter, setDateFilter] = useState({ from: '', to: '' });\n\n  const filteredLeads = useMemo(() => {\n    return dummyLeads.filter(lead => {\n      const matchesSearch = \n        lead.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        lead.phone.includes(searchTerm) ||\n        (lead.email && lead.email.toLowerCase().includes(searchTerm.toLowerCase()));\n      \n      const matchesStatus = selectedStatus === 'all' || lead.status === selectedStatus;\n      const matchesSource = selectedSource === 'all' || lead.source === selectedSource;\n      \n      let matchesDate = true;\n      if (dateFilter.from && dateFilter.to) {\n        const leadDate = parseISO(lead.createdAt);\n        const fromDate = startOfDay(parseISO(dateFilter.from));\n        const toDate = endOfDay(parseISO(dateFilter.to));\n        matchesDate = isAfter(leadDate, fromDate) && isBefore(leadDate, toDate);\n      }\n      \n      return matchesSearch && matchesStatus && matchesSource && matchesDate;\n    });\n  }, [searchTerm, selectedStatus, selectedSource, dateFilter, dummyLeads]);\n\n  const analytics = useMemo(() => {\n    const totalLeads = dummyLeads.length;\n    const newLeads = dummyLeads.filter(lead => lead.status === 'new').length;\n    const contactedLeads = dummyLeads.filter(lead => lead.isContactedByManager).length;\n    const convertedLeads = dummyLeads.filter(lead => lead.status === 'converted').length;\n    \n    const sourceDistribution = dummyLeads.reduce((acc, lead) => {\n      acc[lead.source] = (acc[lead.source] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const conversionRate = totalLeads > 0 ? (convertedLeads / totalLeads * 100).toFixed(1) : '0';\n    const contactRate = totalLeads > 0 ? (contactedLeads / totalLeads * 100).toFixed(1) : '0';\n\n    return {\n      totalLeads,\n      newLeads,\n      contactedLeads,\n      convertedLeads,\n      sourceDistribution,\n      conversionRate,\n      contactRate\n    };\n  }, [dummyLeads]);\n\n  const exportToExcel = () => {\n    const headers = ['Name', 'Phone', 'Email', 'Source', 'Status', 'Inquiry Date', 'Interest', 'Contacted by Manager'];\n    const csvContent = [\n      headers.join(','),\n      ...filteredLeads.map(lead => [\n        lead.name,\n        lead.phone,\n        lead.email || 'N/A',\n        lead.source,\n        lead.status,\n        lead.createdAt,\n        lead.inquiryType,\n        lead.isContactedByManager ? 'Yes' : 'No'\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `leads_${format(new Date(), 'yyyy-MM-dd')}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  const getStatusColor = (status: string) => {\n    const colors = {\n      new: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',\n      contacted: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',\n      interested: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',\n      converted: 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200',\n      lost: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n    };\n    return colors[status as keyof typeof colors] || 'bg-gray-100 text-gray-800';\n  };\n\n  const getSourceIcon = (source: string) => {\n    switch (source) {\n      case 'ivr': return <Phone className=\"h-4 w-4\" />;\n      case 'whatsapp': return <MessageCircle className=\"h-4 w-4\" />;\n      case 'website': return <Mail className=\"h-4 w-4\" />;\n      default: return <Phone className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Leads Management</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">Track and manage customer inquiries and leads</p>\n        </div>\n        <Button onClick={exportToExcel} className=\"bg-green-600 hover:bg-green-700\">\n          <Download className=\"mr-2 h-4 w-4\" />\n          Export Excel\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"analytics\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\n          <TabsTrigger value=\"analytics\" className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-4 w-4\" />\n            Analytics\n          </TabsTrigger>\n          <TabsTrigger value=\"leads\" className=\"flex items-center gap-2\">\n            <Users className=\"h-4 w-4\" />\n            Leads\n          </TabsTrigger>\n          <TabsTrigger value=\"new-installation\" className=\"flex items-center gap-2\">\n            <CheckCircle className=\"h-4 w-4\" />\n            New Installation\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\n          {/* Analytics Dashboard */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900 dark:to-blue-800 border-blue-200 dark:border-blue-700\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-blue-700 dark:text-blue-200\">Total Leads</CardTitle>\n                <Users className=\"h-4 w-4 text-blue-600 dark:text-blue-300\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-blue-800 dark:text-blue-100\">{analytics.totalLeads}</div>\n                <p className=\"text-xs text-blue-600 dark:text-blue-300\">All time inquiries</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-yellow-50 to-yellow-100 dark:from-yellow-900 dark:to-yellow-800 border-yellow-200 dark:border-yellow-700\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-yellow-700 dark:text-yellow-200\">New Leads</CardTitle>\n                <Clock className=\"h-4 w-4 text-yellow-600 dark:text-yellow-300\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-yellow-800 dark:text-yellow-100\">{analytics.newLeads}</div>\n                <p className=\"text-xs text-yellow-600 dark:text-yellow-300\">Pending contact</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900 dark:to-green-800 border-green-200 dark:border-green-700\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-green-700 dark:text-green-200\">Contacted</CardTitle>\n                <Eye className=\"h-4 w-4 text-green-600 dark:text-green-300\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-800 dark:text-green-100\">{analytics.contactedLeads}</div>\n                <p className=\"text-xs text-green-600 dark:text-green-300\">{analytics.contactRate}% contact rate</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900 dark:to-purple-800 border-purple-200 dark:border-purple-700\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-purple-700 dark:text-purple-200\">Converted</CardTitle>\n                <CheckCircle className=\"h-4 w-4 text-purple-600 dark:text-purple-300\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-purple-800 dark:text-purple-100\">{analytics.convertedLeads}</div>\n                <p className=\"text-xs text-purple-600 dark:text-purple-300\">{analytics.conversionRate}% conversion</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Source Distribution */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Lead Source Distribution</CardTitle>\n              <CardDescription>Breakdown of leads by inquiry source</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {Object.entries(analytics.sourceDistribution).map(([source, count]) => (\n                  <div key={source} className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      {getSourceIcon(source)}\n                      <span className=\"font-medium\">{source}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-32 bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                        <div \n                          className=\"bg-blue-600 h-2 rounded-full\" \n                          style={{ width: `${(count / analytics.totalLeads) * 100}%` }}\n                        />\n                      </div>\n                      <span className=\"text-sm font-bold\">{count}</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"leads\" className=\"space-y-6\">\n          {/* Filters */}\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n                <Input\n                  placeholder=\"Search leads...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full\"\n                />\n                \n                <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"new\">New</SelectItem>\n                    <SelectItem value=\"contacted\">Contacted</SelectItem>\n                    <SelectItem value=\"interested\">Interested</SelectItem>\n                    <SelectItem value=\"converted\">Converted</SelectItem>\n                    <SelectItem value=\"lost\">Lost</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Select value={selectedSource} onValueChange={setSelectedSource}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All Sources\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Sources</SelectItem>\n                    <SelectItem value=\"ivr\">IVR Call</SelectItem>\n                    <SelectItem value=\"whatsapp\">WhatsApp</SelectItem>\n                    <SelectItem value=\"website\">Website</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Input\n                  type=\"date\"\n                  placeholder=\"From date\"\n                  value={dateFilter.from}\n                  onChange={(e) => setDateFilter(prev => ({ ...prev, from: e.target.value }))}\n                />\n\n                <Input\n                  type=\"date\"\n                  placeholder=\"To date\"\n                  value={dateFilter.to}\n                  onChange={(e) => setDateFilter(prev => ({ ...prev, to: e.target.value }))}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Leads Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Leads ({filteredLeads.length})</CardTitle>\n              <CardDescription>Customer inquiries from various sources</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Customer</TableHead>\n                      <TableHead>Contact</TableHead>\n                      <TableHead>Source</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Interest</TableHead>\n                      <TableHead>Inquiry Date</TableHead>\n                      <TableHead>Manager Contact</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredLeads.map((lead) => (\n                      <TableRow key={lead.id}>\n                        <TableCell>\n                          <div>\n                            <div className=\"font-medium\">{lead.name}</div>\n                            <div className=\"text-sm text-gray-500\">{lead.email || 'No email'}</div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm\">{lead.phone}</div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            {getSourceIcon(lead.source)}\n                            <span className=\"text-sm\">{lead.source}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={getStatusColor(lead.status)}>\n                            {lead.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{lead.inquiryType}</span>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-1\">\n                            <CalendarDays className=\"h-4 w-4 text-gray-400\" />\n                            <span className=\"text-sm\">\n                              {format(parseISO(lead.createdAt), 'MMM dd, yyyy')}\n                            </span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={lead.isContactedByManager ? \"default\" : \"secondary\"}>\n                            {lead.isContactedByManager ? \"Yes\" : \"No\"}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"new-installation\">\n          <Card>\n            <CardHeader>\n              <CardTitle>New Installation Requests</CardTitle>\n              <CardDescription>This section will contain new installation management features</CardDescription>\n            </CardHeader>\n            <CardContent className=\"text-center py-12\">\n              <CheckCircle className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">New Installation management coming soon...</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":16620},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Wifi, Lock, Eye, EyeOff, Zap, Palette, Sun, Moon } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { z } from \"zod\";\n\n// Local type definitions\nconst loginSchema = z.object({\n  email: z.string().email(\"Valid email is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype LoginData = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login } = useAuth();\n  const { toast } = useToast();\n  const { theme, setTheme } = useTheme();\n\n  const form = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"admin@company.com\",\n      password: \"password123\",\n    },\n  });\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n\n  const themes = [\n    { id: \"light\", name: \"Light\", icon: Sun },\n    { id: \"dark\", name: \"Dark\", icon: Moon },\n    { id: \"crypto\", name: \"Crypto\", icon: Zap },\n    { id: \"neon\", name: \"Neon\", icon: Palette },\n  ] as const;\n\n  // Dummy user data\n  const dummyUsers = {\n    \"admin@company.com\": {\n      id: 1,\n      email: \"admin@company.com\",\n      username: \"admin\",\n      role: \"super-admin\" as const,\n      password: \"password123\"\n    },\n    \"manager@company.com\": {\n      id: 2,\n      email: \"manager@company.com\", \n      username: \"manager\",\n      role: \"manager\" as const,\n      password: \"password123\"\n    },\n    \"staff@company.com\": {\n      id: 3,\n      email: \"staff@company.com\",\n      username: \"staff\", \n      role: \"admin\" as const,\n      password: \"password123\"\n    }\n  };\n\n  const onSubmit = (data: LoginData) => {\n    setIsLoading(true);\n    \n    // Completely local dummy login - no API calls needed\n    setTimeout(() => {\n      const user = dummyUsers[data.email as keyof typeof dummyUsers];\n      \n      if (user && user.password === data.password) {\n        const { password, ...userWithoutPassword } = user;\n        login(userWithoutPassword, \"dummy-token-123\");\n        toast({\n          title: \"Success\",\n          description: \"Login successful\",\n        });\n        setLocation(\"/dashboard\");\n      } else {\n        toast({\n          title: \"Error\", \n          description: \"Invalid email or password\",\n          variant: \"destructive\",\n        });\n      }\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  return (\n    <div className=\"w-screen h-screen relative overflow-hidden bg-gradient-to-br from-background via-muted/20 to-background flex items-center justify-center\">\n      {/* Enhanced Animated Background */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        {/* Large Background Orbs */}\n        <div className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-primary/8 rounded-full blur-3xl animate-pulse-slow\" />\n        <div className=\"absolute bottom-1/4 right-1/4 w-80 h-80 bg-accent/8 rounded-full blur-3xl animate-pulse-slow\" />\n        <div className=\"absolute top-3/4 left-1/2 w-64 h-64 bg-primary/5 rounded-full blur-2xl animate-float\" />\n        \n        {/* Additional Mobile-Optimized Orbs */}\n        <div className=\"absolute top-10 right-10 w-32 h-32 bg-primary/6 rounded-full blur-2xl animate-float\" />\n        <div className=\"absolute bottom-10 left-10 w-40 h-40 bg-accent/6 rounded-full blur-2xl animate-pulse-slow\" />\n        \n        {/* Floating Particles */}\n        <div className=\"absolute top-1/3 right-1/3 w-4 h-4 bg-primary/20 rounded-full animate-ping\" />\n        <div \n          className=\"absolute bottom-1/3 left-1/3 w-3 h-3 bg-accent/20 rounded-full animate-ping\" \n          style={{ animationDelay: '1s' }} \n        />\n        <div \n          className=\"absolute top-2/3 left-2/3 w-2 h-2 bg-primary/30 rounded-full animate-ping\" \n          style={{ animationDelay: '2s' }} \n        />\n      </div>\n\n      {/* Grid Pattern Overlay */}\n      <div className=\"absolute inset-0 bg-grid-pattern opacity-5\" />\n\n      {/* Theme Switcher - Responsive */}\n      <div className=\"absolute top-4 right-4 sm:top-6 sm:right-6 z-20\">\n        <div className=\"flex gap-1 sm:gap-2 bg-card/90 backdrop-blur-md border border-border/50 rounded-full p-1 shadow-xl neon-glow\">\n          {themes.map(({ id, name, icon: Icon }) => (\n            <button\n              key={id}\n              onClick={() => setTheme(id)}\n              className={`\n                p-2 sm:p-2.5 rounded-full transition-all duration-300 group relative\n                ${theme === id \n                  ? 'bg-primary text-primary-foreground shadow-lg scale-110' \n                  : 'bg-transparent text-muted-foreground hover:bg-muted hover:text-foreground hover:scale-105'\n                }\n              `}\n              title={name}\n            >\n              <Icon className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n              {theme === id && (\n                <div className=\"absolute inset-0 rounded-full bg-primary/20 animate-ping\" />\n              )}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Main Container - Responsive Layout */}\n      <div className=\"w-full h-full flex flex-col lg:flex-row items-center justify-center gap-8 lg:gap-16 p-4 sm:p-6 lg:p-8\">\n        \n        {/* Left Side - Brand & Info (Hidden on Mobile) */}\n        <div className=\"hidden lg:flex flex-col items-center justify-center flex-1 max-w-lg text-center space-y-8\">\n          <div className=\"relative\">\n            <div className=\"h-32 w-32 mx-auto bg-gradient-to-br from-primary to-accent rounded-3xl flex items-center justify-center shadow-2xl neon-glow animate-float\">\n              <Wifi className=\"h-16 w-16 text-primary-foreground\" />\n            </div>\n            <div className=\"absolute -top-4 -right-4 w-8 h-8 bg-accent rounded-full animate-ping\" />\n            <div \n              className=\"absolute -bottom-4 -left-4 w-6 h-6 bg-primary rounded-full animate-ping\" \n              style={{ animationDelay: '1s' }} \n            />\n          </div>\n          \n          <div className=\"space-y-4\">\n            <h1 className=\"text-6xl font-bold text-gradient\">\n              WiFi Self-Care\n            </h1>\n            <p className=\"text-xl text-muted-foreground\">\n              Advanced Network Management Platform\n            </p>\n            <div className=\"flex justify-center items-center gap-3\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\" />\n              <span className=\"text-sm text-muted-foreground\">System Online</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Right Side - Login Form */}\n        <div className=\"w-full lg:flex-1 max-w-lg lg:max-w-md xl:max-w-lg\">\n          <Card className=\"relative backdrop-blur-2xl bg-card/90 border border-border/50 shadow-2xl rounded-2xl lg:rounded-3xl neon-glow\">\n            {/* Enhanced Card Glow */}\n            <div className=\"absolute inset-0 rounded-2xl lg:rounded-3xl bg-gradient-to-r from-primary/15 via-transparent to-accent/15 blur-2xl\" />\n            \n            <CardContent className=\"relative p-6 sm:p-8 lg:p-10\">\n              {/* Mobile Header - Visible only on mobile */}\n              <div className=\"lg:hidden text-center mb-8\">\n                <div className=\"relative mx-auto mb-4\">\n                  <div className=\"h-16 w-16 mx-auto bg-gradient-to-br from-primary to-accent rounded-2xl flex items-center justify-center shadow-lg neon-glow\">\n                    <Wifi className=\"h-8 w-8 text-primary-foreground animate-pulse-slow\" />\n                  </div>\n                  <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-accent rounded-full animate-ping\" />\n                </div>\n                \n                <h1 className=\"text-3xl font-bold text-gradient mb-1\">\n                  WiFi Self-Care\n                </h1>\n                <p className=\"text-sm text-muted-foreground\">\n                  Admin Dashboard Access\n                </p>\n              </div>\n\n              {/* Welcome Section */}\n              <div className=\"text-center mb-6 lg:mb-8\">\n                <h2 className=\"text-2xl lg:text-3xl font-bold text-foreground mb-2\">\n                  Welcome Back\n                </h2>\n                <p className=\"text-muted-foreground text-sm lg:text-base\">\n                  Sign in to access your dashboard\n                </p>\n              </div>\n\n              {/* Demo Accounts Info - Collapsible on mobile */}\n              <div className=\"bg-muted/40 backdrop-blur-sm rounded-xl p-4 mb-6 border border-border/50 shadow-lg\">\n                <h4 className=\"text-sm font-semibold text-foreground mb-3 flex items-center gap-2\">\n                  <span>🔐</span> Demo Accounts\n                </h4>\n                <div className=\"text-xs text-muted-foreground space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>👤 <span className=\"font-mono text-primary\">admin@company.com</span></span>\n                    <span className=\"text-xs bg-primary/20 text-primary px-2 py-0.5 rounded-full\">Super Admin</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>👤 <span className=\"font-mono text-primary\">manager@company.com</span></span>\n                    <span className=\"text-xs bg-accent/20 text-accent px-2 py-0.5 rounded-full\">Manager</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>👤 <span className=\"font-mono text-primary\">staff@company.com</span></span>\n                    <span className=\"text-xs bg-muted-foreground/20 text-muted-foreground px-2 py-0.5 rounded-full\">Staff</span>\n                  </div>\n                  <div className=\"pt-2 border-t border-border/30\">\n                    <span className=\"text-accent font-semibold\">🔑 Password: password123</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Login Form */}\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"space-y-5\">\n                  {/* Email Field */}\n                  <div className=\"space-y-2\">\n                    <Label \n                      htmlFor=\"email\" \n                      className=\"text-sm font-medium text-foreground flex items-center gap-2\"\n                    >\n                      📧 Email Address\n                    </Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"Enter your email address\"\n                      {...form.register(\"email\")}\n                      className=\"h-12 sm:h-14 bg-background/60 border-border/50 text-foreground placeholder:text-muted-foreground focus:border-primary focus:ring-primary/20 transition-all duration-300 rounded-xl text-sm sm:text-base backdrop-blur-sm\"\n                    />\n                    {form.formState.errors.email && (\n                      <p className=\"text-sm text-destructive flex items-center gap-1\">\n                        <span>⚠️</span> {form.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Password Field */}\n                  <div className=\"space-y-2\">\n                    <Label \n                      htmlFor=\"password\" \n                      className=\"text-sm font-medium text-foreground flex items-center gap-2\"\n                    >\n                      🔒 Password\n                    </Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"password\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Enter your password\"\n                        {...form.register(\"password\")}\n                        className=\"h-12 sm:h-14 pr-12 bg-background/60 border-border/50 text-foreground placeholder:text-muted-foreground focus:border-primary focus:ring-primary/20 transition-all duration-300 rounded-xl text-sm sm:text-base backdrop-blur-sm\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground transition-all duration-200 hover:scale-110\"\n                      >\n                        {showPassword ? (\n                          <EyeOff className=\"h-5 w-5\" />\n                        ) : (\n                          <Eye className=\"h-5 w-5\" />\n                        )}\n                      </button>\n                    </div>\n                    {form.formState.errors.password && (\n                      <p className=\"text-sm text-destructive flex items-center gap-1\">\n                        <span>⚠️</span> {form.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                {/* Remember Me & Forgot Password */}\n                <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3 sm:gap-0\">\n                  <div className=\"flex items-center gap-2\">\n                    <Checkbox \n                      id=\"remember-me\" \n                      className=\"border-border/50 data-[state=checked]:bg-primary data-[state=checked]:border-primary\" \n                    />\n                    <Label \n                      htmlFor=\"remember-me\" \n                      className=\"text-sm text-muted-foreground cursor-pointer\"\n                    >\n                      Remember me\n                    </Label>\n                  </div>\n                  <button \n                    type=\"button\"\n                    className=\"text-sm text-primary hover:text-primary/80 transition-colors duration-200 font-medium\"\n                  >\n                    Forgot password?\n                  </button>\n                </div>\n\n                {/* Submit Button */}\n                <Button\n                  type=\"submit\"\n                  disabled={isLoading}\n                  className=\"w-full h-14 sm:h-16 bg-gradient-to-r from-primary via-primary to-accent hover:from-primary/90 hover:via-primary/95 hover:to-accent/90 text-primary-foreground font-bold text-base sm:text-lg rounded-xl shadow-2xl transition-all duration-300 transform hover:scale-[1.02] hover:shadow-3xl disabled:scale-100 neon-glow\"\n                >\n                  {isLoading ? (\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-6 h-6 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                      <span>Signing In...</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center gap-3\">\n                      <Lock className=\"h-5 w-5 sm:h-6 sm:w-6\" />\n                      <span>Sign In to Dashboard</span>\n                    </div>\n                  )}\n                </Button>\n              </form>\n\n              {/* Footer */}\n              <div className=\"mt-6 lg:mt-8 text-center space-y-3\">\n                <div className=\"flex justify-center items-center gap-2\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n                  <span className=\"text-xs text-muted-foreground\">System Online & Secure</span>\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Protected by enterprise-grade security\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16291},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/notifications.tsx":{"content":"import { useState } from \"react\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { NotificationComposer } from \"@/components/notifications/notification-composer\";\nimport { NotificationHistory } from \"@/components/notifications/notification-history\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth\";\nimport { \n  Bell, \n  TrendingUp, \n  Users, \n  MessageSquare, \n  Clock,\n  CheckCircle,\n  AlertCircle,\n  Send\n} from \"lucide-react\";\n\n// Enhanced notification interface\ninterface Notification {\n  id: number;\n  title: string;\n  message: string;\n  type: \"info\" | \"warning\" | \"error\" | \"success\";\n  priority: \"low\" | \"medium\" | \"high\" | \"urgent\";\n  recipientType: string;\n  specificRecipients?: string[];\n  locationFilter?: string;\n  roleFilter?: string;\n  deliveredCount: number;\n  readCount: number;\n  totalRecipients: number;\n  sentAt: string;\n  sentBy: string;\n  status: \"sent\" | \"scheduled\" | \"failed\" | \"draft\";\n  channels: {\n    push: boolean;\n    email: boolean;\n    sms: boolean;\n  };\n}\n\nexport default function Notifications() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  // Enhanced dummy notifications data with comprehensive metrics\n  const [notifications, setNotifications] = useState<Notification[]>([\n    {\n      id: 1,\n      title: \"System Maintenance Scheduled\",\n      message: \"Network maintenance is scheduled for tomorrow from 2:00 AM to 4:00 AM. We expect minimal downtime and will work to complete upgrades as quickly as possible. All services will be restored by 4:00 AM.\",\n      type: \"info\",\n      priority: \"high\",\n      recipientType: \"all-users\",\n      deliveredCount: 1456,\n      readCount: 1127,\n      totalRecipients: 1500,\n      sentAt: \"2025-01-20T10:00:00Z\",\n      sentBy: \"Admin Team\",\n      status: \"sent\",\n      channels: {\n        push: true,\n        email: true,\n        sms: false\n      }\n    },\n    {\n      id: 2,\n      title: \"New Ultra High-Speed Plan Available\",\n      message: \"We're excited to announce our new Ultra High-Speed 1 Gbps plan is now available in your area! Upgrade today and enjoy lightning-fast internet with no data caps. Contact customer service for special pricing.\",\n      type: \"success\",\n      priority: \"medium\",\n      recipientType: \"specific-users\",\n      specificRecipients: [\"user1\", \"user2\", \"user3\"],\n      deliveredCount: 834,\n      readCount: 645,\n      totalRecipients: 850,\n      sentAt: \"2025-01-19T15:30:00Z\",\n      sentBy: \"Marketing Team\",\n      status: \"sent\",\n      channels: {\n        push: true,\n        email: true,\n        sms: true\n      }\n    },\n    {\n      id: 3,\n      title: \"Critical: Engineer Assignment Protocol Update\",\n      message: \"Important: New protocol for complaint assignments has been implemented effective immediately. All engineers must review the updated guidelines in the engineering portal and complete the mandatory training module by end of week.\",\n      type: \"warning\",\n      priority: \"urgent\",\n      recipientType: \"all-engineers\",\n      deliveredCount: 24,\n      readCount: 18,\n      totalRecipients: 25,\n      sentAt: \"2025-01-18T09:15:00Z\",\n      sentBy: \"Engineering Manager\",\n      status: \"sent\",\n      channels: {\n        push: true,\n        email: true,\n        sms: true\n      }\n    },\n    {\n      id: 4,\n      title: \"Q1 Performance Review Meeting\",\n      message: \"Quarterly performance review meetings are scheduled for next week. Please check your calendar for individual meeting times and prepare your quarterly reports. All reports must be submitted 24 hours before your scheduled meeting.\",\n      type: \"info\",\n      priority: \"medium\",\n      recipientType: \"all-managers\",\n      deliveredCount: 8,\n      readCount: 8,\n      totalRecipients: 8,\n      sentAt: \"2025-01-17T14:20:00Z\",\n      sentBy: \"HR Department\",\n      status: \"sent\",\n      channels: {\n        push: true,\n        email: true,\n        sms: false\n      }\n    },\n    {\n      id: 5,\n      title: \"Service Outage Resolved\",\n      message: \"The service outage affecting the North District has been fully resolved. All services are now operating normally. We apologize for any inconvenience caused during the maintenance period.\",\n      type: \"success\",\n      priority: \"high\",\n      recipientType: \"location-based\",\n      locationFilter: \"North District\",\n      deliveredCount: 342,\n      readCount: 298,\n      totalRecipients: 350,\n      sentAt: \"2025-01-16T08:45:00Z\",\n      sentBy: \"Network Operations\",\n      status: \"sent\",\n      channels: {\n        push: true,\n        email: false,\n        sms: true\n      }\n    }\n  ]);\n\n  const isLoading = false;\n\n  const handleSendNotification = (notificationData: any) => {\n    // Simulate sending notification with realistic metrics\n    const estimatedRecipients = getEstimatedRecipients(notificationData.recipientType, notificationData.specificRecipients);\n    const deliveryRate = 0.85 + Math.random() * 0.12; // 85-97% delivery rate\n    const readRate = 0.65 + Math.random() * 0.25; // 65-90% read rate of delivered\n    \n    const delivered = Math.floor(estimatedRecipients * deliveryRate);\n    const read = Math.floor(delivered * readRate);\n\n    const newNotification: Notification = {\n      id: Math.max(...notifications.map(n => n.id)) + 1,\n      ...notificationData,\n      deliveredCount: delivered,\n      readCount: read,\n      totalRecipients: estimatedRecipients,\n      sentAt: new Date().toISOString(),\n      sentBy: user?.email || \"Admin\",\n      status: notificationData.scheduleType === \"immediate\" ? \"sent\" : \"scheduled\",\n      channels: {\n        push: notificationData.enablePushNotification,\n        email: notificationData.enableEmailNotification,\n        sms: notificationData.enableSMSNotification\n      }\n    };\n\n    setNotifications([newNotification, ...notifications]);\n  };\n\n  const getEstimatedRecipients = (recipientType: string, specificRecipients?: string[]) => {\n    switch (recipientType) {\n      case \"all-users\":\n        return 1500;\n      case \"all-engineers\":\n        return 25;\n      case \"all-managers\":\n        return 8;\n      case \"specific-users\":\n      case \"specific-engineers\":\n      case \"specific-managers\":\n        return specificRecipients?.length || 0;\n      case \"location-based\":\n        return 300;\n      case \"role-based\":\n        return 150;\n      default:\n        return 0;\n    }\n  };\n\n  // Calculate overall statistics\n  const totalNotifications = notifications.length;\n  const totalRecipients = notifications.reduce((sum, n) => sum + n.totalRecipients, 0);\n  const totalDelivered = notifications.reduce((sum, n) => sum + n.deliveredCount, 0);\n  const totalRead = notifications.reduce((sum, n) => sum + n.readCount, 0);\n  const avgDeliveryRate = totalRecipients > 0 ? (totalDelivered / totalRecipients) * 100 : 0;\n  const avgReadRate = totalDelivered > 0 ? (totalRead / totalDelivered) * 100 : 0;\n\n  if (isLoading) {\n    return (\n      <MainLayout title=\"Notification Center\">\n        <div className=\"animate-pulse space-y-6 p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"bg-card rounded-xl shadow-sm p-6 border\">\n                <div className=\"h-6 bg-muted rounded mb-2\"></div>\n                <div className=\"h-8 bg-muted rounded\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </MainLayout>\n    );\n  }\n\n  return (\n    <MainLayout title=\"Notification Center\">\n      <div className=\"space-y-8 p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Notification Center</h1>\n            <p className=\"text-muted-foreground mt-1\">Manage and send notifications to users, engineers, and managers</p>\n          </div>\n          <Badge variant=\"outline\" className=\"text-sm\">\n            <Bell className=\"h-4 w-4 mr-2\" />\n            {totalNotifications} total notifications\n          </Badge>\n        </div>\n\n        {/* Statistics Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"border-2 border-blue-200 bg-blue-50/50\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center text-sm font-medium text-blue-700\">\n                <Send className=\"h-4 w-4 mr-2\" />\n                Total Sent\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-900\">{totalNotifications}</div>\n              <p className=\"text-xs text-blue-600 mt-1\">Notifications sent</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-2 border-green-200 bg-green-50/50\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center text-sm font-medium text-green-700\">\n                <Users className=\"h-4 w-4 mr-2\" />\n                Total Reach\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-900\">{totalRecipients.toLocaleString()}</div>\n              <p className=\"text-xs text-green-600 mt-1\">Recipients reached</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-2 border-orange-200 bg-orange-50/50\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center text-sm font-medium text-orange-700\">\n                <CheckCircle className=\"h-4 w-4 mr-2\" />\n                Delivery Rate\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-orange-900\">{avgDeliveryRate.toFixed(1)}%</div>\n              <p className=\"text-xs text-orange-600 mt-1\">{totalDelivered.toLocaleString()} delivered</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-2 border-purple-200 bg-purple-50/50\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center text-sm font-medium text-purple-700\">\n                <MessageSquare className=\"h-4 w-4 mr-2\" />\n                Read Rate\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-900\">{avgReadRate.toFixed(1)}%</div>\n              <p className=\"text-xs text-purple-600 mt-1\">{totalRead.toLocaleString()} read</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Notification Composer */}\n        <NotificationComposer onSend={handleSendNotification} />\n\n        {/* Notification History */}\n        <NotificationHistory \n          notifications={notifications}\n          onDeleteNotification={(id) => {\n            setNotifications(notifications.filter(n => n.id !== id));\n            toast({\n              title: \"Notification deleted\",\n              description: \"The notification has been removed from history\",\n            });\n          }}\n          onResendNotification={(id) => {\n            const notification = notifications.find(n => n.id === id);\n            if (notification) {\n              toast({\n                title: \"Notification resent\",\n                description: `\"${notification.title}\" has been resent to recipients`,\n              });\n            }\n          }}\n        />\n      </div>\n    </MainLayout>\n  );\n}\n","size_bytes":11570},"client/src/pages/plan-detail.tsx":{"content":"import { useLocation, useParams } from \"wouter\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  ArrowLeft, Star, Users, Calendar, DollarSign, Zap, Globe, Shield, \n  CheckCircle, Crown, Award, Building2, Smartphone, MonitorSpeaker,\n  TrendingUp, Activity, Target, Clock, ThumbsUp, Package\n} from \"lucide-react\";\nimport { dummyServicePlans, type ServicePlan } from \"@/lib/dummyData\";\n\nexport default function PlanDetail() {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  \n  const planId = params.id ? parseInt(params.id) : null;\n  const plan = planId ? dummyServicePlans.find(p => p.id === planId) : null;\n\n  if (!plan) {\n    return (\n      <MainLayout title=\"Plan Not Found\">\n        <div className=\"text-center py-12\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Plan Not Found</h1>\n          <p className=\"text-gray-600 mb-6\">The plan you're looking for doesn't exist.</p>\n          <Button onClick={() => setLocation(\"/plans\")}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Plans\n          </Button>\n        </div>\n      </MainLayout>\n    );\n  }\n\n  const getProviderInfo = (provider: string) => {\n    switch (provider) {\n      case \"jio\":\n        return { \n          name: \"Jio Fiber\", \n          color: \"bg-blue-600\", \n          textColor: \"text-blue-600\", \n          bgColor: \"bg-blue-50\",\n          gradientFrom: \"from-blue-500\",\n          gradientTo: \"to-blue-700\",\n          logo: \"JF\"\n        };\n      case \"airtel\":\n        return { \n          name: \"Airtel Xstream\", \n          color: \"bg-red-600\", \n          textColor: \"text-red-600\", \n          bgColor: \"bg-red-50\",\n          gradientFrom: \"from-red-500\",\n          gradientTo: \"to-red-700\",\n          logo: \"AX\"\n        };\n      case \"bsnl\":\n        return { \n          name: \"BSNL Broadband\", \n          color: \"bg-green-600\", \n          textColor: \"text-green-600\", \n          bgColor: \"bg-green-50\",\n          gradientFrom: \"from-green-500\",\n          gradientTo: \"to-green-700\",\n          logo: \"BS\"\n        };\n      case \"my-internet\":\n        return { \n          name: \"My Internet\", \n          color: \"bg-purple-600\", \n          textColor: \"text-purple-600\", \n          bgColor: \"bg-purple-50\",\n          gradientFrom: \"from-purple-500\",\n          gradientTo: \"to-purple-700\",\n          logo: \"MI\"\n        };\n      default:\n        return { \n          name: provider, \n          color: \"bg-gray-600\", \n          textColor: \"text-gray-600\", \n          bgColor: \"bg-gray-50\",\n          gradientFrom: \"from-gray-500\",\n          gradientTo: \"to-gray-700\",\n          logo: \"GN\"\n        };\n    }\n  };\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0\n    }).format(price);\n  };\n\n  const getRatingBadge = (rating: number) => {\n    if (rating >= 4.5) return <Crown className=\"w-5 h-5 text-yellow-500\" />;\n    if (rating >= 4.0) return <Award className=\"w-5 h-5 text-green-500\" />;\n    return <Star className=\"w-5 h-5 text-gray-500\" />;\n  };\n\n  const getSpeedIcon = (speed: string) => {\n    const speedNum = parseInt(speed);\n    if (speedNum >= 200) return <Zap className=\"w-6 h-6 text-yellow-500\" />;\n    if (speedNum >= 100) return <Globe className=\"w-6 h-6 text-blue-500\" />;\n    if (speedNum >= 50) return <Shield className=\"w-6 h-6 text-green-500\" />;\n    return <MonitorSpeaker className=\"w-6 h-6 text-gray-500\" />;\n  };\n\n  const providerInfo = getProviderInfo(plan.provider);\n\n  return (\n    <MainLayout title={`${plan.title || plan.name} - Plan Details`}>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <Button variant=\"outline\" onClick={() => setLocation(\"/plans\")}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Plans\n          </Button>\n          <div className=\"flex items-center space-x-2\">\n            <Badge \n              className={`\n                ${plan.planType === 'Enterprise' ? 'bg-purple-600 text-white' : ''}\n                ${plan.planType === 'Premium' ? 'bg-blue-600 text-white' : ''}\n                ${plan.planType === 'Gold' ? 'bg-yellow-600 text-white' : ''}\n                ${plan.planType === 'Basic' ? 'bg-gray-600 text-white' : ''}\n              `}\n            >\n              {plan.planType}\n            </Badge>\n            <Badge variant={plan.isActive ? \"default\" : \"secondary\"}>\n              {plan.isActive ? \"Active\" : \"Inactive\"}\n            </Badge>\n          </div>\n        </div>\n\n        {/* Hero Section */}\n        <Card className=\"overflow-hidden\">\n          <div className={`bg-gradient-to-r ${providerInfo.gradientFrom} ${providerInfo.gradientTo} p-8`}>\n            <div className=\"flex items-start justify-between text-white\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center\">\n                  <span className=\"text-white font-bold text-xl\">{providerInfo.logo}</span>\n                </div>\n                <div>\n                  <h1 className=\"text-3xl font-bold mb-2\">{plan.title || plan.name}</h1>\n                  <p className=\"text-white/90 text-lg\">{providerInfo.name}</p>\n                  <div className=\"flex items-center space-x-2 mt-2\">\n                    {getRatingBadge(plan.rating)}\n                    <span className=\"text-white/90\">{plan.rating}/5</span>\n                    <span className=\"text-white/70\">•</span>\n                    <span className=\"text-white/90\">{plan.subscribers.toLocaleString()} subscribers</span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-white/80 text-lg\">Starting at</p>\n                <p className=\"text-4xl font-bold\">{formatPrice(plan.price)}</p>\n                <p className=\"text-white/80\">{plan.validity}</p>\n              </div>\n            </div>\n          </div>\n        </Card>\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"p-6 text-center bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200\">\n            <div className=\"flex items-center justify-center w-12 h-12 bg-blue-100 rounded-full mx-auto mb-4\">\n              {getSpeedIcon(plan.speed)}\n            </div>\n            <h3 className=\"text-lg font-semibold text-blue-900 mb-1\">Speed</h3>\n            <p className=\"text-2xl font-bold text-blue-600\">{plan.speed}</p>\n            <p className=\"text-blue-600 text-sm\">{plan.dataLimit || 'Unlimited'}</p>\n          </Card>\n\n          <Card className=\"p-6 text-center bg-gradient-to-br from-green-50 to-green-100 border-green-200\">\n            <div className=\"flex items-center justify-center w-12 h-12 bg-green-100 rounded-full mx-auto mb-4\">\n              <DollarSign className=\"w-6 h-6 text-green-600\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-green-900 mb-1\">Price</h3>\n            <p className=\"text-2xl font-bold text-green-600\">{formatPrice(plan.price)}</p>\n            <p className=\"text-green-600 text-sm\">Monthly billing</p>\n          </Card>\n\n          <Card className=\"p-6 text-center bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200\">\n            <div className=\"flex items-center justify-center w-12 h-12 bg-purple-100 rounded-full mx-auto mb-4\">\n              <Calendar className=\"w-6 h-6 text-purple-600\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-purple-900 mb-1\">Validity</h3>\n            <p className=\"text-2xl font-bold text-purple-600\">{plan.validity}</p>\n            <p className=\"text-purple-600 text-sm\">Contract period</p>\n          </Card>\n\n          <Card className=\"p-6 text-center bg-gradient-to-br from-orange-50 to-orange-100 border-orange-200\">\n            <div className=\"flex items-center justify-center w-12 h-12 bg-orange-100 rounded-full mx-auto mb-4\">\n              <Users className=\"w-6 h-6 text-orange-600\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-orange-900 mb-1\">Subscribers</h3>\n            <p className=\"text-2xl font-bold text-orange-600\">{plan.subscribers.toLocaleString()}</p>\n            <p className=\"text-orange-600 text-sm\">Active users</p>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Plan Details */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Description */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Package className=\"w-5 h-5\" />\n                  <span>Plan Overview</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-700 leading-relaxed\">{plan.description}</p>\n              </CardContent>\n            </Card>\n\n            {/* Features */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <span>Features & Benefits</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {plan.features.map((feature, index) => (\n                    <div key={index} className=\"flex items-start space-x-3\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0\"></div>\n                      <span className=\"text-gray-700\">{feature}</span>\n                    </div>\n                  ))}\n                </div>\n                \n                {plan.benefits && (\n                  <div className=\"mt-6 p-4 bg-gradient-to-r from-green-50 to-blue-50 rounded-lg\">\n                    <h4 className=\"font-semibold text-green-700 mb-2\">🎁 Special Benefits</h4>\n                    <p className=\"text-green-600\">{plan.benefits}</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Performance Analytics */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <TrendingUp className=\"w-5 h-5 text-blue-600\" />\n                  <span>Performance Analytics</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm font-medium text-gray-700\">Customer Satisfaction</span>\n                      <span className=\"text-sm font-bold text-green-600\">{Math.round(plan.rating * 20)}%</span>\n                    </div>\n                    <Progress value={plan.rating * 20} className=\"h-2\" />\n                  </div>\n                  \n                  <div>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm font-medium text-gray-700\">Market Share</span>\n                      <span className=\"text-sm font-bold text-blue-600\">{Math.round((plan.subscribers / 50000) * 100)}%</span>\n                    </div>\n                    <Progress value={(plan.subscribers / 50000) * 100} className=\"h-2\" />\n                  </div>\n                  \n                  <div>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm font-medium text-gray-700\">Network Uptime</span>\n                      <span className=\"text-sm font-bold text-green-600\">99.{Math.floor(Math.random() * 10)}%</span>\n                    </div>\n                    <Progress value={99} className=\"h-2\" />\n                  </div>\n                  \n                  <div>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm font-medium text-gray-700\">Speed Reliability</span>\n                      <span className=\"text-sm font-bold text-blue-600\">{85 + Math.floor(Math.random() * 15)}%</span>\n                    </div>\n                    <Progress value={90} className=\"h-2\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Quick Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Activity className=\"w-5 h-5 text-purple-600\" />\n                  <span>Quick Stats</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-600\">Plan Type</span>\n                  <Badge variant=\"outline\">{plan.planType}</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-600\">Provider</span>\n                  <span className=\"font-medium\">{providerInfo.name}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-600\">Status</span>\n                  <Badge variant={plan.isActive ? \"default\" : \"secondary\"}>\n                    {plan.isActive ? \"Active\" : \"Inactive\"}\n                  </Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-600\">Created</span>\n                  <span className=\"font-medium\">\n                    {new Date(plan.createdAt).toLocaleDateString()}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Usage Insights */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Target className=\"w-5 h-5 text-green-600\" />\n                  <span>Usage Insights</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-center p-4 bg-gray-50 rounded-lg\">\n                  <Clock className=\"w-8 h-8 text-gray-500 mx-auto mb-2\" />\n                  <p className=\"text-sm text-gray-600\">Avg. Session Time</p>\n                  <p className=\"text-lg font-bold\">{3 + Math.floor(Math.random() * 5)}h {Math.floor(Math.random() * 60)}m</p>\n                </div>\n                \n                <div className=\"text-center p-4 bg-gray-50 rounded-lg\">\n                  <ThumbsUp className=\"w-8 h-8 text-green-500 mx-auto mb-2\" />\n                  <p className=\"text-sm text-gray-600\">Customer Retention</p>\n                  <p className=\"text-lg font-bold\">{85 + Math.floor(Math.random() * 15)}%</p>\n                </div>\n                \n                <div className=\"text-center p-4 bg-gray-50 rounded-lg\">\n                  <Building2 className=\"w-8 h-8 text-blue-500 mx-auto mb-2\" />\n                  <p className=\"text-sm text-gray-600\">Enterprise Clients</p>\n                  <p className=\"text-lg font-bold\">{Math.floor(plan.subscribers * 0.15).toLocaleString()}</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Revenue Insights */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <DollarSign className=\"w-5 h-5 text-green-600\" />\n                  <span>Revenue Impact</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center\">\n                  <p className=\"text-sm text-gray-600 mb-1\">Monthly Revenue</p>\n                  <p className=\"text-2xl font-bold text-green-600\">\n                    {formatPrice(plan.price * plan.subscribers)}\n                  </p>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    {((plan.price * plan.subscribers) / 10000000 * 100).toFixed(1)}% of total revenue\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":16889},"client/src/pages/plans.tsx":{"content":"import { useState } from \"react\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  Tv, \n  Wifi, \n  Zap, \n  Plus, \n  Edit, \n  Trash2, \n  Eye,\n  Users,\n  Star,\n  PlayCircle,\n  Monitor,\n  Radio,\n  Crown,\n  Shield,\n  Smartphone,\n  Phone,\n  Globe,\n  Calendar,\n  DollarSign,\n  TrendingUp,\n  Settings,\n  Search,\n  Filter,\n  Upload,\n  Image,\n  X\n} from \"lucide-react\";\nimport { generateDummyIptvPlans, generateDummyOttPlans, generateDummyFibrePlans, type IptvPlan, type OttPlan, type FibrePlan } from \"@/lib/dummyData\";\n\nexport default function PlansPage() {\n  const [activeTab, setActiveTab] = useState(\"iptv\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedProvider, setSelectedProvider] = useState(\"all\");\n  const [selectedPlanType, setSelectedPlanType] = useState(\"all\");\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [editingPlan, setEditingPlan] = useState<any>(null);\n  const [selectedPlanTypeForAdd, setSelectedPlanTypeForAdd] = useState(\"iptv\");\n  const [formData, setFormData] = useState<any>({});\n  const [logoFile, setLogoFile] = useState<File | null>(null);\n  const [logoPreview, setLogoPreview] = useState<string | null>(null);\n\n  // Get dummy data\n  const iptvPlans = generateDummyIptvPlans();\n  const ottPlans = generateDummyOttPlans();\n  const fibrePlans = generateDummyFibrePlans();\n\n  // Filter functions\n  const filterPlans = (plans: any[]) => {\n    return plans.filter(plan => {\n      const matchesSearch = plan.name?.toLowerCase().includes(searchTerm.toLowerCase()) || \n                           plan.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           plan.provider.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesProvider = selectedProvider === \"all\" || plan.provider.toLowerCase().includes(selectedProvider.toLowerCase());\n      const matchesPlanType = selectedPlanType === \"all\" || plan.planType.toLowerCase() === selectedPlanType.toLowerCase();\n      return matchesSearch && matchesProvider && matchesPlanType;\n    });\n  };\n\n  // Get unique providers for filter\n  const getAllProviders = () => {\n    const allPlans = [...iptvPlans, ...ottPlans, ...fibrePlans];\n    return Array.from(new Set(allPlans.map(plan => plan.provider)));\n  };\n\n  const handleEdit = (plan: any) => {\n    setEditingPlan(plan);\n    setFormData(plan);\n    setLogoPreview(null);\n    setLogoFile(null);\n    setShowEditDialog(true);\n  };\n\n  const handleDelete = (planId: number) => {\n    // In real app, this would delete from backend\n    console.log(\"Delete plan:\", planId);\n  };\n\n  const handleAddPlan = () => {\n    console.log(\"Adding plan:\", formData);\n    setShowAddDialog(false);\n    setFormData({});\n  };\n\n  const handleUpdatePlan = () => {\n    console.log(\"Updating plan:\", formData);\n    setShowEditDialog(false);\n    setFormData({});\n    setEditingPlan(null);\n  };\n\n  const resetForm = () => {\n    setFormData({});\n    setSelectedPlanTypeForAdd(\"iptv\");\n    setLogoFile(null);\n    setLogoPreview(null);\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setLogoFile(file);\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setLogoPreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const removeUploadedFile = () => {\n    setLogoFile(null);\n    setLogoPreview(null);\n    setFormData({...formData, logo: \"\"});\n  };\n\n  return (\n    <MainLayout title=\"Service Plans Management\">\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold dashboard-welcome-text\">Service Plans Management</h1>\n            <p className=\"dashboard-welcome-muted\">Manage IPTV, OTT, and Fibre service plans</p>\n          </div>\n          <Button \n            onClick={() => setShowAddDialog(true)}\n            className=\"dashboard-stats-card hover:scale-105 transition-transform duration-300\"\n          >\n            <Plus className=\"h-4 w-4 mr-2 dashboard-welcome-icon\" />\n            <span className=\"dashboard-welcome-text\">Add New Plan</span>\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"dashboard-stats-card shadow-lg hover:scale-105 transition-transform duration-300\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm dashboard-welcome-muted\">Total Plans</p>\n                  <p className=\"text-2xl font-bold dashboard-welcome-text\">\n                    {iptvPlans.length + ottPlans.length + fibrePlans.length}\n                  </p>\n                </div>\n                <div className=\"h-12 w-12 rounded-full dashboard-welcome-icon flex items-center justify-center\">\n                  <Globe className=\"h-6 w-6 text-white\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"dashboard-stats-card shadow-lg hover:scale-105 transition-transform duration-300\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm dashboard-welcome-muted\">IPTV Plans</p>\n                  <p className=\"text-2xl font-bold dashboard-welcome-text\">{iptvPlans.length}</p>\n                </div>\n                <div className=\"h-12 w-12 rounded-full dashboard-welcome-icon flex items-center justify-center\">\n                  <Tv className=\"h-6 w-6 text-white\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"dashboard-stats-card shadow-lg hover:scale-105 transition-transform duration-300\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm dashboard-welcome-muted\">OTT Plans</p>\n                  <p className=\"text-2xl font-bold dashboard-welcome-text\">{ottPlans.length}</p>\n                </div>\n                <div className=\"h-12 w-12 rounded-full dashboard-welcome-icon flex items-center justify-center\">\n                  <PlayCircle className=\"h-6 w-6 text-white\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"dashboard-stats-card shadow-lg hover:scale-105 transition-transform duration-300\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm dashboard-welcome-muted\">Fibre Plans</p>\n                  <p className=\"text-2xl font-bold dashboard-welcome-text\">{fibrePlans.length}</p>\n                </div>\n                <div className=\"h-12 w-12 rounded-full dashboard-welcome-icon flex items-center justify-center\">\n                  <Zap className=\"h-6 w-6 text-white\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"dashboard-chart-card shadow-lg\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col lg:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 dashboard-welcome-muted\" />\n                  <Input\n                    placeholder=\"Search plans...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10 dashboard-welcome-input\"\n                  />\n                </div>\n              </div>\n              <Select value={selectedProvider} onValueChange={setSelectedProvider}>\n                <SelectTrigger className=\"w-full lg:w-[200px] dashboard-welcome-input\">\n                  <SelectValue placeholder=\"Select Provider\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Providers</SelectItem>\n                  {getAllProviders().map(provider => (\n                    <SelectItem key={provider} value={provider.toLowerCase()}>{provider}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Select value={selectedPlanType} onValueChange={setSelectedPlanType}>\n                <SelectTrigger className=\"w-full lg:w-[200px] dashboard-welcome-input\">\n                  <SelectValue placeholder=\"Plan Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"basic\">Basic</SelectItem>\n                  <SelectItem value=\"standard\">Standard</SelectItem>\n                  <SelectItem value=\"premium\">Premium</SelectItem>\n                  <SelectItem value=\"lite\">Lite</SelectItem>\n                  <SelectItem value=\"ott\">OTT</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Plans Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3 dashboard-chart-card\">\n            <TabsTrigger value=\"iptv\" className=\"flex items-center gap-2 dashboard-welcome-text\">\n              <Tv className=\"h-4 w-4\" />\n              IPTV Plans\n            </TabsTrigger>\n            <TabsTrigger value=\"ott\" className=\"flex items-center gap-2 dashboard-welcome-text\">\n              <PlayCircle className=\"h-4 w-4\" />\n              OTT Plans\n            </TabsTrigger>\n            <TabsTrigger value=\"fibre\" className=\"flex items-center gap-2 dashboard-welcome-text\">\n              <Zap className=\"h-4 w-4\" />\n              Fibre Plans\n            </TabsTrigger>\n          </TabsList>\n\n          {/* IPTV Plans */}\n          <TabsContent value=\"iptv\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n              {filterPlans(iptvPlans).map((plan) => (\n                <Card key={plan.id} className=\"dashboard-chart-card shadow-lg hover:scale-105 transition-transform duration-300\">\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"h-12 w-12 rounded-lg dashboard-welcome-icon flex items-center justify-center\">\n                          <Tv className=\"h-6 w-6 text-white\" />\n                        </div>\n                        <div>\n                          <CardTitle className=\"text-lg dashboard-welcome-text\">{plan.name}</CardTitle>\n                          <p className=\"text-sm dashboard-welcome-muted\">{plan.provider}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(plan)}\n                          className=\"dashboard-welcome-icon\"\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(plan.id)}\n                          className=\"text-red-500 hover:text-red-700\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-2xl font-bold dashboard-welcome-text\">₹{plan.price}</span>\n                      <Badge className={`${\n                        plan.planType === 'premium' ? 'badge-super-admin' :\n                        plan.planType === 'standard' ? 'badge-admin' : 'badge-manager'\n                      }`}>\n                        {plan.planType} {plan.quality}\n                      </Badge>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div className=\"flex items-center gap-2\">\n                        <Monitor className=\"h-4 w-4 dashboard-welcome-icon\" />\n                        <span className=\"dashboard-welcome-text\">{plan.totalChannels} Channels</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Crown className=\"h-4 w-4 dashboard-welcome-icon\" />\n                        <span className=\"dashboard-welcome-text\">{plan.payChannels} Premium</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Radio className=\"h-4 w-4 dashboard-welcome-icon\" />\n                        <span className=\"dashboard-welcome-text\">{plan.freeToAirChannels} Free</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <TrendingUp className=\"h-4 w-4 dashboard-welcome-icon\" />\n                        <span className=\"dashboard-welcome-text\">{plan.lcoMarginPercent}% LCO</span>\n                      </div>\n                    </div>\n\n                    <p className=\"text-sm dashboard-welcome-muted\">{plan.description}</p>\n\n                    <div className=\"space-y-2\">\n                      <p className=\"text-sm font-medium dashboard-welcome-text\">Popular Channels:</p>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {plan.channelList.slice(0, 3).map((channel: string, idx: number) => (\n                          <Badge key={idx} variant=\"secondary\" className=\"text-xs\">\n                            {channel}\n                          </Badge>\n                        ))}\n                        {plan.channelList.length > 3 && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            +{plan.channelList.length - 3} more\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* OTT Plans */}\n          <TabsContent value=\"ott\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n              {filterPlans(ottPlans).map((plan) => (\n                <Card key={plan.id} className=\"dashboard-chart-card shadow-lg hover:scale-105 transition-transform duration-300\">\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"h-12 w-12 rounded-lg dashboard-welcome-icon flex items-center justify-center\">\n                          <PlayCircle className=\"h-6 w-6 text-white\" />\n                        </div>\n                        <div>\n                          <CardTitle className=\"text-lg dashboard-welcome-text\">{plan.title}</CardTitle>\n                          <p className=\"text-sm dashboard-welcome-muted\">{plan.provider}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(plan)}\n                          className=\"dashboard-welcome-icon\"\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(plan.id)}\n                          className=\"text-red-500 hover:text-red-700\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-2xl font-bold dashboard-welcome-text\">₹{plan.price}</span>\n                      <Badge className={`${plan.isUnlimited ? 'badge-super-admin' : 'badge-admin'}`}>\n                        {plan.isUnlimited ? 'Unlimited' : `${plan.dataLimitGB}GB`}\n                      </Badge>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div className=\"flex items-center gap-2\">\n                        <Wifi className=\"h-4 w-4 dashboard-welcome-icon\" />\n                        <span className=\"dashboard-welcome-text\">{plan.speedBeforeLimit}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"h-4 w-4 dashboard-welcome-icon\" />\n                        <span className=\"dashboard-welcome-text\">{plan.validity}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Shield className=\"h-4 w-4 dashboard-welcome-icon\" />\n                        <span className=\"dashboard-welcome-text\">{plan.speedAfterLimit} FUP</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Phone className=\"h-4 w-4 dashboard-welcome-icon\" />\n                        <span className=\"dashboard-welcome-text\">Calls</span>\n                      </div>\n                    </div>\n\n                    <p className=\"text-sm dashboard-welcome-muted\">{plan.description}</p>\n\n                    <div className=\"space-y-2\">\n                      <p className=\"text-sm font-medium dashboard-welcome-text\">OTT Apps Included:</p>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {plan.ottApps.slice(0, 3).map((app: string, idx: number) => (\n                          <Badge key={idx} variant=\"secondary\" className=\"text-xs\">\n                            {app}\n                          </Badge>\n                        ))}\n                        {plan.ottApps.length > 3 && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            +{plan.ottApps.length - 3} more\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n\n                    {plan.callBenefit && (\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Smartphone className=\"h-4 w-4 dashboard-welcome-icon\" />\n                        <span className=\"dashboard-welcome-text\">{plan.callBenefit}</span>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* Fibre Plans */}\n          <TabsContent value=\"fibre\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n              {filterPlans(fibrePlans).map((plan) => (\n                <Card key={plan.id} className=\"dashboard-chart-card shadow-lg hover:scale-105 transition-transform duration-300\">\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"h-12 w-12 rounded-lg dashboard-welcome-icon flex items-center justify-center\">\n                          <Zap className=\"h-6 w-6 text-white\" />\n                        </div>\n                        <div>\n                          <CardTitle className=\"text-lg dashboard-welcome-text\">{plan.title}</CardTitle>\n                          <p className=\"text-sm dashboard-welcome-muted\">{plan.provider}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(plan)}\n                          className=\"dashboard-welcome-icon\"\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(plan.id)}\n                          className=\"text-red-500 hover:text-red-700\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-2xl font-bold dashboard-welcome-text\">₹{plan.price}</span>\n                      <Badge className={`${\n                        plan.planType === 'Premium' ? 'badge-super-admin' :\n                        plan.planType === 'Standard' ? 'badge-admin' : 'badge-manager'\n                      }`}>\n                        {plan.planType}\n                      </Badge>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div className=\"flex items-center gap-2\">\n                        <Zap className=\"h-4 w-4 dashboard-welcome-icon\" />\n                        <span className=\"dashboard-welcome-text\">{plan.speed}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"h-4 w-4 dashboard-welcome-icon\" />\n                        <span className=\"dashboard-welcome-text\">{plan.validity}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Globe className=\"h-4 w-4 dashboard-welcome-icon\" />\n                        <span className=\"dashboard-welcome-text\">{plan.dataLimit}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Shield className=\"h-4 w-4 dashboard-welcome-icon\" />\n                        <span className=\"dashboard-welcome-text\">Fiber</span>\n                      </div>\n                    </div>\n\n                    <p className=\"text-sm dashboard-welcome-muted\">{plan.description}</p>\n\n                    {plan.benefits && (\n                      <div className=\"space-y-2\">\n                        <p className=\"text-sm font-medium dashboard-welcome-text\">Benefits:</p>\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {plan.benefits}\n                        </Badge>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        {/* Add Plan Dialog */}\n        <Dialog open={showAddDialog} onOpenChange={(open) => {\n          setShowAddDialog(open);\n          if (!open) resetForm();\n        }}>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto dashboard-chart-card\">\n            <DialogHeader>\n              <DialogTitle className=\"dashboard-welcome-text flex items-center gap-2\">\n                <Plus className=\"h-5 w-5 dashboard-welcome-icon\" />\n                Add New Service Plan\n              </DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-6\">\n              {/* Plan Type Selection */}\n              <div>\n                <Label className=\"dashboard-welcome-text text-lg font-semibold\">Plan Type</Label>\n                <Tabs value={selectedPlanTypeForAdd} onValueChange={setSelectedPlanTypeForAdd} className=\"mt-2\">\n                  <TabsList className=\"grid w-full grid-cols-3 dashboard-chart-card\">\n                    <TabsTrigger value=\"iptv\" className=\"flex items-center gap-2\">\n                      <Tv className=\"h-4 w-4\" />\n                      IPTV Plan\n                    </TabsTrigger>\n                    <TabsTrigger value=\"ott\" className=\"flex items-center gap-2\">\n                      <PlayCircle className=\"h-4 w-4\" />\n                      OTT Plan\n                    </TabsTrigger>\n                    <TabsTrigger value=\"fibre\" className=\"flex items-center gap-2\">\n                      <Zap className=\"h-4 w-4\" />\n                      Fibre Plan\n                    </TabsTrigger>\n                  </TabsList>\n                </Tabs>\n              </div>\n\n              {/* Common Fields */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"dashboard-welcome-text\">Provider</Label>\n                  <Input \n                    placeholder=\"Provider name\" \n                    className=\"dashboard-welcome-input\"\n                    value={formData.provider || \"\"}\n                    onChange={(e) => setFormData({...formData, provider: e.target.value})}\n                  />\n                </div>\n                <div>\n                  <Label className=\"dashboard-welcome-text\">Price (₹)</Label>\n                  <Input \n                    type=\"number\" \n                    placeholder=\"0\" \n                    className=\"dashboard-welcome-input\"\n                    value={formData.price || \"\"}\n                    onChange={(e) => setFormData({...formData, price: parseInt(e.target.value)})}\n                  />\n                </div>\n              </div>\n\n              {/* IPTV Specific Fields */}\n              {selectedPlanTypeForAdd === \"iptv\" && (\n                <div className=\"space-y-4 p-4 dashboard-stats-card rounded-lg\">\n                  <h3 className=\"dashboard-welcome-text font-semibold flex items-center gap-2\">\n                    <Tv className=\"h-4 w-4\" />\n                    IPTV Plan Details\n                  </h3>\n                  <div>\n                    <Label className=\"dashboard-welcome-text\">Plan Name</Label>\n                    <Input \n                      placeholder=\"e.g., Skypro Lite Play HD\" \n                      className=\"dashboard-welcome-input\"\n                      value={formData.name || \"\"}\n                      onChange={(e) => setFormData({...formData, name: e.target.value})}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">Total Channels</Label>\n                      <Input \n                        type=\"number\" \n                        placeholder=\"100\" \n                        className=\"dashboard-welcome-input\"\n                        value={formData.totalChannels || \"\"}\n                        onChange={(e) => setFormData({...formData, totalChannels: parseInt(e.target.value)})}\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">Pay Channels</Label>\n                      <Input \n                        type=\"number\" \n                        placeholder=\"80\" \n                        className=\"dashboard-welcome-input\"\n                        value={formData.payChannels || \"\"}\n                        onChange={(e) => setFormData({...formData, payChannels: parseInt(e.target.value)})}\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">Free to Air</Label>\n                      <Input \n                        type=\"number\" \n                        placeholder=\"100\" \n                        className=\"dashboard-welcome-input\"\n                        value={formData.freeToAirChannels || \"\"}\n                        onChange={(e) => setFormData({...formData, freeToAirChannels: parseInt(e.target.value)})}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">LCO Margin %</Label>\n                      <Input \n                        type=\"number\" \n                        placeholder=\"10\" \n                        className=\"dashboard-welcome-input\"\n                        value={formData.lcoMarginPercent || \"\"}\n                        onChange={(e) => setFormData({...formData, lcoMarginPercent: parseInt(e.target.value)})}\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">Distributor Margin %</Label>\n                      <Input \n                        type=\"number\" \n                        placeholder=\"5\" \n                        className=\"dashboard-welcome-input\"\n                        value={formData.distributorMarginPercent || \"\"}\n                        onChange={(e) => setFormData({...formData, distributorMarginPercent: parseInt(e.target.value)})}\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">Quality</Label>\n                      <Select value={formData.quality || \"\"} onValueChange={(value) => setFormData({...formData, quality: value})}>\n                        <SelectTrigger className=\"dashboard-welcome-input\">\n                          <SelectValue placeholder=\"Select quality\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"SD\">SD</SelectItem>\n                          <SelectItem value=\"HD\">HD</SelectItem>\n                          <SelectItem value=\"4K\">4K</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"dashboard-welcome-text\">Plan Type</Label>\n                    <Select value={formData.planType || \"\"} onValueChange={(value) => setFormData({...formData, planType: value})}>\n                      <SelectTrigger className=\"dashboard-welcome-input\">\n                        <SelectValue placeholder=\"Select plan type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"lite\">Lite</SelectItem>\n                        <SelectItem value=\"standard\">Standard</SelectItem>\n                        <SelectItem value=\"premium\">Premium</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label className=\"dashboard-welcome-text\">Channel List (comma separated)</Label>\n                    <Textarea \n                      placeholder=\"Star Plus, Zee TV, Sony Entertainment...\" \n                      className=\"dashboard-welcome-input\"\n                      value={formData.channelList?.join(\", \") || \"\"}\n                      onChange={(e) => setFormData({...formData, channelList: e.target.value.split(\", \").filter(c => c.trim())})}\n                    />\n                  </div>\n                </div>\n              )}\n\n              {/* OTT Specific Fields */}\n              {selectedPlanTypeForAdd === \"ott\" && (\n                <div className=\"space-y-4 p-4 dashboard-stats-card rounded-lg\">\n                  <h3 className=\"dashboard-welcome-text font-semibold flex items-center gap-2\">\n                    <PlayCircle className=\"h-4 w-4\" />\n                    OTT Plan Details\n                  </h3>\n                  <div>\n                    <Label className=\"dashboard-welcome-text\">Plan Title</Label>\n                    <Input \n                      placeholder=\"e.g., Fibre Premium Plus OTT 1599\" \n                      className=\"dashboard-welcome-input\"\n                      value={formData.title || \"\"}\n                      onChange={(e) => setFormData({...formData, title: e.target.value})}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">Speed Before Limit</Label>\n                      <Input \n                        placeholder=\"1000 Mbps\" \n                        className=\"dashboard-welcome-input\"\n                        value={formData.speedBeforeLimit || \"\"}\n                        onChange={(e) => setFormData({...formData, speedBeforeLimit: e.target.value})}\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">Speed After Limit</Label>\n                      <Input \n                        placeholder=\"4 Mbps\" \n                        className=\"dashboard-welcome-input\"\n                        value={formData.speedAfterLimit || \"\"}\n                        onChange={(e) => setFormData({...formData, speedAfterLimit: e.target.value})}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">Data Limit (GB)</Label>\n                      <Input \n                        type=\"number\" \n                        placeholder=\"3000\" \n                        className=\"dashboard-welcome-input\"\n                        value={formData.dataLimitGB || \"\"}\n                        onChange={(e) => setFormData({...formData, dataLimitGB: parseInt(e.target.value)})}\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">Validity</Label>\n                      <Input \n                        placeholder=\"1 Month\" \n                        className=\"dashboard-welcome-input\"\n                        value={formData.validity || \"\"}\n                        onChange={(e) => setFormData({...formData, validity: e.target.value})}\n                      />\n                    </div>\n                    <div className=\"flex items-center space-x-2 pt-6\">\n                      <Checkbox \n                        checked={formData.isUnlimited || false}\n                        onCheckedChange={(checked) => setFormData({...formData, isUnlimited: checked})}\n                      />\n                      <Label className=\"dashboard-welcome-text\">Unlimited</Label>\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"dashboard-welcome-text\">Call Benefits</Label>\n                    <Input \n                      placeholder=\"Unlimited calls to any Network\" \n                      className=\"dashboard-welcome-input\"\n                      value={formData.callBenefit || \"\"}\n                      onChange={(e) => setFormData({...formData, callBenefit: e.target.value})}\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"dashboard-welcome-text\">OTT Apps (comma separated)</Label>\n                    <Textarea \n                      placeholder=\"Hotstar, Hungama, Shemaroo, Lionsgate...\" \n                      className=\"dashboard-welcome-input\"\n                      value={formData.ottApps?.join(\", \") || \"\"}\n                      onChange={(e) => setFormData({...formData, ottApps: e.target.value.split(\", \").filter(a => a.trim())})}\n                    />\n                  </div>\n                </div>\n              )}\n\n              {/* Fibre Specific Fields */}\n              {selectedPlanTypeForAdd === \"fibre\" && (\n                <div className=\"space-y-4 p-4 dashboard-stats-card rounded-lg\">\n                  <h3 className=\"dashboard-welcome-text font-semibold flex items-center gap-2\">\n                    <Zap className=\"h-4 w-4\" />\n                    Fibre Plan Details\n                  </h3>\n                  <div>\n                    <Label className=\"dashboard-welcome-text\">Plan Title</Label>\n                    <Input \n                      placeholder=\"e.g., JioFiber Gold Plan - 1 Year\" \n                      className=\"dashboard-welcome-input\"\n                      value={formData.title || \"\"}\n                      onChange={(e) => setFormData({...formData, title: e.target.value})}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">Speed</Label>\n                      <Input \n                        placeholder=\"300 Mbps\" \n                        className=\"dashboard-welcome-input\"\n                        value={formData.speed || \"\"}\n                        onChange={(e) => setFormData({...formData, speed: e.target.value})}\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">Validity</Label>\n                      <Input \n                        placeholder=\"12 Months\" \n                        className=\"dashboard-welcome-input\"\n                        value={formData.validity || \"\"}\n                        onChange={(e) => setFormData({...formData, validity: e.target.value})}\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">Data Limit</Label>\n                      <Input \n                        placeholder=\"Unlimited\" \n                        className=\"dashboard-welcome-input\"\n                        value={formData.dataLimit || \"\"}\n                        onChange={(e) => setFormData({...formData, dataLimit: e.target.value})}\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"dashboard-welcome-text\">Plan Type</Label>\n                    <Select value={formData.planType || \"\"} onValueChange={(value) => setFormData({...formData, planType: value})}>\n                      <SelectTrigger className=\"dashboard-welcome-input\">\n                        <SelectValue placeholder=\"Select plan type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Basic\">Basic</SelectItem>\n                        <SelectItem value=\"Standard\">Standard</SelectItem>\n                        <SelectItem value=\"Premium\">Premium</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label className=\"dashboard-welcome-text\">Benefits</Label>\n                    <Input \n                      placeholder=\"Netflix + Prime + Disney+ Hotstar\" \n                      className=\"dashboard-welcome-input\"\n                      value={formData.benefits || \"\"}\n                      onChange={(e) => setFormData({...formData, benefits: e.target.value})}\n                    />\n                  </div>\n                </div>\n              )}\n\n              {/* Common Description */}\n              <div>\n                <Label className=\"dashboard-welcome-text\">Description</Label>\n                <Textarea \n                  placeholder=\"Plan description...\" \n                  className=\"dashboard-welcome-input\"\n                  value={formData.description || \"\"}\n                  onChange={(e) => setFormData({...formData, description: e.target.value})}\n                />\n              </div>\n\n              {/* Logo Upload */}\n              <div className=\"space-y-4\">\n                <Label className=\"dashboard-welcome-text text-lg font-semibold\">Provider Logo</Label>\n                \n                {!logoPreview ? (\n                  <div className=\"border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-8 text-center hover:border-gray-400 dark:hover:border-gray-500 transition-colors\">\n                    <div className=\"flex flex-col items-center gap-4\">\n                      <div className=\"h-12 w-12 rounded-full dashboard-welcome-icon flex items-center justify-center\">\n                        <Upload className=\"h-6 w-6 text-white\" />\n                      </div>\n                      <div>\n                        <p className=\"dashboard-welcome-text font-medium\">Upload provider logo</p>\n                        <p className=\"text-sm dashboard-welcome-muted\">PNG, JPG, GIF up to 10MB</p>\n                      </div>\n                      <label className=\"cursor-pointer\">\n                        <span className=\"inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors\">\n                          <Image className=\"h-4 w-4 mr-2\" />\n                          Choose File\n                        </span>\n                        <input\n                          type=\"file\"\n                          className=\"hidden\"\n                          accept=\"image/*\"\n                          onChange={handleFileUpload}\n                        />\n                      </label>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"relative inline-block\">\n                    <div className=\"dashboard-stats-card rounded-lg p-4\">\n                      <div className=\"flex items-center gap-4\">\n                        <img \n                          src={logoPreview} \n                          alt=\"Logo preview\" \n                          className=\"h-16 w-16 object-cover rounded-lg border dashboard-welcome-muted\"\n                        />\n                        <div className=\"flex-1\">\n                          <p className=\"dashboard-welcome-text font-medium\">\n                            {logoFile?.name}\n                          </p>\n                          <p className=\"text-sm dashboard-welcome-muted\">\n                            {logoFile ? (logoFile.size / 1024 / 1024).toFixed(2) : '0'} MB\n                          </p>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={removeUploadedFile}\n                          className=\"text-red-500 hover:text-red-700\"\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"flex justify-end gap-4\">\n                <Button variant=\"outline\" onClick={() => setShowAddDialog(false)}>\n                  Cancel\n                </Button>\n                <Button onClick={handleAddPlan} className=\"dashboard-stats-card\">\n                  <span className=\"dashboard-welcome-text\">Add Plan</span>\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Plan Dialog */}\n        <Dialog open={showEditDialog} onOpenChange={(open) => {\n          setShowEditDialog(open);\n          if (!open) {\n            setEditingPlan(null);\n            setFormData({});\n          }\n        }}>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto dashboard-chart-card\">\n            <DialogHeader>\n              <DialogTitle className=\"dashboard-welcome-text flex items-center gap-2\">\n                <Edit className=\"h-5 w-5 dashboard-welcome-icon\" />\n                Edit {editingPlan?.name || editingPlan?.title || 'Plan'}\n              </DialogTitle>\n            </DialogHeader>\n            {editingPlan && (\n              <div className=\"space-y-6\">\n                {/* Common Fields */}\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"dashboard-welcome-text\">Provider</Label>\n                    <Input \n                      value={formData.provider || \"\"} \n                      className=\"dashboard-welcome-input\"\n                      onChange={(e) => setFormData({...formData, provider: e.target.value})}\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"dashboard-welcome-text\">Price (₹)</Label>\n                    <Input \n                      type=\"number\" \n                      value={formData.price || \"\"} \n                      className=\"dashboard-welcome-input\"\n                      onChange={(e) => setFormData({...formData, price: parseInt(e.target.value)})}\n                    />\n                  </div>\n                </div>\n\n                {/* IPTV Fields */}\n                {editingPlan.hasOwnProperty('totalChannels') && (\n                  <div className=\"space-y-4 p-4 dashboard-stats-card rounded-lg\">\n                    <h3 className=\"dashboard-welcome-text font-semibold flex items-center gap-2\">\n                      <Tv className=\"h-4 w-4\" />\n                      IPTV Plan Details\n                    </h3>\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">Plan Name</Label>\n                      <Input \n                        value={formData.name || \"\"} \n                        className=\"dashboard-welcome-input\"\n                        onChange={(e) => setFormData({...formData, name: e.target.value})}\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <div>\n                        <Label className=\"dashboard-welcome-text\">Total Channels</Label>\n                        <Input \n                          type=\"number\" \n                          value={formData.totalChannels || \"\"} \n                          className=\"dashboard-welcome-input\"\n                          onChange={(e) => setFormData({...formData, totalChannels: parseInt(e.target.value)})}\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"dashboard-welcome-text\">Pay Channels</Label>\n                        <Input \n                          type=\"number\" \n                          value={formData.payChannels || \"\"} \n                          className=\"dashboard-welcome-input\"\n                          onChange={(e) => setFormData({...formData, payChannels: parseInt(e.target.value)})}\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"dashboard-welcome-text\">Free to Air</Label>\n                        <Input \n                          type=\"number\" \n                          value={formData.freeToAirChannels || \"\"} \n                          className=\"dashboard-welcome-input\"\n                          onChange={(e) => setFormData({...formData, freeToAirChannels: parseInt(e.target.value)})}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <div>\n                        <Label className=\"dashboard-welcome-text\">LCO Margin %</Label>\n                        <Input \n                          type=\"number\" \n                          value={formData.lcoMarginPercent || \"\"} \n                          className=\"dashboard-welcome-input\"\n                          onChange={(e) => setFormData({...formData, lcoMarginPercent: parseInt(e.target.value)})}\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"dashboard-welcome-text\">Distributor Margin %</Label>\n                        <Input \n                          type=\"number\" \n                          value={formData.distributorMarginPercent || \"\"} \n                          className=\"dashboard-welcome-input\"\n                          onChange={(e) => setFormData({...formData, distributorMarginPercent: parseInt(e.target.value)})}\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"dashboard-welcome-text\">Quality</Label>\n                        <Select value={formData.quality || \"\"} onValueChange={(value) => setFormData({...formData, quality: value})}>\n                          <SelectTrigger className=\"dashboard-welcome-input\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"SD\">SD</SelectItem>\n                            <SelectItem value=\"HD\">HD</SelectItem>\n                            <SelectItem value=\"4K\">4K</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">Plan Type</Label>\n                      <Select value={formData.planType || \"\"} onValueChange={(value) => setFormData({...formData, planType: value})}>\n                        <SelectTrigger className=\"dashboard-welcome-input\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"lite\">Lite</SelectItem>\n                          <SelectItem value=\"standard\">Standard</SelectItem>\n                          <SelectItem value=\"premium\">Premium</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">Channel List (comma separated)</Label>\n                      <Textarea \n                        value={formData.channelList?.join(\", \") || \"\"} \n                        className=\"dashboard-welcome-input\"\n                        onChange={(e) => setFormData({...formData, channelList: e.target.value.split(\", \").filter(c => c.trim())})}\n                      />\n                    </div>\n                  </div>\n                )}\n\n                {/* OTT Fields */}\n                {editingPlan.hasOwnProperty('speedBeforeLimit') && (\n                  <div className=\"space-y-4 p-4 dashboard-stats-card rounded-lg\">\n                    <h3 className=\"dashboard-welcome-text font-semibold flex items-center gap-2\">\n                      <PlayCircle className=\"h-4 w-4\" />\n                      OTT Plan Details\n                    </h3>\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">Plan Title</Label>\n                      <Input \n                        value={formData.title || \"\"} \n                        className=\"dashboard-welcome-input\"\n                        onChange={(e) => setFormData({...formData, title: e.target.value})}\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label className=\"dashboard-welcome-text\">Speed Before Limit</Label>\n                        <Input \n                          value={formData.speedBeforeLimit || \"\"} \n                          className=\"dashboard-welcome-input\"\n                          onChange={(e) => setFormData({...formData, speedBeforeLimit: e.target.value})}\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"dashboard-welcome-text\">Speed After Limit</Label>\n                        <Input \n                          value={formData.speedAfterLimit || \"\"} \n                          className=\"dashboard-welcome-input\"\n                          onChange={(e) => setFormData({...formData, speedAfterLimit: e.target.value})}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <div>\n                        <Label className=\"dashboard-welcome-text\">Data Limit (GB)</Label>\n                        <Input \n                          type=\"number\" \n                          value={formData.dataLimitGB || \"\"} \n                          className=\"dashboard-welcome-input\"\n                          onChange={(e) => setFormData({...formData, dataLimitGB: parseInt(e.target.value)})}\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"dashboard-welcome-text\">Validity</Label>\n                        <Input \n                          value={formData.validity || \"\"} \n                          className=\"dashboard-welcome-input\"\n                          onChange={(e) => setFormData({...formData, validity: e.target.value})}\n                        />\n                      </div>\n                      <div className=\"flex items-center space-x-2 pt-6\">\n                        <Checkbox \n                          checked={formData.isUnlimited || false}\n                          onCheckedChange={(checked) => setFormData({...formData, isUnlimited: checked})}\n                        />\n                        <Label className=\"dashboard-welcome-text\">Unlimited</Label>\n                      </div>\n                    </div>\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">Call Benefits</Label>\n                      <Input \n                        value={formData.callBenefit || \"\"} \n                        className=\"dashboard-welcome-input\"\n                        onChange={(e) => setFormData({...formData, callBenefit: e.target.value})}\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">OTT Apps (comma separated)</Label>\n                      <Textarea \n                        value={formData.ottApps?.join(\", \") || \"\"} \n                        className=\"dashboard-welcome-input\"\n                        onChange={(e) => setFormData({...formData, ottApps: e.target.value.split(\", \").filter(a => a.trim())})}\n                      />\n                    </div>\n                  </div>\n                )}\n\n                {/* Fibre Fields */}\n                {editingPlan.hasOwnProperty('speed') && !editingPlan.hasOwnProperty('speedBeforeLimit') && (\n                  <div className=\"space-y-4 p-4 dashboard-stats-card rounded-lg\">\n                    <h3 className=\"dashboard-welcome-text font-semibold flex items-center gap-2\">\n                      <Zap className=\"h-4 w-4\" />\n                      Fibre Plan Details\n                    </h3>\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">Plan Title</Label>\n                      <Input \n                        value={formData.title || \"\"} \n                        className=\"dashboard-welcome-input\"\n                        onChange={(e) => setFormData({...formData, title: e.target.value})}\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <div>\n                        <Label className=\"dashboard-welcome-text\">Speed</Label>\n                        <Input \n                          value={formData.speed || \"\"} \n                          className=\"dashboard-welcome-input\"\n                          onChange={(e) => setFormData({...formData, speed: e.target.value})}\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"dashboard-welcome-text\">Validity</Label>\n                        <Input \n                          value={formData.validity || \"\"} \n                          className=\"dashboard-welcome-input\"\n                          onChange={(e) => setFormData({...formData, validity: e.target.value})}\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"dashboard-welcome-text\">Data Limit</Label>\n                        <Input \n                          value={formData.dataLimit || \"\"} \n                          className=\"dashboard-welcome-input\"\n                          onChange={(e) => setFormData({...formData, dataLimit: e.target.value})}\n                        />\n                      </div>\n                    </div>\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">Plan Type</Label>\n                      <Select value={formData.planType || \"\"} onValueChange={(value) => setFormData({...formData, planType: value})}>\n                        <SelectTrigger className=\"dashboard-welcome-input\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"Basic\">Basic</SelectItem>\n                          <SelectItem value=\"Standard\">Standard</SelectItem>\n                          <SelectItem value=\"Premium\">Premium</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label className=\"dashboard-welcome-text\">Benefits</Label>\n                      <Input \n                        value={formData.benefits || \"\"} \n                        className=\"dashboard-welcome-input\"\n                        onChange={(e) => setFormData({...formData, benefits: e.target.value})}\n                      />\n                    </div>\n                  </div>\n                )}\n\n                {/* Common Fields */}\n                <div>\n                  <Label className=\"dashboard-welcome-text\">Description</Label>\n                  <Textarea \n                    value={formData.description || \"\"} \n                    className=\"dashboard-welcome-input\"\n                    onChange={(e) => setFormData({...formData, description: e.target.value})}\n                  />\n                </div>\n\n                {/* Logo Upload for Edit */}\n                <div className=\"space-y-4\">\n                  <Label className=\"dashboard-welcome-text text-lg font-semibold\">Provider Logo</Label>\n                  \n                  {!logoPreview && !formData.logo ? (\n                    <div className=\"border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-8 text-center hover:border-gray-400 dark:hover:border-gray-500 transition-colors\">\n                      <div className=\"flex flex-col items-center gap-4\">\n                        <div className=\"h-12 w-12 rounded-full dashboard-welcome-icon flex items-center justify-center\">\n                          <Upload className=\"h-6 w-6 text-white\" />\n                        </div>\n                        <div>\n                          <p className=\"dashboard-welcome-text font-medium\">Upload new logo</p>\n                          <p className=\"text-sm dashboard-welcome-muted\">PNG, JPG, GIF up to 10MB</p>\n                        </div>\n                        <label className=\"cursor-pointer\">\n                          <span className=\"inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors\">\n                            <Image className=\"h-4 w-4 mr-2\" />\n                            Choose File\n                          </span>\n                          <input\n                            type=\"file\"\n                            className=\"hidden\"\n                            accept=\"image/*\"\n                            onChange={handleFileUpload}\n                          />\n                        </label>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"relative inline-block\">\n                      <div className=\"dashboard-stats-card rounded-lg p-4\">\n                        <div className=\"flex items-center gap-4\">\n                          <img \n                            src={logoPreview || formData.logo} \n                            alt=\"Logo preview\" \n                            className=\"h-16 w-16 object-cover rounded-lg border dashboard-welcome-muted\"\n                          />\n                          <div className=\"flex-1\">\n                            <p className=\"dashboard-welcome-text font-medium\">\n                              {logoFile?.name || 'Current logo'}\n                            </p>\n                            <p className=\"text-sm dashboard-welcome-muted\">\n                              {logoFile ? (logoFile.size / 1024 / 1024).toFixed(2) + ' MB' : 'Existing file'}\n                            </p>\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <label className=\"cursor-pointer\">\n                              <span className=\"inline-flex items-center px-3 py-1 bg-gray-500 hover:bg-gray-600 text-white rounded text-sm transition-colors\">\n                                Change\n                              </span>\n                              <input\n                                type=\"file\"\n                                className=\"hidden\"\n                                accept=\"image/*\"\n                                onChange={handleFileUpload}\n                              />\n                            </label>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={removeUploadedFile}\n                              className=\"text-red-500 hover:text-red-700\"\n                            >\n                              <X className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex items-center gap-2\">\n                  <Checkbox \n                    checked={formData.isActive !== undefined ? formData.isActive : true}\n                    onCheckedChange={(checked) => setFormData({...formData, isActive: checked})}\n                  />\n                  <Label className=\"dashboard-welcome-text\">Active Plan</Label>\n                </div>\n\n                <div className=\"flex justify-end gap-4\">\n                  <Button variant=\"outline\" onClick={() => setShowEditDialog(false)}>\n                    Cancel\n                  </Button>\n                  <Button onClick={handleUpdatePlan} className=\"dashboard-stats-card\">\n                    <span className=\"dashboard-welcome-text\">Save Changes</span>\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":64438},"client/src/pages/products.tsx":{"content":"import { useState } from \"react\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { \n  Package, \n  ShoppingCart, \n  Star, \n  BarChart3, \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye,\n  Filter,\n  Download,\n  TrendingUp,\n  TrendingDown,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Truck,\n  User,\n  Settings\n} from \"lucide-react\";\nimport { dummyProducts, dummyOrders, dummyProductFeedback, type Product, type Order, type ProductFeedback } from \"@/lib/dummyData\";\n\nexport function Products() {\n  const [activeTab, setActiveTab] = useState(\"analytics\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [isAddProductOpen, setIsAddProductOpen] = useState(false);\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n\n  // Filter products based on search and filters\n  const filteredProducts = dummyProducts.filter(product => {\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         product.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         product.model.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = categoryFilter === \"all\" || product.category === categoryFilter;\n    const matchesType = typeFilter === \"all\" || product.productType === typeFilter;\n    const matchesStatus = statusFilter === \"all\" || product.status === statusFilter;\n    \n    return matchesSearch && matchesCategory && matchesType && matchesStatus;\n  });\n\n  // Calculate analytics data\n  const totalProducts = dummyProducts.length;\n  const activeProducts = dummyProducts.filter(p => p.status === \"active\").length;\n  const lowStockProducts = dummyProducts.filter(p => p.stock <= p.lowStockThreshold).length;\n  const totalInventoryValue = dummyProducts.reduce((sum, p) => sum + (p.price * p.stock), 0);\n  \n  const totalOrders = dummyOrders.length;\n  const pendingOrders = dummyOrders.filter(o => o.status === \"pending\").length;\n  const completedOrders = dummyOrders.filter(o => o.status === \"delivered\").length;\n  const totalOrderValue = dummyOrders.reduce((sum, o) => sum + o.totalAmount, 0);\n\n  const avgRating = dummyProductFeedback.reduce((sum, f) => sum + f.rating, 0) / dummyProductFeedback.length;\n  const totalReviews = dummyProductFeedback.length;\n  const positiveReviews = dummyProductFeedback.filter(f => f.rating >= 4).length;\n\n  return (\n    <MainLayout title=\"Product Management\">\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Product Management</h1>\n            <p className=\"text-muted-foreground\">\n              Manage WiFi equipment inventory, orders, and customer feedback\n            </p>\n          </div>\n        </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"analytics\" className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-4 w-4\" />\n            Analytics\n          </TabsTrigger>\n          <TabsTrigger value=\"products\" className=\"flex items-center gap-2\">\n            <Package className=\"h-4 w-4\" />\n            Products\n          </TabsTrigger>\n          <TabsTrigger value=\"orders\" className=\"flex items-center gap-2\">\n            <ShoppingCart className=\"h-4 w-4\" />\n            Orders\n          </TabsTrigger>\n          <TabsTrigger value=\"feedback\" className=\"flex items-center gap-2\">\n            <Star className=\"h-4 w-4\" />\n            Product Feedback\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Analytics Tab */}\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Products</CardTitle>\n                <Package className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{totalProducts}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  <span className=\"text-green-600\">{activeProducts} active</span>\n                </p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Low Stock Alerts</CardTitle>\n                <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-orange-600\">{lowStockProducts}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Products below threshold\n                </p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Inventory Value</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-green-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">₹{totalInventoryValue.toLocaleString()}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Total stock value\n                </p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Avg Rating</CardTitle>\n                <Star className=\"h-4 w-4 text-yellow-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{avgRating.toFixed(1)}/5</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  From {totalReviews} reviews\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Orders</CardTitle>\n                <ShoppingCart className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{totalOrders}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  <span className=\"text-green-600\">{completedOrders} completed</span>\n                </p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Pending Orders</CardTitle>\n                <Clock className=\"h-4 w-4 text-orange-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-orange-600\">{pendingOrders}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Awaiting processing\n                </p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Order Value</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-green-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">₹{totalOrderValue.toLocaleString()}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Total order revenue\n                </p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Positive Reviews</CardTitle>\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\">{((positiveReviews/totalReviews)*100).toFixed(0)}%</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  4+ star ratings\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Category Distribution */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Product Category Distribution</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {Array.from(new Set(dummyProducts.map(p => p.category))).map(category => {\n                  const count = dummyProducts.filter(p => p.category === category).length;\n                  const percentage = (count / totalProducts) * 100;\n                  return (\n                    <div key={category} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"outline\" className=\"capitalize\">{category.replace('-', ' ')}</Badge>\n                        <span className=\"text-sm text-muted-foreground\">{count} products</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-20 bg-secondary rounded-full h-2\">\n                          <div \n                            className=\"bg-primary h-2 rounded-full\" \n                            style={{ width: `${percentage}%` }}\n                          />\n                        </div>\n                        <span className=\"text-sm font-medium\">{percentage.toFixed(0)}%</span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Products Tab */}\n        <TabsContent value=\"products\" className=\"space-y-6\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search products...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-9\"\n              />\n            </div>\n            <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n              <SelectTrigger className=\"w-[150px]\">\n                <SelectValue placeholder=\"Category\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                <SelectItem value=\"router\">Router</SelectItem>\n                <SelectItem value=\"modem\">Modem</SelectItem>\n                <SelectItem value=\"cable\">Cable</SelectItem>\n                <SelectItem value=\"switch\">Switch</SelectItem>\n                <SelectItem value=\"extender\">Extender</SelectItem>\n                <SelectItem value=\"fiber-cable\">Fiber Cable</SelectItem>\n                <SelectItem value=\"power-supply\">Power Supply</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger className=\"w-[150px]\">\n                <SelectValue placeholder=\"Type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"user-sale\">User Sale</SelectItem>\n                <SelectItem value=\"engineer-only\">Engineer Only</SelectItem>\n              </SelectContent>\n            </Select>\n            <Dialog open={isAddProductOpen} onOpenChange={setIsAddProductOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Product\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>Add New Product</DialogTitle>\n                  <DialogDescription>\n                    Add a new WiFi equipment product to your inventory.\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"grid gap-4 py-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"name\">Product Name</Label>\n                      <Input id=\"name\" placeholder=\"Enter product name\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"model\">Model</Label>\n                      <Input id=\"model\" placeholder=\"Enter model number\" />\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"brand\">Brand</Label>\n                      <Input id=\"brand\" placeholder=\"Enter brand name\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"category\">Category</Label>\n                      <Select>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select category\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"router\">Router</SelectItem>\n                          <SelectItem value=\"modem\">Modem</SelectItem>\n                          <SelectItem value=\"cable\">Cable</SelectItem>\n                          <SelectItem value=\"switch\">Switch</SelectItem>\n                          <SelectItem value=\"extender\">Extender</SelectItem>\n                          <SelectItem value=\"fiber-cable\">Fiber Cable</SelectItem>\n                          <SelectItem value=\"power-supply\">Power Supply</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"type\">Product Type</Label>\n                      <Select>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"user-sale\">User Sale</SelectItem>\n                          <SelectItem value=\"engineer-only\">Engineer Only</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"price\">Price (₹)</Label>\n                      <Input id=\"price\" type=\"number\" placeholder=\"Enter price\" />\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"stock\">Stock Quantity</Label>\n                      <Input id=\"stock\" type=\"number\" placeholder=\"Enter stock quantity\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"threshold\">Low Stock Threshold</Label>\n                      <Input id=\"threshold\" type=\"number\" placeholder=\"Enter threshold\" />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"description\">Description</Label>\n                    <Textarea id=\"description\" placeholder=\"Enter product description\" rows={3} />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"supplier\">Supplier</Label>\n                      <Input id=\"supplier\" placeholder=\"Enter supplier name\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"warranty\">Warranty</Label>\n                      <Input id=\"warranty\" placeholder=\"Enter warranty period\" />\n                    </div>\n                  </div>\n                </div>\n                <DialogFooter>\n                  <Button type=\"submit\" onClick={() => setIsAddProductOpen(false)}>\n                    Add Product\n                  </Button>\n                </DialogFooter>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Product</TableHead>\n                  <TableHead>Category</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Stock</TableHead>\n                  <TableHead>Price</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredProducts.map((product) => (\n                  <TableRow key={product.id}>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{product.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">{product.brand} - {product.model}</div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" className=\"capitalize\">\n                        {product.category.replace('-', ' ')}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={product.productType === 'user-sale' ? 'default' : 'secondary'}>\n                        {product.productType === 'user-sale' ? 'User Sale' : 'Engineer Only'}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <span className={product.stock <= product.lowStockThreshold ? 'text-red-600 font-medium' : ''}>\n                          {product.stock}\n                        </span>\n                        {product.stock <= product.lowStockThreshold && (\n                          <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>₹{product.price.toLocaleString()}</TableCell>\n                    <TableCell>\n                      <Badge variant={product.status === 'active' ? 'default' : 'secondary'}>\n                        {product.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </Card>\n        </TabsContent>\n\n        {/* Orders Tab */}\n        <TabsContent value=\"orders\" className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input placeholder=\"Search orders...\" className=\"pl-9 w-80\" />\n            </div>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" size=\"sm\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                Filter\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </div>\n\n          <Card>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Order #</TableHead>\n                  <TableHead>Product</TableHead>\n                  <TableHead>Customer/Engineer</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Quantity</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Priority</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {dummyOrders.map((order) => (\n                  <TableRow key={order.id}>\n                    <TableCell className=\"font-medium\">{order.orderNumber}</TableCell>\n                    <TableCell>{order.productName}</TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        {order.orderType === 'user-purchase' ? (\n                          <User className=\"h-4 w-4 text-blue-500\" />\n                        ) : (\n                          <Settings className=\"h-4 w-4 text-green-500\" />\n                        )}\n                        <span>{order.customerName || order.engineerName}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={order.orderType === 'user-purchase' ? 'default' : 'secondary'}>\n                        {order.orderType === 'user-purchase' ? 'Customer' : 'Engineer'}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>{order.quantity}</TableCell>\n                    <TableCell>₹{order.totalAmount.toLocaleString()}</TableCell>\n                    <TableCell>\n                      <Badge \n                        variant={\n                          order.status === 'delivered' ? 'default' : \n                          order.status === 'pending' ? 'destructive' : \n                          'secondary'\n                        }\n                      >\n                        {order.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant={\n                          order.priority === 'urgent' ? 'destructive' : \n                          order.priority === 'high' ? 'default' : \n                          'secondary'\n                        }\n                      >\n                        {order.priority}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Truck className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </Card>\n        </TabsContent>\n\n        {/* Product Feedback Tab */}\n        <TabsContent value=\"feedback\" className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input placeholder=\"Search feedback...\" className=\"pl-9 w-80\" />\n            </div>\n          </div>\n\n          <div className=\"grid gap-6\">\n            {dummyProductFeedback.map((feedback) => (\n              <Card key={feedback.id}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div>\n                      <h3 className=\"font-semibold text-lg\">{feedback.title}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{feedback.productName}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        by {feedback.customerName || feedback.engineerName} • {new Date(feedback.createdAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"flex items-center\">\n                        {Array.from({ length: 5 }).map((_, i) => (\n                          <Star \n                            key={i} \n                            className={`h-4 w-4 ${i < feedback.rating ? 'text-yellow-400 fill-current' : 'text-gray-300'}`} \n                          />\n                        ))}\n                        <span className=\"ml-2 text-sm font-medium\">{feedback.rating}/5</span>\n                      </div>\n                      {feedback.verifiedPurchase && (\n                        <Badge variant=\"secondary\">Verified Purchase</Badge>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <p className=\"text-muted-foreground mb-4\">{feedback.comment}</p>\n                  \n                  {feedback.pros.length > 0 && (\n                    <div className=\"mb-3\">\n                      <h4 className=\"text-sm font-medium text-green-600 mb-2\">Pros:</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {feedback.pros.map((pro, index) => (\n                          <Badge key={index} variant=\"outline\" className=\"text-green-600\">\n                            + {pro}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {feedback.cons.length > 0 && (\n                    <div className=\"mb-3\">\n                      <h4 className=\"text-sm font-medium text-red-600 mb-2\">Cons:</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {feedback.cons.map((con, index) => (\n                          <Badge key={index} variant=\"outline\" className=\"text-red-600\">\n                            - {con}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex items-center justify-between pt-4 border-t\">\n                    <div className=\"flex items-center gap-4\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        {feedback.helpfulVotes} people found this helpful\n                      </span>\n                      {feedback.wouldRecommend && (\n                        <Badge variant=\"outline\" className=\"text-green-600\">\n                          Would Recommend\n                        </Badge>\n                      )}\n                    </div>\n                    <Button variant=\"ghost\" size=\"sm\">\n                      Helpful\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":29198},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Settings as SettingsIcon, \n  Building2, \n  Users, \n  Shield, \n  Bell, \n  Palette, \n  Globe, \n  Mail, \n  Phone, \n  Clock, \n  Database, \n  Wifi, \n  Activity, \n  Security, \n  Check, \n  X, \n  Save, \n  RefreshCw,\n  AlertTriangle,\n  Info,\n  Lock,\n  Eye,\n  EyeOff,\n  Upload,\n  Download,\n  Trash2,\n  Plus,\n  Edit3\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\n\n// Schema definitions for form validation\nconst companySettingsSchema = z.object({\n  companyName: z.string().min(1, \"Company name is required\"),\n  companyLogo: z.string().optional(),\n  address: z.string().min(1, \"Address is required\"),\n  city: z.string().min(1, \"City is required\"),\n  state: z.string().min(1, \"State is required\"),\n  zipCode: z.string().min(1, \"ZIP code is required\"),\n  country: z.string().min(1, \"Country is required\"),\n  website: z.string().url(\"Invalid URL\").optional(),\n  description: z.string().optional(),\n});\n\nconst contactSettingsSchema = z.object({\n  supportEmail: z.string().email(\"Invalid email\"),\n  supportPhone: z.string().min(1, \"Phone is required\"),\n  emergencyPhone: z.string().optional(),\n  businessHours: z.string().min(1, \"Business hours required\"),\n  timezone: z.string().min(1, \"Timezone is required\"),\n});\n\nconst securitySettingsSchema = z.object({\n  passwordMinLength: z.number().min(6, \"Minimum 6 characters\"),\n  sessionTimeout: z.number().min(5, \"Minimum 5 minutes\"),\n  maxLoginAttempts: z.number().min(3, \"Minimum 3 attempts\"),\n  twoFactorRequired: z.boolean(),\n  passwordExpiry: z.number().min(30, \"Minimum 30 days\"),\n});\n\nconst notificationSettingsSchema = z.object({\n  emailNotifications: z.boolean(),\n  smsNotifications: z.boolean(),\n  pushNotifications: z.boolean(),\n  complaintAlerts: z.boolean(),\n  systemAlerts: z.boolean(),\n  maintenanceAlerts: z.boolean(),\n  reportFrequency: z.enum([\"daily\", \"weekly\", \"monthly\"]),\n});\n\nconst systemSettingsSchema = z.object({\n  maintenanceMode: z.boolean(),\n  allowRegistration: z.boolean(),\n  requireEmailVerification: z.boolean(),\n  defaultUserRole: z.enum([\"user\", \"engineer\", \"admin\"]),\n  dataRetentionDays: z.number().min(30, \"Minimum 30 days\"),\n  maxFileSize: z.number().min(1, \"Minimum 1 MB\"),\n  allowedFileTypes: z.string(),\n  backupFrequency: z.enum([\"daily\", \"weekly\", \"monthly\"]),\n});\n\ntype CompanySettings = z.infer<typeof companySettingsSchema>;\ntype ContactSettings = z.infer<typeof contactSettingsSchema>;\ntype SecuritySettings = z.infer<typeof securitySettingsSchema>;\ntype NotificationSettings = z.infer<typeof notificationSettingsSchema>;\ntype SystemSettings = z.infer<typeof systemSettingsSchema>;\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"company\");\n\n  // Default settings data\n  const [companySettings, setCompanySettings] = useState<CompanySettings>({\n    companyName: \"WiFi Self-Care Platform\",\n    companyLogo: \"\",\n    address: \"123 Tech Park, Electronic City\",\n    city: \"Bangalore\",\n    state: \"Karnataka\",\n    zipCode: \"560100\",\n    country: \"India\",\n    website: \"https://wificare.com\",\n    description: \"Leading WiFi service provider offering reliable internet solutions for homes and businesses.\",\n  });\n\n  const [contactSettings, setContactSettings] = useState<ContactSettings>({\n    supportEmail: \"support@wificare.com\",\n    supportPhone: \"+91 1800 123 4567\",\n    emergencyPhone: \"+91 1800 987 6543\",\n    businessHours: \"9:00 AM - 6:00 PM (Mon-Sat)\",\n    timezone: \"Asia/Kolkata\",\n  });\n\n  const [securitySettings, setSecuritySettings] = useState<SecuritySettings>({\n    passwordMinLength: 8,\n    sessionTimeout: 30,\n    maxLoginAttempts: 5,\n    twoFactorRequired: false,\n    passwordExpiry: 90,\n  });\n\n  const [notificationSettings, setNotificationSettings] = useState<NotificationSettings>({\n    emailNotifications: true,\n    smsNotifications: true,\n    pushNotifications: false,\n    complaintAlerts: true,\n    systemAlerts: true,\n    maintenanceAlerts: true,\n    reportFrequency: \"weekly\",\n  });\n\n  const [systemSettings, setSystemSettings] = useState<SystemSettings>({\n    maintenanceMode: false,\n    allowRegistration: true,\n    requireEmailVerification: true,\n    defaultUserRole: \"user\",\n    dataRetentionDays: 365,\n    maxFileSize: 10,\n    allowedFileTypes: \"jpg,jpeg,png,pdf,doc,docx\",\n    backupFrequency: \"daily\",\n  });\n\n  // Form instances\n  const companyForm = useForm<CompanySettings>({\n    resolver: zodResolver(companySettingsSchema),\n    defaultValues: companySettings,\n  });\n\n  const contactForm = useForm<ContactSettings>({\n    resolver: zodResolver(contactSettingsSchema),\n    defaultValues: contactSettings,\n  });\n\n  const securityForm = useForm<SecuritySettings>({\n    resolver: zodResolver(securitySettingsSchema),\n    defaultValues: securitySettings,\n  });\n\n  const notificationForm = useForm<NotificationSettings>({\n    resolver: zodResolver(notificationSettingsSchema),\n    defaultValues: notificationSettings,\n  });\n\n  const systemForm = useForm<SystemSettings>({\n    resolver: zodResolver(systemSettingsSchema),\n    defaultValues: systemSettings,\n  });\n\n  // Submit handlers for each settings section\n  const onCompanySubmit = (data: CompanySettings) => {\n    setIsLoading(true);\n    setTimeout(() => {\n      setCompanySettings(data);\n      toast({\n        title: \"Success\",\n        description: \"Company settings saved successfully\",\n      });\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  const onContactSubmit = (data: ContactSettings) => {\n    setIsLoading(true);\n    setTimeout(() => {\n      setContactSettings(data);\n      toast({\n        title: \"Success\",\n        description: \"Contact settings saved successfully\",\n      });\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  const onSecuritySubmit = (data: SecuritySettings) => {\n    setIsLoading(true);\n    setTimeout(() => {\n      setSecuritySettings(data);\n      toast({\n        title: \"Success\",\n        description: \"Security settings saved successfully\",\n      });\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  const onNotificationSubmit = (data: NotificationSettings) => {\n    setIsLoading(true);\n    setTimeout(() => {\n      setNotificationSettings(data);\n      toast({\n        title: \"Success\",\n        description: \"Notification settings saved successfully\",\n      });\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  const onSystemSubmit = (data: SystemSettings) => {\n    setIsLoading(true);\n    setTimeout(() => {\n      setSystemSettings(data);\n      toast({\n        title: \"Success\",\n        description: \"System settings saved successfully\",\n      });\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  const handleBackup = () => {\n    setIsLoading(true);\n    setTimeout(() => {\n      toast({\n        title: \"Success\",\n        description: \"Backup created successfully\",\n      });\n      setIsLoading(false);\n    }, 2000);\n  };\n\n  const handleRestore = () => {\n    setIsLoading(true);\n    setTimeout(() => {\n      toast({\n        title: \"Success\",\n        description: \"System restored successfully\",\n      });\n      setIsLoading(false);\n    }, 2000);\n  };\n\n  return (\n    <MainLayout title=\"System Settings\">\n      <div className=\"space-y-6\">\n        {/* Settings Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <SettingsIcon className=\"h-8 w-8 text-blue-600\" />\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Settings</h1>\n              <p className=\"text-gray-600\">Manage your system configuration and preferences</p>\n            </div>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={handleBackup} disabled={isLoading}>\n              <Download className=\"h-4 w-4 mr-2\" />\n              Backup\n            </Button>\n            <Button variant=\"outline\" onClick={handleRestore} disabled={isLoading}>\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Restore\n            </Button>\n          </div>\n        </div>\n\n        {/* Settings Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"company\" className=\"flex items-center gap-2\">\n              <Building2 className=\"h-4 w-4\" />\n              Company\n            </TabsTrigger>\n            <TabsTrigger value=\"contact\" className=\"flex items-center gap-2\">\n              <Phone className=\"h-4 w-4\" />\n              Contact\n            </TabsTrigger>\n            <TabsTrigger value=\"security\" className=\"flex items-center gap-2\">\n              <Shield className=\"h-4 w-4\" />\n              Security\n            </TabsTrigger>\n            <TabsTrigger value=\"notifications\" className=\"flex items-center gap-2\">\n              <Bell className=\"h-4 w-4\" />\n              Notifications\n            </TabsTrigger>\n            <TabsTrigger value=\"system\" className=\"flex items-center gap-2\">\n              <Database className=\"h-4 w-4\" />\n              System\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Company Settings */}\n          <TabsContent value=\"company\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Building2 className=\"h-5 w-5\" />\n                  Company Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={companyForm.handleSubmit(onCompanySubmit)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <Label htmlFor=\"companyName\">Company Name</Label>\n                      <Input {...companyForm.register(\"companyName\")} />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"website\">Website</Label>\n                      <Input {...companyForm.register(\"website\")} placeholder=\"https://...\" />\n                    </div>\n                    <div className=\"col-span-2\">\n                      <Label htmlFor=\"address\">Address</Label>\n                      <Input {...companyForm.register(\"address\")} />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"city\">City</Label>\n                      <Input {...companyForm.register(\"city\")} />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"state\">State</Label>\n                      <Input {...companyForm.register(\"state\")} />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"zipCode\">ZIP Code</Label>\n                      <Input {...companyForm.register(\"zipCode\")} />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"country\">Country</Label>\n                      <Input {...companyForm.register(\"country\")} />\n                    </div>\n                    <div className=\"col-span-2\">\n                      <Label htmlFor=\"description\">Description</Label>\n                      <Textarea {...companyForm.register(\"description\")} rows={3} />\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end\">\n                    <Button type=\"submit\" disabled={isLoading}>\n                      <Save className=\"h-4 w-4 mr-2\" />\n                      Save Company Info\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Contact Settings */}\n          <TabsContent value=\"contact\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Phone className=\"h-5 w-5\" />\n                  Contact Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={contactForm.handleSubmit(onContactSubmit)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <Label htmlFor=\"supportEmail\">Support Email</Label>\n                      <Input {...contactForm.register(\"supportEmail\")} type=\"email\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"supportPhone\">Support Phone</Label>\n                      <Input {...contactForm.register(\"supportPhone\")} />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"emergencyPhone\">Emergency Phone</Label>\n                      <Input {...contactForm.register(\"emergencyPhone\")} />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"timezone\">Timezone</Label>\n                      <Select\n                        value={contactForm.watch(\"timezone\")}\n                        onValueChange={(value) => contactForm.setValue(\"timezone\", value)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"Asia/Kolkata\">Asia/Kolkata (IST)</SelectItem>\n                          <SelectItem value=\"America/New_York\">America/New_York (EST)</SelectItem>\n                          <SelectItem value=\"Europe/London\">Europe/London (GMT)</SelectItem>\n                          <SelectItem value=\"Asia/Tokyo\">Asia/Tokyo (JST)</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"col-span-2\">\n                      <Label htmlFor=\"businessHours\">Business Hours</Label>\n                      <Input {...contactForm.register(\"businessHours\")} />\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end\">\n                    <Button type=\"submit\" disabled={isLoading}>\n                      <Save className=\"h-4 w-4 mr-2\" />\n                      Save Contact Info\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Security Settings */}\n          <TabsContent value=\"security\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Shield className=\"h-5 w-5\" />\n                  Security Configuration\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={securityForm.handleSubmit(onSecuritySubmit)} className=\"space-y-6\">\n                  <Alert>\n                    <AlertTriangle className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      Changes to security settings will affect all users and take effect immediately.\n                    </AlertDescription>\n                  </Alert>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <Label htmlFor=\"passwordMinLength\">Minimum Password Length</Label>\n                      <Input \n                        {...securityForm.register(\"passwordMinLength\", { valueAsNumber: true })} \n                        type=\"number\" \n                        min=\"6\" \n                        max=\"50\" \n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"sessionTimeout\">Session Timeout (minutes)</Label>\n                      <Input \n                        {...securityForm.register(\"sessionTimeout\", { valueAsNumber: true })} \n                        type=\"number\" \n                        min=\"5\" \n                        max=\"1440\" \n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"maxLoginAttempts\">Max Login Attempts</Label>\n                      <Input \n                        {...securityForm.register(\"maxLoginAttempts\", { valueAsNumber: true })} \n                        type=\"number\" \n                        min=\"3\" \n                        max=\"20\" \n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"passwordExpiry\">Password Expiry (days)</Label>\n                      <Input \n                        {...securityForm.register(\"passwordExpiry\", { valueAsNumber: true })} \n                        type=\"number\" \n                        min=\"30\" \n                        max=\"365\" \n                      />\n                    </div>\n                    <div className=\"col-span-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label htmlFor=\"twoFactorRequired\">Require Two-Factor Authentication</Label>\n                          <p className=\"text-sm text-muted-foreground\">Force all users to enable 2FA</p>\n                        </div>\n                        <Switch \n                          checked={securityForm.watch(\"twoFactorRequired\")}\n                          onCheckedChange={(checked) => securityForm.setValue(\"twoFactorRequired\", checked)}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end\">\n                    <Button type=\"submit\" disabled={isLoading}>\n                      <Save className=\"h-4 w-4 mr-2\" />\n                      Save Security Settings\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Notification Settings */}\n          <TabsContent value=\"notifications\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Bell className=\"h-5 w-5\" />\n                  Notification Preferences\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={notificationForm.handleSubmit(onNotificationSubmit)} className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label>Email Notifications</Label>\n                        <p className=\"text-sm text-muted-foreground\">Receive notifications via email</p>\n                      </div>\n                      <Switch \n                        checked={notificationForm.watch(\"emailNotifications\")}\n                        onCheckedChange={(checked) => notificationForm.setValue(\"emailNotifications\", checked)}\n                      />\n                    </div>\n                    <Separator />\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label>SMS Notifications</Label>\n                        <p className=\"text-sm text-muted-foreground\">Receive notifications via SMS</p>\n                      </div>\n                      <Switch \n                        checked={notificationForm.watch(\"smsNotifications\")}\n                        onCheckedChange={(checked) => notificationForm.setValue(\"smsNotifications\", checked)}\n                      />\n                    </div>\n                    <Separator />\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label>Push Notifications</Label>\n                        <p className=\"text-sm text-muted-foreground\">Receive browser push notifications</p>\n                      </div>\n                      <Switch \n                        checked={notificationForm.watch(\"pushNotifications\")}\n                        onCheckedChange={(checked) => notificationForm.setValue(\"pushNotifications\", checked)}\n                      />\n                    </div>\n                    <Separator />\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label>Complaint Alerts</Label>\n                        <p className=\"text-sm text-muted-foreground\">Get notified of new complaints</p>\n                      </div>\n                      <Switch \n                        checked={notificationForm.watch(\"complaintAlerts\")}\n                        onCheckedChange={(checked) => notificationForm.setValue(\"complaintAlerts\", checked)}\n                      />\n                    </div>\n                    <Separator />\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label>System Alerts</Label>\n                        <p className=\"text-sm text-muted-foreground\">Get notified of system issues</p>\n                      </div>\n                      <Switch \n                        checked={notificationForm.watch(\"systemAlerts\")}\n                        onCheckedChange={(checked) => notificationForm.setValue(\"systemAlerts\", checked)}\n                      />\n                    </div>\n                    <Separator />\n                    <div>\n                      <Label htmlFor=\"reportFrequency\">Report Frequency</Label>\n                      <Select\n                        value={notificationForm.watch(\"reportFrequency\")}\n                        onValueChange={(value: \"daily\" | \"weekly\" | \"monthly\") => \n                          notificationForm.setValue(\"reportFrequency\", value)\n                        }\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"daily\">Daily</SelectItem>\n                          <SelectItem value=\"weekly\">Weekly</SelectItem>\n                          <SelectItem value=\"monthly\">Monthly</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end\">\n                    <Button type=\"submit\" disabled={isLoading}>\n                      <Save className=\"h-4 w-4 mr-2\" />\n                      Save Notification Settings\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* System Settings */}\n          <TabsContent value=\"system\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Database className=\"h-5 w-5\" />\n                  System Configuration\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={systemForm.handleSubmit(onSystemSubmit)} className=\"space-y-6\">\n                  <Alert>\n                    <Info className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      System settings control core functionality and may affect performance.\n                    </AlertDescription>\n                  </Alert>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label>Maintenance Mode</Label>\n                        <p className=\"text-sm text-muted-foreground\">Enable to prevent user access during updates</p>\n                      </div>\n                      <Switch \n                        checked={systemForm.watch(\"maintenanceMode\")}\n                        onCheckedChange={(checked) => systemForm.setValue(\"maintenanceMode\", checked)}\n                      />\n                    </div>\n                    <Separator />\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label>Allow Registration</Label>\n                        <p className=\"text-sm text-muted-foreground\">Allow new users to register</p>\n                      </div>\n                      <Switch \n                        checked={systemForm.watch(\"allowRegistration\")}\n                        onCheckedChange={(checked) => systemForm.setValue(\"allowRegistration\", checked)}\n                      />\n                    </div>\n                    <Separator />\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <Label>Require Email Verification</Label>\n                        <p className=\"text-sm text-muted-foreground\">New users must verify their email</p>\n                      </div>\n                      <Switch \n                        checked={systemForm.watch(\"requireEmailVerification\")}\n                        onCheckedChange={(checked) => systemForm.setValue(\"requireEmailVerification\", checked)}\n                      />\n                    </div>\n                    <Separator />\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div>\n                        <Label htmlFor=\"defaultUserRole\">Default User Role</Label>\n                        <Select\n                          value={systemForm.watch(\"defaultUserRole\")}\n                          onValueChange={(value: \"user\" | \"engineer\" | \"admin\") => \n                            systemForm.setValue(\"defaultUserRole\", value)\n                          }\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"user\">User</SelectItem>\n                            <SelectItem value=\"engineer\">Engineer</SelectItem>\n                            <SelectItem value=\"admin\">Admin</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label htmlFor=\"backupFrequency\">Backup Frequency</Label>\n                        <Select\n                          value={systemForm.watch(\"backupFrequency\")}\n                          onValueChange={(value: \"daily\" | \"weekly\" | \"monthly\") => \n                            systemForm.setValue(\"backupFrequency\", value)\n                          }\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"daily\">Daily</SelectItem>\n                            <SelectItem value=\"weekly\">Weekly</SelectItem>\n                            <SelectItem value=\"monthly\">Monthly</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label htmlFor=\"dataRetentionDays\">Data Retention (days)</Label>\n                        <Input \n                          {...systemForm.register(\"dataRetentionDays\", { valueAsNumber: true })} \n                          type=\"number\" \n                          min=\"30\" \n                          max=\"3650\" \n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"maxFileSize\">Max File Size (MB)</Label>\n                        <Input \n                          {...systemForm.register(\"maxFileSize\", { valueAsNumber: true })} \n                          type=\"number\" \n                          min=\"1\" \n                          max=\"100\" \n                        />\n                      </div>\n                      <div className=\"col-span-2\">\n                        <Label htmlFor=\"allowedFileTypes\">Allowed File Types</Label>\n                        <Input \n                          {...systemForm.register(\"allowedFileTypes\")} \n                          placeholder=\"jpg,png,pdf,doc,docx\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end\">\n                    <Button type=\"submit\" disabled={isLoading}>\n                      <Save className=\"h-4 w-4 mr-2\" />\n                      Save System Settings\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </MainLayout>\n  );\n}\n","size_bytes":29760},"client/src/pages/support.tsx":{"content":"import { useState } from \"react\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { SupportAnalytics } from \"@/components/support/support-analytics\";\nimport { TicketManagement } from \"@/components/support/ticket-management\";\nimport { RatingSystem } from \"@/components/support/rating-system\";\nimport { SettingsPanel } from \"@/components/support/settings-panel\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  MessageSquare, \n  Star, \n  BarChart3, \n  Settings,\n  Headphones,\n  ThumbsUp\n} from \"lucide-react\";\n\n// Enhanced support ticket interface\ninterface SupportTicket {\n  id: number;\n  title: string;\n  description: string;\n  customerName: string;\n  email: string;\n  phone: string;\n  status: \"open\" | \"in-progress\" | \"resolved\" | \"closed\";\n  priority: \"low\" | \"medium\" | \"high\" | \"urgent\";\n  category: \"technical\" | \"billing\" | \"general\" | \"installation\";\n  assignedTo?: string;\n  rating?: number;\n  feedback?: string;\n  createdAt: string;\n  updatedAt: string;\n  responses?: {\n    id: number;\n    message: string;\n    sender: string;\n    timestamp: string;\n    isCustomer: boolean;\n  }[];\n}\n\n// Enhanced rating interface\ninterface Rating {\n  id: number;\n  ticketId: number;\n  customerName: string;\n  customerEmail: string;\n  rating: number;\n  feedback: string;\n  category: string;\n  engineerName?: string;\n  createdAt: string;\n  helpful: number;\n  notHelpful: number;\n  tags: string[];\n}\n\nexport default function Support() {\n  const { toast } = useToast();\n\n  // Comprehensive dummy data for support tickets\n  const [supportTickets, setSupportTickets] = useState<SupportTicket[]>([\n    {\n      id: 1,\n      title: \"Internet Speed Significantly Slower Than Advertised\",\n      description: \"Customer reports consistent slow internet speeds during peak hours (7-9 PM). Speed tests show 15 Mbps instead of promised 100 Mbps. Issue has persisted for 2 weeks.\",\n      customerName: \"Rajesh Kumar\",\n      email: \"rajesh.kumar@email.com\",\n      phone: \"+91 98765 43210\",\n      status: \"in-progress\",\n      priority: \"high\",\n      category: \"technical\",\n      assignedTo: \"Alex Rodriguez\",\n      createdAt: \"2025-01-20T10:30:00Z\",\n      updatedAt: \"2025-01-20T14:45:00Z\",\n      responses: [\n        {\n          id: 1,\n          message: \"Thank you for contacting us. We've escalated this to our technical team and will run diagnostics on your line.\",\n          sender: \"Support Agent\",\n          timestamp: \"2025-01-20T11:00:00Z\",\n          isCustomer: false\n        },\n        {\n          id: 2,\n          message: \"I've been having this issue for weeks now. When can I expect a resolution?\",\n          sender: \"Rajesh Kumar\",\n          timestamp: \"2025-01-20T14:30:00Z\",\n          isCustomer: true\n        }\n      ]\n    },\n    {\n      id: 2,\n      title: \"Billing Discrepancy - Charged for Cancelled Service\",\n      description: \"Customer was charged for premium TV package that was cancelled 2 months ago. Requesting refund and correction of billing records.\",\n      customerName: \"Priya Sharma\",\n      email: \"priya.sharma@email.com\",\n      phone: \"+91 87654 32109\",\n      status: \"resolved\",\n      priority: \"medium\",\n      category: \"billing\",\n      assignedTo: \"Jennifer White\",\n      rating: 5,\n      feedback: \"Excellent service! The billing team resolved my issue quickly and provided a full refund. Very satisfied with the support.\",\n      createdAt: \"2025-01-19T09:15:00Z\",\n      updatedAt: \"2025-01-19T16:20:00Z\",\n      responses: [\n        {\n          id: 1,\n          message: \"We've reviewed your account and confirmed the billing error. A refund of $45.99 has been processed and will appear in 3-5 business days.\",\n          sender: \"Billing Specialist\",\n          timestamp: \"2025-01-19T12:00:00Z\",\n          isCustomer: false\n        }\n      ]\n    },\n    {\n      id: 3,\n      title: \"Frequent Connection Drops and Service Interruptions\",\n      description: \"Internet connection drops every 2-3 hours requiring router restart. Customer works from home and this affects productivity significantly.\",\n      customerName: \"Amit Patel\",\n      email: \"amit.patel@email.com\",\n      phone: \"+91 76543 21098\",\n      status: \"open\",\n      priority: \"urgent\",\n      category: \"technical\",\n      createdAt: \"2025-01-20T08:45:00Z\",\n      updatedAt: \"2025-01-20T08:45:00Z\"\n    },\n    {\n      id: 4,\n      title: \"Installation Appointment Scheduling\",\n      description: \"New customer requesting installation appointment for fiber optic service at new address. Prefers weekend slot.\",\n      customerName: \"Sarah Chen\",\n      email: \"sarah.chen@email.com\",\n      phone: \"+91 65432 10987\",\n      status: \"in-progress\",\n      priority: \"medium\",\n      category: \"installation\",\n      assignedTo: \"Installation Team\",\n      createdAt: \"2025-01-18T14:20:00Z\",\n      updatedAt: \"2025-01-19T10:15:00Z\",\n      responses: [\n        {\n          id: 1,\n          message: \"We have availability this Saturday between 9 AM - 12 PM. Would this work for you?\",\n          sender: \"Installation Coordinator\",\n          timestamp: \"2025-01-19T10:15:00Z\",\n          isCustomer: false\n        }\n      ]\n    },\n    {\n      id: 5,\n      title: \"Router Configuration Issues After Recent Update\",\n      description: \"Customer unable to connect devices after automatic router firmware update. WiFi network visible but authentication fails.\",\n      customerName: \"Michael Johnson\",\n      email: \"michael.johnson@email.com\",\n      phone: \"+91 54321 09876\",\n      status: \"resolved\",\n      priority: \"high\",\n      category: \"technical\",\n      assignedTo: \"Tech Support\",\n      rating: 4,\n      feedback: \"Good support but took longer than expected to resolve. The technician was knowledgeable and patient.\",\n      createdAt: \"2025-01-17T16:30:00Z\",\n      updatedAt: \"2025-01-18T11:45:00Z\"\n    },\n    {\n      id: 6,\n      title: \"Data Usage Inquiry and Plan Upgrade\",\n      description: \"Customer consistently exceeding data limits and wants to understand usage patterns and available upgrade options.\",\n      customerName: \"Lisa Wang\",\n      email: \"lisa.wang@email.com\",\n      phone: \"+91 43210 98765\",\n      status: \"closed\",\n      priority: \"low\",\n      category: \"general\",\n      assignedTo: \"Customer Service\",\n      rating: 5,\n      feedback: \"Very helpful! The representative explained everything clearly and helped me find the perfect plan for my needs.\",\n      createdAt: \"2025-01-16T13:10:00Z\",\n      updatedAt: \"2025-01-17T09:30:00Z\"\n    },\n    {\n      id: 7,\n      title: \"Service Outage Compensation Request\",\n      description: \"Customer experienced 8-hour service outage last week and is requesting service credit as per SLA agreement.\",\n      customerName: \"David Thompson\",\n      email: \"david.thompson@email.com\",\n      phone: \"+91 32109 87654\",\n      status: \"in-progress\",\n      priority: \"medium\",\n      category: \"billing\",\n      assignedTo: \"Customer Relations\",\n      createdAt: \"2025-01-15T10:45:00Z\",\n      updatedAt: \"2025-01-16T14:20:00Z\"\n    }\n  ]);\n\n  // Comprehensive dummy data for ratings\n  const [ratings] = useState<Rating[]>([\n    {\n      id: 1,\n      ticketId: 2,\n      customerName: \"Priya Sharma\",\n      customerEmail: \"priya.sharma@email.com\",\n      rating: 5,\n      feedback: \"Excellent service! The billing team resolved my issue quickly and provided a full refund. Very satisfied with the support.\",\n      category: \"billing\",\n      engineerName: \"Jennifer White\",\n      createdAt: \"2025-01-19T16:30:00Z\",\n      helpful: 12,\n      notHelpful: 1,\n      tags: [\"quick-resolution\", \"billing-expert\", \"professional\"]\n    },\n    {\n      id: 2,\n      ticketId: 5,\n      customerName: \"Michael Johnson\",\n      customerEmail: \"michael.johnson@email.com\",\n      rating: 4,\n      feedback: \"Good support but took longer than expected to resolve. The technician was knowledgeable and patient, walked me through each step.\",\n      category: \"technical\",\n      engineerName: \"Alex Rodriguez\",\n      createdAt: \"2025-01-18T12:00:00Z\",\n      helpful: 8,\n      notHelpful: 2,\n      tags: [\"knowledgeable\", \"patient\", \"technical-expertise\"]\n    },\n    {\n      id: 3,\n      ticketId: 6,\n      customerName: \"Lisa Wang\",\n      customerEmail: \"lisa.wang@email.com\",\n      rating: 5,\n      feedback: \"Very helpful! The representative explained everything clearly and helped me find the perfect plan for my needs. Saved me money too!\",\n      category: \"general\",\n      engineerName: \"Customer Service Team\",\n      createdAt: \"2025-01-17T10:15:00Z\",\n      helpful: 15,\n      notHelpful: 0,\n      tags: [\"clear-explanation\", \"helpful\", \"cost-effective\"]\n    },\n    {\n      id: 4,\n      ticketId: 1,\n      customerName: \"Rajesh Kumar\",\n      customerEmail: \"rajesh.kumar@email.com\",\n      rating: 3,\n      feedback: \"The issue was eventually resolved but it took multiple follow-ups. The team could have been more proactive in communication.\",\n      category: \"technical\",\n      engineerName: \"Alex Rodriguez\",\n      createdAt: \"2025-01-16T14:45:00Z\",\n      helpful: 6,\n      notHelpful: 3,\n      tags: [\"resolved\", \"communication-needed\", \"follow-up-required\"]\n    },\n    {\n      id: 5,\n      ticketId: 8,\n      customerName: \"Amanda Foster\",\n      customerEmail: \"amanda.foster@email.com\",\n      rating: 5,\n      feedback: \"Outstanding customer service! The representative went above and beyond to ensure my internet was restored quickly. Highly recommend!\",\n      category: \"technical\",\n      engineerName: \"Lisa Chen\",\n      createdAt: \"2025-01-15T16:20:00Z\",\n      helpful: 20,\n      notHelpful: 0,\n      tags: [\"outstanding\", \"above-beyond\", \"quick-restoration\"]\n    },\n    {\n      id: 6,\n      ticketId: 9,\n      customerName: \"Robert Martinez\",\n      customerEmail: \"robert.martinez@email.com\",\n      rating: 2,\n      feedback: \"Support was slow to respond and the initial solution didn't work. Had to call back multiple times. Room for improvement.\",\n      category: \"technical\",\n      engineerName: \"James Park\",\n      createdAt: \"2025-01-14T11:30:00Z\",\n      helpful: 4,\n      notHelpful: 8,\n      tags: [\"slow-response\", \"multiple-calls\", \"improvement-needed\"]\n    },\n    {\n      id: 7,\n      ticketId: 10,\n      customerName: \"Emily Rodriguez\",\n      customerEmail: \"emily.rodriguez@email.com\",\n      rating: 4,\n      feedback: \"Good technical knowledge and friendly service. The engineer explained the problem clearly and provided tips to prevent future issues.\",\n      category: \"technical\",\n      engineerName: \"Kevin Lee\",\n      createdAt: \"2025-01-13T09:45:00Z\",\n      helpful: 11,\n      notHelpful: 1,\n      tags: [\"technical-knowledge\", \"friendly\", \"preventive-tips\"]\n    },\n    {\n      id: 8,\n      ticketId: 11,\n      customerName: \"Thomas Wilson\",\n      customerEmail: \"thomas.wilson@email.com\",\n      rating: 5,\n      feedback: \"Fantastic experience! The installation team was punctual, professional, and cleaned up after themselves. Perfect service!\",\n      category: \"installation\",\n      engineerName: \"Installation Team\",\n      createdAt: \"2025-01-12T15:30:00Z\",\n      helpful: 18,\n      notHelpful: 0,\n      tags: [\"punctual\", \"professional\", \"clean-installation\"]\n    }\n  ]);\n\n  // Pagination state\n  const [ticketsPage, setTicketsPage] = useState(1);\n  const [ratingsPage, setRatingsPage] = useState(1);\n  const ticketsPerPage = 5;\n  const ratingsPerPage = 6;\n\n  const ticketsTotalPages = Math.ceil(supportTickets.length / ticketsPerPage);\n  const ratingsTotalPages = Math.ceil(ratings.length / ratingsPerPage);\n\n  const isLoading = false;\n\n  const handleUpdateTicket = (id: number, updates: Partial<SupportTicket>) => {\n    setSupportTickets(prev => \n      prev.map(ticket => \n        ticket.id === id \n          ? { ...ticket, ...updates, updatedAt: new Date().toISOString() }\n          : ticket\n      )\n    );\n  };\n\n  const handleDeleteTicket = (id: number) => {\n    setSupportTickets(prev => prev.filter(ticket => ticket.id !== id));\n    toast({\n      title: \"Ticket Deleted\",\n      description: \"Support ticket has been removed successfully\",\n    });\n  };\n\n  const handleCreateTicket = (ticketData: Omit<SupportTicket, \"id\" | \"createdAt\" | \"updatedAt\">) => {\n    const newTicket: SupportTicket = {\n      ...ticketData,\n      id: Math.max(...supportTickets.map(t => t.id)) + 1,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    setSupportTickets(prev => [newTicket, ...prev]);\n  };\n\n  // Calculate key metrics\n  const totalTickets = supportTickets.length;\n  const openTickets = supportTickets.filter(t => t.status === \"open\").length;\n  const resolvedTickets = supportTickets.filter(t => t.status === \"resolved\").length;\n  const avgRating = ratings.length > 0 \n    ? ratings.reduce((sum, r) => sum + r.rating, 0) / ratings.length \n    : 0;\n\n  if (isLoading) {\n    return (\n      <MainLayout title=\"Support & Rating Center\">\n        <div className=\"animate-pulse space-y-6 p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"bg-card rounded-xl shadow-sm p-6 border\">\n                <div className=\"h-6 bg-muted rounded mb-2\"></div>\n                <div className=\"h-8 bg-muted rounded\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </MainLayout>\n    );\n  }\n\n  return (\n    <MainLayout title=\"Support & Rating Center\">\n      <div className=\"space-y-8 p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Support & Rating Center</h1>\n            <p className=\"text-muted-foreground mt-1\">Comprehensive customer support management and feedback analysis</p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Badge variant=\"outline\" className=\"text-sm\">\n              <MessageSquare className=\"h-4 w-4 mr-2\" />\n              {totalTickets} total tickets\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-sm\">\n              <Star className=\"h-4 w-4 mr-2\" />\n              {avgRating.toFixed(1)} avg rating\n            </Badge>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <Tabs defaultValue=\"analytics\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"analytics\" className=\"flex items-center space-x-2\">\n              <BarChart3 className=\"h-4 w-4\" />\n              <span>Analytics</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"tickets\" className=\"flex items-center space-x-2\">\n              <Headphones className=\"h-4 w-4\" />\n              <span>Support Tickets</span>\n              <Badge variant=\"secondary\" className=\"ml-1 text-xs\">\n                {openTickets}\n              </Badge>\n            </TabsTrigger>\n            <TabsTrigger value=\"ratings\" className=\"flex items-center space-x-2\">\n              <ThumbsUp className=\"h-4 w-4\" />\n              <span>Ratings & Reviews</span>\n              <Badge variant=\"secondary\" className=\"ml-1 text-xs\">\n                {ratings.length}\n              </Badge>\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\" className=\"flex items-center space-x-2\">\n              <Settings className=\"h-4 w-4\" />\n              <span>Settings</span>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <SupportAnalytics \n              supportTickets={supportTickets}\n              ratings={ratings}\n            />\n          </TabsContent>\n\n          <TabsContent value=\"tickets\" className=\"space-y-6\">\n            <TicketManagement\n              tickets={supportTickets}\n              onUpdateTicket={handleUpdateTicket}\n              onDeleteTicket={handleDeleteTicket}\n              onCreateTicket={handleCreateTicket}\n              currentPage={ticketsPage}\n              totalPages={ticketsTotalPages}\n              onPageChange={setTicketsPage}\n              itemsPerPage={ticketsPerPage}\n            />\n          </TabsContent>\n\n          <TabsContent value=\"ratings\" className=\"space-y-6\">\n            <RatingSystem\n              ratings={ratings}\n              currentPage={ratingsPage}\n              totalPages={ratingsTotalPages}\n              onPageChange={setRatingsPage}\n              itemsPerPage={ratingsPerPage}\n            />\n          </TabsContent>\n\n          <TabsContent value=\"settings\" className=\"space-y-6\">\n            <SettingsPanel \n              onSettingsUpdate={(settings) => {\n                toast({\n                  title: \"Settings Updated\",\n                  description: \"Support system settings have been saved successfully\",\n                });\n              }}\n            />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </MainLayout>\n  );\n}\n","size_bytes":16962},"client/src/pages/user-detail.tsx":{"content":"import React from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { ArrowLeft, User, Mail, Phone, MapPin, Calendar, Wifi, CreditCard, Settings, MoreHorizontal, Edit, Trash2, Shield } from 'lucide-react';\nimport { dummyCustomers, dummyComplaints } from '@/lib/dummyData';\nimport { MainLayout } from '@/components/layout/main-layout';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { cn } from '@/lib/utils';\n\nexport default function UserDetail() {\n  const params = useParams();\n  const [, navigate] = useLocation();\n  const userId = params?.id ? parseInt(params.id) : null;\n  \n  const user = userId ? dummyCustomers.find(u => u.id === userId) : null;\n  const userComplaints = userId ? dummyComplaints.filter(c => c.customerId === userId) : [];\n\n  if (!user) {\n    return (\n      <MainLayout>\n        <div className=\"p-8 text-center\">\n          <User className=\"h-16 w-16 mx-auto mb-4 text-gray-400\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">User Not Found</h3>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">The user you're looking for doesn't exist.</p>\n          <Button onClick={() => navigate('/users')} variant=\"outline\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Users\n          </Button>\n        </div>\n      </MainLayout>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300';\n      case 'suspended':\n        return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-300';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent':\n        return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300';\n      case 'high':\n        return 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-300';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300';\n      case 'low':\n        return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-300';\n    }\n  };\n\n  return (\n    <MainLayout>\n      <div className=\"p-6 max-w-6xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => navigate('/users')}\n              className=\"text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Users\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">{user.name}</h1>\n              <p className=\"text-gray-600 dark:text-gray-400\">Customer Details</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Edit className=\"h-4 w-4 mr-2\" />\n              Edit\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column - User Info */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            {/* Profile Card */}\n            <Card>\n              <CardHeader className=\"text-center pb-4\">\n                <div className=\"mx-auto w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-2xl font-bold mb-4\">\n                  {user.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                </div>\n                <CardTitle className=\"text-xl\">{user.name}</CardTitle>\n                <div className=\"flex justify-center\">\n                  <Badge className={cn(\"capitalize\", getStatusColor(user.status))}>\n                    {user.status}\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center gap-3 text-sm\">\n                  <Mail className=\"h-4 w-4 text-gray-400\" />\n                  <span className=\"text-gray-600 dark:text-gray-400\">Email:</span>\n                  <span className=\"font-medium\">{user.email}</span>\n                </div>\n                <div className=\"flex items-center gap-3 text-sm\">\n                  <Phone className=\"h-4 w-4 text-gray-400\" />\n                  <span className=\"text-gray-600 dark:text-gray-400\">Phone:</span>\n                  <span className=\"font-medium\">{user.phone}</span>\n                </div>\n                <div className=\"flex items-center gap-3 text-sm\">\n                  <MapPin className=\"h-4 w-4 text-gray-400\" />\n                  <span className=\"text-gray-600 dark:text-gray-400\">Location:</span>\n                  <span className=\"font-medium\">{user.location}</span>\n                </div>\n                <div className=\"flex items-center gap-3 text-sm\">\n                  <Calendar className=\"h-4 w-4 text-gray-400\" />\n                  <span className=\"text-gray-600 dark:text-gray-400\">Joined:</span>\n                  <span className=\"font-medium\">{new Date(user.createdAt).toLocaleDateString()}</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Service Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Wifi className=\"h-5 w-5\" />\n                  Service Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {user.serviceProvider ? (\n                  <>\n                    <div>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">Service Provider</p>\n                      <p className=\"font-medium\">{user.serviceProvider}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">Plan</p>\n                      <p className=\"font-medium\">{user.planName}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">Static IP</p>\n                      <p className=\"font-mono text-sm bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded\">\n                        {user.staticIp || 'Not assigned'}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">MAC Address</p>\n                      <p className=\"font-mono text-sm bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded\">\n                        {user.macAddress || 'Not available'}\n                      </p>\n                    </div>\n                  </>\n                ) : (\n                  <div className=\"text-center py-4\">\n                    <Wifi className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">No active service</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Billing Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <CreditCard className=\"h-5 w-5\" />\n                  Billing Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Balance Due</p>\n                  <p className={cn(\n                    \"font-bold text-lg\",\n                    user.balanceDue > 0 ? \"text-red-600 dark:text-red-400\" : \"text-green-600 dark:text-green-400\"\n                  )}>\n                    ₹{user.balanceDue.toLocaleString()}\n                  </p>\n                </div>\n                {user.activationDate && (\n                  <div>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Activation Date</p>\n                    <p className=\"font-medium\">{new Date(user.activationDate).toLocaleDateString()}</p>\n                  </div>\n                )}\n                {user.expirationDate && (\n                  <div>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Expiration Date</p>\n                    <p className=\"font-medium\">{new Date(user.expirationDate).toLocaleDateString()}</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column - Complaints */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>Recent Complaints</span>\n                  <Badge variant=\"secondary\">{userComplaints.length}</Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {userComplaints.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {userComplaints.map((complaint) => (\n                      <div\n                        key={complaint.id}\n                        className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:bg-gray-50 dark:hover:bg-gray-800/50 cursor-pointer transition-colors\"\n                        onClick={() => navigate(`/complaints/${complaint.id}`)}\n                      >\n                        <div className=\"flex items-start justify-between mb-2\">\n                          <h4 className=\"font-medium text-gray-900 dark:text-white\">{complaint.title}</h4>\n                          <div className=\"flex gap-2\">\n                            <Badge className={cn(\"text-xs\", getPriorityColor(complaint.priority))}>\n                              {complaint.priority}\n                            </Badge>\n                            <Badge className={cn(\"text-xs\", getStatusColor(complaint.status))}>\n                              {complaint.status}\n                            </Badge>\n                          </div>\n                        </div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3 line-clamp-2\">\n                          {complaint.description}\n                        </p>\n                        <div className=\"flex items-center justify-between text-xs text-gray-500 dark:text-gray-400\">\n                          <span>Created: {new Date(complaint.createdAt).toLocaleDateString()}</span>\n                          {complaint.engineerName && (\n                            <span>Assigned to: {complaint.engineerName}</span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Shield className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No Complaints</h3>\n                    <p className=\"text-gray-600 dark:text-gray-400\">This user hasn't filed any complaints yet.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":12141},"client/src/pages/users.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { UserPlus, MapPin, Phone, Mail, Calendar, Wifi, Search, Filter, Grid, List, Eye, Edit, Trash2, ChevronLeft, ChevronRight, User, Activity, CheckCircle, TrendingUp, WifiOff, AlertTriangle, CreditCard, Download, Upload, X, Shield, ShieldOff, FilterX, BarChart, Settings, Users2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\nimport { generateDummyCustomers, type Customer } from \"@/lib/dummyData\";\n\n// Define user schema for form validation\nconst userSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().min(1, \"Phone is required\"),\n  address: z.string().min(1, \"Address is required\"),\n  location: z.string().min(1, \"Location is required\"),\n  serviceProvider: z.string().optional(),\n  planName: z.string().optional(),\n  activationDate: z.string().optional(),\n  expirationDate: z.string().optional(),\n  balanceDue: z.number().min(0, \"Balance due must be non-negative\").default(0),\n  staticIp: z.string().optional(),\n  macAddress: z.string().optional(),\n  status: z.enum([\"active\", \"suspended\", \"pending\", \"expired\"]),\n  area: z.enum([\"urban\", \"rural\"]),\n  mode: z.enum([\"online\", \"offline\"]),\n  isActive: z.boolean().default(true),\n});\n\ntype UserData = Customer;\n\nexport default function Users() {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [providerFilter, setProviderFilter] = useState(\"all\");\n  const [areaFilter, setAreaFilter] = useState(\"all\");\n  const [viewMode, setViewMode] = useState<\"card\" | \"table\">(\"card\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<UserData | null>(null);\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const itemsPerPage = 6;\n\n  const { toast } = useToast();\n\n  // Load dummy data\n  const [users, setUsers] = useState(generateDummyCustomers());\n\n  const form = useForm<UserData>({\n    resolver: zodResolver(userSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      location: \"\",\n      serviceProvider: \"\",\n      planName: \"\",\n      status: \"active\",\n      area: \"urban\",\n      mode: \"online\",\n      isActive: true,\n      balanceDue: 0,\n    },\n  });\n\n  // Filter users based on search and filter criteria\n  const filteredUsers = users.filter((user) => {\n    const matchesSearch = \n      user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      user.location.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || user.status === statusFilter;\n    const matchesProvider = providerFilter === \"all\" || user.serviceProvider === providerFilter;\n    const matchesArea = areaFilter === \"all\" || user.area === areaFilter;\n\n    return matchesSearch && matchesStatus && matchesProvider && matchesArea;\n  });\n\n  // Pagination\n  const totalPages = Math.ceil(filteredUsers.length / itemsPerPage);\n  const currentUsers = filteredUsers.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  const handleCreateUser = (data: UserData) => {\n    const newUser: UserData = {\n      ...data,\n      id: Math.max(...users.map(u => u.id)) + 1,\n      createdAt: new Date().toISOString(),\n    };\n    setUsers([...users, newUser]);\n    toast({\n      title: \"Success\",\n      description: \"User created successfully\",\n    });\n    setIsCreateDialogOpen(false);\n    form.reset();\n  };\n\n  const handleEditUser = (data: UserData) => {\n    const updatedUsers = users.map(user => \n      user.id === selectedUser?.id ? { ...user, ...data } : user\n    );\n    setUsers(updatedUsers);\n    toast({\n      title: \"Success\",\n      description: \"User updated successfully\",\n    });\n    setIsEditDialogOpen(false);\n  };\n\n  const handleDeleteUser = (userId: number) => {\n    setUsers(users.filter(user => user.id !== userId));\n    toast({\n      title: \"Success\",\n      description: \"User deleted successfully\",\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      active: { color: \"bg-green-100 text-green-800 border-green-200\", icon: CheckCircle },\n      pending: { color: \"bg-yellow-100 text-yellow-800 border-yellow-200\", icon: AlertTriangle },\n      suspended: { color: \"bg-red-100 text-red-800 border-red-200\", icon: ShieldOff },\n      expired: { color: \"bg-gray-100 text-gray-800 border-gray-200\", icon: WifiOff },\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig];\n    const Icon = config?.icon || CheckCircle;\n    \n    return (\n      <Badge className={`${config?.color} border-0`}>\n        <Icon className=\"w-3 h-3 mr-1\" />\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const stats = {\n    total: users.length,\n    active: users.filter(u => u.status === \"active\").length,\n    pending: users.filter(u => u.status === \"pending\").length,\n    suspended: users.filter(u => u.status === \"suspended\").length,\n  };\n\n  return (\n    <MainLayout title=\"User Management\">\n      <div className=\"space-y-6\">\n        {/* Enhanced Tabbed Interface */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4 lg:w-fit lg:grid-cols-4 gap-2 mb-6\">\n            <TabsTrigger value=\"overview\" className=\"flex items-center gap-2\">\n              <BarChart className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Overview</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"users\" className=\"flex items-center gap-2\">\n              <Users2 className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Users</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"analytics\" className=\"flex items-center gap-2\">\n              <Activity className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Analytics</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\" className=\"flex items-center gap-2\">\n              <Settings className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Settings</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Total Users</p>\n                      <p className=\"text-2xl font-bold\">{stats.total}</p>\n                    </div>\n                    <User className=\"h-4 w-4 text-muted-foreground\" />\n                  </div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Active Users</p>\n                      <p className=\"text-2xl font-bold text-green-600\">{stats.active}</p>\n                    </div>\n                    <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  </div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Pending</p>\n                      <p className=\"text-2xl font-bold text-yellow-600\">{stats.pending}</p>\n                    </div>\n                    <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n                  </div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Suspended</p>\n                      <p className=\"text-2xl font-bold text-red-600\">{stats.suspended}</p>\n                    </div>\n                    <ShieldOff className=\"h-4 w-4 text-red-600\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Quick Overview Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle>User Overview</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"text-center text-muted-foreground\">\n                    User management dashboard with real-time statistics and comprehensive user data overview.\n                  </div>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n                    <div className=\"p-4 bg-muted/50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-green-600\">{Math.round((stats.active / stats.total) * 100)}%</div>\n                      <div className=\"text-sm text-muted-foreground\">Active Rate</div>\n                    </div>\n                    <div className=\"p-4 bg-muted/50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-blue-600\">{users.filter(u => u.area === \"urban\").length}</div>\n                      <div className=\"text-sm text-muted-foreground\">Urban Users</div>\n                    </div>\n                    <div className=\"p-4 bg-muted/50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-purple-600\">{users.filter(u => u.area === \"rural\").length}</div>\n                      <div className=\"text-sm text-muted-foreground\">Rural Users</div>\n                    </div>\n                    <div className=\"p-4 bg-muted/50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-indigo-600\">{users.filter(u => u.mode === \"online\").length}</div>\n                      <div className=\"text-sm text-muted-foreground\">Online Now</div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Users Tab */}\n          <TabsContent value=\"users\" className=\"space-y-6\">\n            {/* Search and Filters */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex flex-col md:flex-row gap-4 items-center justify-between\">\n                  <div className=\"flex-1 flex gap-4\">\n                    <div className=\"relative flex-1 max-w-sm\">\n                      <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        placeholder=\"Search users...\"\n                        value={searchQuery}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                        className=\"pl-8\"\n                      />\n                    </div>\n                    <Select value={statusFilter} onValueChange={setStatusFilter}>\n                      <SelectTrigger className=\"w-32\">\n                        <SelectValue placeholder=\"Status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Status</SelectItem>\n                        <SelectItem value=\"active\">Active</SelectItem>\n                        <SelectItem value=\"pending\">Pending</SelectItem>\n                        <SelectItem value=\"suspended\">Suspended</SelectItem>\n                        <SelectItem value=\"expired\">Expired</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <Select value={areaFilter} onValueChange={setAreaFilter}>\n                      <SelectTrigger className=\"w-32\">\n                        <SelectValue placeholder=\"Area\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Areas</SelectItem>\n                        <SelectItem value=\"urban\">Urban</SelectItem>\n                        <SelectItem value=\"rural\">Rural</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant={viewMode === \"card\" ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setViewMode(\"card\")}\n                    >\n                      <Grid className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant={viewMode === \"table\" ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setViewMode(\"table\")}\n                    >\n                      <List className=\"h-4 w-4\" />\n                    </Button>\n                    <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button>\n                          <UserPlus className=\"w-4 h-4 mr-2\" />\n                          Add User\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-2xl\">\n                        <DialogHeader>\n                          <DialogTitle>Add New User</DialogTitle>\n                        </DialogHeader>\n                        <div className=\"grid grid-cols-2 gap-4 py-4\">\n                          <div>\n                            <Label htmlFor=\"name\">Name</Label>\n                            <Input {...form.register(\"name\")} />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"email\">Email</Label>\n                            <Input {...form.register(\"email\")} type=\"email\" />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"phone\">Phone</Label>\n                            <Input {...form.register(\"phone\")} />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"location\">Location</Label>\n                            <Input {...form.register(\"location\")} />\n                          </div>\n                        </div>\n                        <div className=\"flex justify-end gap-2\">\n                          <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                            Cancel\n                          </Button>\n                          <Button onClick={form.handleSubmit(handleCreateUser)}>\n                            Create User\n                          </Button>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Users Grid/Table */}\n            {viewMode === \"card\" ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {currentUsers.map((user) => (\n                  <Card key={user.id} className=\"hover:shadow-lg transition-shadow\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex justify-between items-start mb-4\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                            <User className=\"w-5 h-5\" />\n                          </div>\n                          <div>\n                            <p className=\"font-semibold\">{user.name}</p>\n                            <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                          </div>\n                        </div>\n                        {getStatusBadge(user.status)}\n                      </div>\n                      \n                      <div className=\"space-y-2 mb-4\">\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <Phone className=\"w-4 h-4 text-muted-foreground\" />\n                          {user.phone}\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n                          {user.location}\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <Wifi className=\"w-4 h-4 text-muted-foreground\" />\n                          {user.serviceProvider || 'No Provider'}\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex gap-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => {\n                            setSelectedUser(user);\n                            setIsViewDialogOpen(true);\n                          }}\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => {\n                            setSelectedUser(user);\n                            form.reset(user);\n                            setIsEditDialogOpen(true);\n                          }}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button variant=\"outline\" size=\"sm\">\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete User</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete this user? This action cannot be undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction onClick={() => handleDeleteUser(user.id)}>\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"p-0\">\n                  <DataTable\n                    data={currentUsers}\n                    columns={[\n                      { key: \"name\", label: \"Name\" },\n                      { key: \"email\", label: \"Email\" },\n                      { key: \"location\", label: \"Location\" },\n                      { key: \"serviceProvider\", label: \"Provider\" },\n                      { \n                        key: \"status\", \n                        label: \"Status\",\n                        render: (value) => getStatusBadge(value)\n                      },\n                      {\n                        key: \"actions\",\n                        label: \"Actions\",\n                        render: (_, user) => (\n                          <div className=\"flex gap-2\">\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => {\n                                setSelectedUser(user);\n                                setIsViewDialogOpen(true);\n                              }}\n                            >\n                              <Eye className=\"w-4 h-4\" />\n                            </Button>\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => {\n                                setSelectedUser(user);\n                                form.reset(user);\n                                setIsEditDialogOpen(true);\n                              }}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <AlertDialog>\n                              <AlertDialogTrigger asChild>\n                                <Button variant=\"outline\" size=\"sm\">\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              </AlertDialogTrigger>\n                              <AlertDialogContent>\n                                <AlertDialogHeader>\n                                  <AlertDialogTitle>Delete User</AlertDialogTitle>\n                                  <AlertDialogDescription>\n                                    Are you sure you want to delete this user? This action cannot be undone.\n                                  </AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                  <AlertDialogAction onClick={() => handleDeleteUser(user.id)}>\n                                    Delete\n                                  </AlertDialogAction>\n                                </AlertDialogFooter>\n                              </AlertDialogContent>\n                            </AlertDialog>\n                          </div>\n                        )\n                      }\n                    ]}\n                  />\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Pagination */}\n            {totalPages > 1 && (\n              <div className=\"flex items-center justify-between\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Showing {(currentPage - 1) * itemsPerPage + 1} to {Math.min(currentPage * itemsPerPage, filteredUsers.length)} of {filteredUsers.length} users\n                </p>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(currentPage - 1)}\n                    disabled={currentPage === 1}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(currentPage + 1)}\n                    disabled={currentPage === totalPages}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Analytics Tab */}\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>User Analytics</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"space-y-4\">\n                    <h3 className=\"font-semibold\">Status Distribution</h3>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span>Active</span>\n                        <span className=\"text-green-600\">{stats.active}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Pending</span>\n                        <span className=\"text-yellow-600\">{stats.pending}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Suspended</span>\n                        <span className=\"text-red-600\">{stats.suspended}</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <h3 className=\"font-semibold\">Area Coverage</h3>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span>Urban</span>\n                        <span className=\"text-blue-600\">{users.filter(u => u.area === \"urban\").length}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Rural</span>\n                        <span className=\"text-purple-600\">{users.filter(u => u.area === \"rural\").length}</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <h3 className=\"font-semibold\">Connection Status</h3>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span>Online</span>\n                        <span className=\"text-green-600\">{users.filter(u => u.mode === \"online\").length}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Offline</span>\n                        <span className=\"text-gray-600\">{users.filter(u => u.mode === \"offline\").length}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Settings Tab */}\n          <TabsContent value=\"settings\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>User Management Settings</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-6\">\n                  <div>\n                    <h3 className=\"font-semibold mb-3\">Display Settings</h3>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span>Default View Mode</span>\n                        <Select value={viewMode} onValueChange={setViewMode as any}>\n                          <SelectTrigger className=\"w-32\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"card\">Card View</SelectItem>\n                            <SelectItem value=\"table\">Table View</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span>Items Per Page</span>\n                        <span className=\"text-muted-foreground\">{itemsPerPage} users</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h3 className=\"font-semibold mb-3\">Export Options</h3>\n                    <div className=\"flex gap-2\">\n                      <Button variant=\"outline\">\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Export CSV\n                      </Button>\n                      <Button variant=\"outline\">\n                        <Upload className=\"w-4 h-4 mr-2\" />\n                        Import Users\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Edit User Dialog */}\n        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Edit User</DialogTitle>\n            </DialogHeader>\n            <div className=\"grid grid-cols-2 gap-4 py-4\">\n              <div>\n                <Label htmlFor=\"edit-name\">Name</Label>\n                <Input\n                  id=\"edit-name\"\n                  {...form.register(\"name\")}\n                  defaultValue={selectedUser?.name}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-email\">Email</Label>\n                <Input\n                  id=\"edit-email\"\n                  {...form.register(\"email\")}\n                  type=\"email\"\n                  defaultValue={selectedUser?.email}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-phone\">Phone</Label>\n                <Input\n                  id=\"edit-phone\"\n                  {...form.register(\"phone\")}\n                  defaultValue={selectedUser?.phone}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-location\">Location</Label>\n                <Input\n                  id=\"edit-location\"\n                  {...form.register(\"location\")}\n                  defaultValue={selectedUser?.location}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-address\">Address</Label>\n                <Input\n                  id=\"edit-address\"\n                  {...form.register(\"address\")}\n                  defaultValue={selectedUser?.address}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-provider\">Service Provider</Label>\n                <Input\n                  id=\"edit-provider\"\n                  {...form.register(\"serviceProvider\")}\n                  defaultValue={selectedUser?.serviceProvider}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-status\">Status</Label>\n                <Select \n                  value={form.watch(\"status\")} \n                  onValueChange={(value) => form.setValue(\"status\", value as any)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"active\">Active</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"suspended\">Suspended</SelectItem>\n                    <SelectItem value=\"expired\">Expired</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"edit-area\">Area</Label>\n                <Select \n                  value={form.watch(\"area\")} \n                  onValueChange={(value) => form.setValue(\"area\", value as any)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select area\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"urban\">Urban</SelectItem>\n                    <SelectItem value=\"rural\">Rural</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <div className=\"flex justify-end gap-2\">\n              <Button variant=\"outline\" onClick={() => setIsEditDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button onClick={form.handleSubmit(handleEditUser)}>\n                Update User\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* View User Dialog */}\n        <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>User Details</DialogTitle>\n            </DialogHeader>\n            {selectedUser && (\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center\">\n                    <User className=\"w-8 h-8\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-xl font-semibold\">{selectedUser.name}</h3>\n                    <p className=\"text-muted-foreground\">{selectedUser.email}</p>\n                    <div className=\"mt-2\">\n                      {getStatusBadge(selectedUser.status)}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-medium text-muted-foreground\">Contact Information</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center gap-3\">\n                        <Phone className=\"w-4 h-4 text-muted-foreground\" />\n                        <span>{selectedUser.phone}</span>\n                      </div>\n                      <div className=\"flex items-center gap-3\">\n                        <Mail className=\"w-4 h-4 text-muted-foreground\" />\n                        <span>{selectedUser.email}</span>\n                      </div>\n                      <div className=\"flex items-center gap-3\">\n                        <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n                        <span>{selectedUser.location}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-medium text-muted-foreground\">Service Information</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center gap-3\">\n                        <Wifi className=\"w-4 h-4 text-muted-foreground\" />\n                        <span>{selectedUser.serviceProvider || 'No Provider'}</span>\n                      </div>\n                      <div className=\"flex items-center gap-3\">\n                        <Activity className=\"w-4 h-4 text-muted-foreground\" />\n                        <span className=\"capitalize\">{selectedUser.mode}</span>\n                      </div>\n                      <div className=\"flex items-center gap-3\">\n                        <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                        <span>Area: {selectedUser.area}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {selectedUser.address && (\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium text-muted-foreground\">Address</h4>\n                    <p>{selectedUser.address}</p>\n                  </div>\n                )}\n\n                {selectedUser.planName && (\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium text-muted-foreground\">Current Plan</h4>\n                    <p>{selectedUser.planName}</p>\n                  </div>\n                )}\n\n                {selectedUser.balanceDue !== undefined && selectedUser.balanceDue > 0 && (\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium text-muted-foreground\">Balance Due</h4>\n                    <p className=\"text-red-600\">${selectedUser.balanceDue}</p>\n                  </div>\n                )}\n\n                <div className=\"pt-4 border-t\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    Created: {new Date(selectedUser.createdAt).toLocaleDateString()}\n                  </p>\n                </div>\n              </div>\n            )}\n            <div className=\"flex justify-end\">\n              <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n                Close\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":38110},"client/src/styles/modern-themes.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');\n\n/* Modern theme variables */\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(221, 83%, 53%);\n  --radius: 0.75rem;\n  \n  /* Sidebar variables */\n  --sidebar-bg: hsl(0, 0%, 100%);\n  --sidebar-border: hsl(214, 13%, 91%);\n  --sidebar-item: hsl(215, 20%, 35%);\n  --sidebar-item-hover: hsl(210, 40%, 96%);\n  --sidebar-item-active: hsl(221, 83%, 53%);\n  --sidebar-item-active-bg: hsl(221, 83%, 95%);\n  --sidebar-icon: hsl(215, 20%, 45%);\n  --sidebar-icon-active: hsl(221, 83%, 53%);\n  --sidebar-text: hsl(215, 25%, 25%);\n  --sidebar-text-active: hsl(221, 83%, 53%);\n  \n  /* Header variables */\n  --header-bg: hsla(0, 0%, 100%, 0.8);\n  --header-border: hsl(214, 13%, 91%);\n  --header-text: hsl(215, 25%, 25%);\n  --header-icon: hsl(215, 20%, 45%);\n  --header-icon-hover: hsl(221, 83%, 53%);\n  --dropdown-bg: hsl(0, 0%, 100%);\n  --dropdown-border: hsl(214, 13%, 91%);\n  --dropdown-item: hsl(215, 25%, 25%);\n  --dropdown-item-hover: hsl(210, 40%, 96%);\n  \n  /* Dashboard variables */\n  --dashboard-bg: hsl(0, 0%, 100%);\n  --dashboard-hero-bg: linear-gradient(135deg, hsl(221, 83%, 98%) 0%, hsl(210, 40%, 96%) 100%);\n  --dashboard-text: hsl(215, 25%, 25%);\n  --dashboard-text-muted: hsl(215, 16%, 47%);\n  --stats-card-bg: hsl(0, 0%, 100%);\n  --stats-card-border: hsl(214, 13%, 91%);\n  --stats-card-hover: hsl(210, 40%, 98%);\n  --badge-super-admin: hsl(45, 93%, 47%);\n  --badge-admin: hsl(221, 83%, 53%);\n  --badge-manager: hsl(142, 71%, 45%);\n  --welcome-icon: hsl(221, 83%, 53%);\n  --chart-bg: hsl(0, 0%, 100%);\n  --chart-border: hsl(214, 13%, 91%);\n}\n\n.dark {\n  --background: hsl(222, 47%, 11%);\n  --foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --popover: hsl(217, 33%, 17%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --card: hsl(217, 33%, 17%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --primary: hsl(179, 82%, 51%);\n  --primary-foreground: hsl(222, 47%, 11%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 50%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(179, 82%, 51%);\n  \n  /* Dark theme sidebar */\n  --sidebar-bg: hsl(215, 25%, 15%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-item: hsl(210, 40%, 85%);\n  --sidebar-item-hover: hsl(217, 33%, 22%);\n  --sidebar-item-active: hsl(179, 82%, 51%);\n  --sidebar-item-active-bg: hsl(179, 82%, 8%);\n  --sidebar-icon: hsl(210, 40%, 75%);\n  --sidebar-icon-active: hsl(179, 82%, 51%);\n  --sidebar-text: hsl(210, 40%, 90%);\n  --sidebar-text-active: hsl(179, 82%, 51%);\n  \n  /* Dark theme header */\n  --header-bg: hsla(215, 25%, 15%, 0.9);\n  --header-border: hsl(217.2, 32.6%, 17.5%);\n  --header-text: hsl(210, 40%, 90%);\n  --header-icon: hsl(210, 40%, 75%);\n  --header-icon-hover: hsl(179, 82%, 51%);\n  --dropdown-bg: hsl(215, 25%, 18%);\n  --dropdown-border: hsl(217.2, 32.6%, 17.5%);\n  --dropdown-item: hsl(210, 40%, 90%);\n  --dropdown-item-hover: hsl(217, 33%, 22%);\n  \n  /* Dark theme dashboard */\n  --dashboard-bg: hsl(222, 47%, 11%);\n  --dashboard-hero-bg: linear-gradient(135deg, hsl(215, 25%, 15%) 0%, hsl(217, 33%, 12%) 100%);\n  --dashboard-text: hsl(210, 40%, 98%);\n  --dashboard-text-muted: hsl(215, 20%, 65%);\n  --stats-card-bg: hsl(217, 33%, 17%);\n  --stats-card-border: hsl(217.2, 32.6%, 17.5%);\n  --stats-card-hover: hsl(217, 33%, 22%);\n  --badge-super-admin: hsl(45, 93%, 57%);\n  --badge-admin: hsl(179, 82%, 51%);\n  --badge-manager: hsl(142, 71%, 55%);\n  --welcome-icon: hsl(179, 82%, 51%);\n  --chart-bg: hsl(217, 33%, 17%);\n  --chart-border: hsl(217.2, 32.6%, 17.5%);\n}\n\n.crypto {\n  --background: hsl(222, 47%, 11%);\n  --foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --popover: hsl(217, 33%, 17%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --card: hsl(217, 33%, 17%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --border: hsla(179, 82%, 51%, 0.2);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --primary: hsl(179, 82%, 51%);\n  --primary-foreground: hsl(222, 47%, 11%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 50%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(179, 82%, 51%);\n  \n  /* Crypto theme sidebar */\n  --sidebar-bg: linear-gradient(135deg, hsl(215, 25%, 12%) 0%, hsl(217, 33%, 8%) 100%);\n  --sidebar-border: hsla(179, 82%, 51%, 0.3);\n  --sidebar-item: hsl(179, 82%, 85%);\n  --sidebar-item-hover: hsla(179, 82%, 51%, 0.15);\n  --sidebar-item-active: hsl(179, 82%, 51%);\n  --sidebar-item-active-bg: hsla(179, 82%, 51%, 0.2);\n  --sidebar-icon: hsl(179, 60%, 70%);\n  --sidebar-icon-active: hsl(179, 82%, 51%);\n  --sidebar-text: hsl(179, 40%, 90%);\n  --sidebar-text-active: hsl(179, 82%, 51%);\n  \n  /* Crypto theme header */\n  --header-bg: linear-gradient(135deg, hsla(215, 25%, 12%, 0.95) 0%, hsla(217, 33%, 8%, 0.9) 100%);\n  --header-border: hsla(179, 82%, 51%, 0.3);\n  --header-text: hsl(179, 40%, 90%);\n  --header-icon: hsl(179, 60%, 70%);\n  --header-icon-hover: hsl(179, 82%, 51%);\n  --dropdown-bg: linear-gradient(135deg, hsl(215, 25%, 12%) 0%, hsl(217, 33%, 8%) 100%);\n  --dropdown-border: hsla(179, 82%, 51%, 0.3);\n  --dropdown-item: hsl(179, 40%, 90%);\n  --dropdown-item-hover: hsla(179, 82%, 51%, 0.15);\n  \n  /* Crypto theme dashboard */\n  --dashboard-bg: hsl(222, 47%, 11%);\n  --dashboard-hero-bg: linear-gradient(135deg, hsl(215, 25%, 12%) 0%, hsl(217, 33%, 8%) 100%);\n  --dashboard-text: hsl(179, 40%, 90%);\n  --dashboard-text-muted: hsl(179, 30%, 70%);\n  --stats-card-bg: linear-gradient(135deg, hsl(217, 33%, 17%) 0%, hsl(215, 25%, 15%) 100%);\n  --stats-card-border: hsla(179, 82%, 51%, 0.2);\n  --stats-card-hover: hsla(179, 82%, 51%, 0.15);\n  --badge-super-admin: hsl(179, 82%, 51%);\n  --badge-admin: hsl(45, 93%, 57%);\n  --badge-manager: hsl(179, 60%, 70%);\n  --welcome-icon: hsl(179, 82%, 51%);\n  --chart-bg: linear-gradient(135deg, hsl(217, 33%, 17%) 0%, hsl(215, 25%, 15%) 100%);\n  --chart-border: hsla(179, 82%, 51%, 0.2);\n}\n\n.neon {\n  --background: hsl(270, 100%, 3%);\n  --foreground: hsl(300, 100%, 95%);\n  --muted: hsl(270, 50%, 15%);\n  --muted-foreground: hsl(270, 30%, 60%);\n  --popover: hsl(270, 80%, 8%);\n  --popover-foreground: hsl(300, 100%, 95%);\n  --card: hsl(270, 80%, 8%);\n  --card-foreground: hsl(300, 100%, 95%);\n  --border: hsla(300, 100%, 50%, 0.3);\n  --input: hsl(270, 50%, 15%);\n  --primary: hsl(300, 100%, 50%);\n  --primary-foreground: hsl(270, 100%, 3%);\n  --secondary: hsl(270, 50%, 15%);\n  --secondary-foreground: hsl(300, 100%, 95%);\n  --accent: hsl(270, 50%, 15%);\n  --accent-foreground: hsl(300, 100%, 95%);\n  --destructive: hsl(0, 100%, 50%);\n  --destructive-foreground: hsl(300, 100%, 95%);\n  --ring: hsl(300, 100%, 50%);\n  \n  /* Neon theme sidebar */\n  --sidebar-bg: linear-gradient(135deg, hsl(270, 80%, 5%) 0%, hsl(270, 100%, 2%) 100%);\n  --sidebar-border: hsla(300, 100%, 50%, 0.4);\n  --sidebar-item: hsl(300, 80%, 90%);\n  --sidebar-item-hover: hsla(300, 100%, 50%, 0.15);\n  --sidebar-item-active: hsl(300, 100%, 50%);\n  --sidebar-item-active-bg: hsla(300, 100%, 50%, 0.25);\n  --sidebar-icon: hsl(300, 60%, 75%);\n  --sidebar-icon-active: hsl(300, 100%, 50%);\n  --sidebar-text: hsl(300, 80%, 95%);\n  --sidebar-text-active: hsl(300, 100%, 50%);\n  \n  /* Neon theme header */\n  --header-bg: linear-gradient(135deg, hsla(270, 80%, 5%, 0.95) 0%, hsla(270, 100%, 2%, 0.9) 100%);\n  --header-border: hsla(300, 100%, 50%, 0.4);\n  --header-text: hsl(300, 80%, 95%);\n  --header-icon: hsl(300, 60%, 75%);\n  --header-icon-hover: hsl(300, 100%, 50%);\n  --dropdown-bg: linear-gradient(135deg, hsl(270, 80%, 5%) 0%, hsl(270, 100%, 2%) 100%);\n  --dropdown-border: hsla(300, 100%, 50%, 0.4);\n  --dropdown-item: hsl(300, 80%, 95%);\n  --dropdown-item-hover: hsla(300, 100%, 50%, 0.15);\n  \n  /* Neon theme dashboard */\n  --dashboard-bg: hsl(270, 100%, 3%);\n  --dashboard-hero-bg: linear-gradient(135deg, hsl(270, 80%, 5%) 0%, hsl(270, 100%, 2%) 100%);\n  --dashboard-text: hsl(300, 100%, 95%);\n  --dashboard-text-muted: hsl(300, 60%, 80%);\n  --stats-card-bg: linear-gradient(135deg, hsl(270, 80%, 8%) 0%, hsl(270, 100%, 5%) 100%);\n  --stats-card-border: hsla(300, 100%, 50%, 0.3);\n  --stats-card-hover: hsla(300, 100%, 50%, 0.15);\n  --badge-super-admin: hsl(300, 100%, 50%);\n  --badge-admin: hsl(270, 80%, 60%);\n  --badge-manager: hsl(300, 60%, 75%);\n  --welcome-icon: hsl(300, 100%, 50%);\n  --chart-bg: linear-gradient(135deg, hsl(270, 80%, 8%) 0%, hsl(270, 100%, 5%) 100%);\n  --chart-border: hsla(300, 100%, 50%, 0.3);\n}\n\n/* Modern component styles */\n.gradient-bg {\n  background: linear-gradient(135deg, hsl(var(--background)) 0%, hsl(var(--muted)) 100%);\n}\n\n.glass-effect {\n  backdrop-filter: blur(10px);\n  background: hsla(var(--card), 0.8);\n  border: 1px solid hsla(var(--border), 0.5);\n}\n\n.neon-glow {\n  box-shadow: 0 0 20px hsla(var(--primary), 0.3);\n}\n\n.crypto-card {\n  background: linear-gradient(135deg, hsl(var(--card)) 0%, hsl(var(--muted)) 100%);\n  border: 1px solid hsla(var(--primary), 0.2);\n}\n\n/* Theme-specific sidebar effects */\n.light .sidebar-gradient {\n  background: var(--sidebar-bg);\n  border-right: 1px solid var(--sidebar-border);\n}\n\n.dark .sidebar-gradient {\n  background: var(--sidebar-bg);\n  border-right: 1px solid var(--sidebar-border);\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\n}\n\n.crypto .sidebar-gradient {\n  background: var(--sidebar-bg);\n  border-right: 1px solid var(--sidebar-border);\n  box-shadow: \n    0 4px 20px rgba(0, 0, 0, 0.4),\n    inset 0 1px 0 hsla(179, 82%, 51%, 0.1);\n}\n\n.neon .sidebar-gradient {\n  background: var(--sidebar-bg);\n  border-right: 1px solid var(--sidebar-border);\n  box-shadow: \n    0 4px 20px rgba(0, 0, 0, 0.5),\n    inset 0 1px 0 hsla(300, 100%, 50%, 0.2),\n    0 0 40px hsla(300, 100%, 50%, 0.1);\n}\n\n/* Theme-specific header effects */\n.light header {\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.dark header {\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);\n}\n\n.crypto header {\n  box-shadow: \n    0 1px 3px rgba(0, 0, 0, 0.4),\n    inset 0 -1px 0 hsla(179, 82%, 51%, 0.1);\n}\n\n.neon header {\n  box-shadow: \n    0 1px 3px rgba(0, 0, 0, 0.5),\n    inset 0 -1px 0 hsla(300, 100%, 50%, 0.2),\n    0 0 20px hsla(300, 100%, 50%, 0.05);\n}\n\n/* Theme dropdown styling */\n.theme-dropdown {\n  background: hsl(var(--popover));\n  border: 1px solid hsl(var(--border));\n  box-shadow: 0 10px 25px hsla(var(--foreground), 0.1);\n}\n\n.theme-dropdown-item {\n  color: hsl(var(--popover-foreground));\n  transition: all 0.2s ease;\n}\n\n.theme-dropdown-item:hover {\n  background: hsl(var(--accent));\n  color: hsl(var(--accent-foreground));\n}\n\n/* Animation improvements */\n.sidebar-item-enter {\n  animation: slideInFromLeft 0.3s ease-out forwards;\n}\n\n@keyframes slideInFromLeft {\n  from {\n    opacity: 0;\n    transform: translateX(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n/* Responsive enhancements */\n@media (max-width: 1024px) {\n  .sidebar-gradient {\n    backdrop-filter: blur(20px);\n  }\n}\n\n.stats-card {\n  position: relative;\n  overflow: hidden;\n  border-radius: var(--radius);\n  border: 1px solid hsl(var(--border));\n  background: hsl(var(--card));\n  color: hsl(var(--card-foreground));\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n  transition: all 0.3s ease;\n}\n\n.stats-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 25px hsla(var(--primary), 0.1);\n}\n\n.sidebar-gradient {\n  background: var(--sidebar-bg);\n}\n\n.animate-float {\n  animation: float 6s ease-in-out infinite;\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n.animate-pulse-slow {\n  animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n.text-gradient {\n  background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--accent-foreground)) 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n/* Dashboard specific styles */\n.dashboard-hero {\n  background: var(--dashboard-hero-bg);\n  color: var(--dashboard-text);\n  min-height: 100vh;\n  transition: all 0.3s ease;\n}\n\n.dashboard-stats-card {\n  background: var(--stats-card-bg);\n  border: 1px solid var(--stats-card-border);\n  transition: all 0.3s ease;\n}\n\n.dashboard-stats-card:hover {\n  background: var(--stats-card-hover);\n  transform: translateY(-2px);\n  box-shadow: 0 10px 25px hsla(var(--primary), 0.15);\n}\n\n.dashboard-chart-card {\n  background: var(--chart-bg);\n  border: 1px solid var(--chart-border);\n  transition: all 0.3s ease;\n}\n\n.dashboard-welcome-text {\n  color: var(--dashboard-text);\n}\n\n.dashboard-welcome-muted {\n  color: var(--dashboard-text-muted);\n}\n\n.dashboard-welcome-icon {\n  color: var(--welcome-icon);\n}\n\n.badge-super-admin {\n  background: var(--badge-super-admin);\n  color: white;\n}\n\n.badge-admin {\n  background: var(--badge-admin);\n  color: white;\n}\n\n.badge-manager {\n  background: var(--badge-manager);\n  color: white;\n}\n\n.sparkle-animation {\n  animation: sparkle 2s infinite;\n}\n\n@keyframes sparkle {\n  0%, 100% { transform: scale(1) rotate(0deg); }\n  25% { transform: scale(1.1) rotate(90deg); }\n  50% { transform: scale(1) rotate(180deg); }\n  75% { transform: scale(1.1) rotate(270deg); }\n}\n\n.rainbow-border {\n  position: relative;\n  border: 2px solid transparent;\n  background: var(--stats-card-bg);\n}\n\n.rainbow-border::before {\n  content: '';\n  position: absolute;\n  top: -2px;\n  left: -2px;\n  right: -2px;\n  bottom: -2px;\n  background: linear-gradient(45deg, \n    var(--badge-super-admin), \n    var(--badge-admin), \n    var(--badge-manager), \n    var(--welcome-icon)\n  );\n  border-radius: inherit;\n  z-index: -1;\n  background-size: 200% 200%;\n  animation: gradient-shift 3s ease infinite;\n}\n\n@keyframes gradient-shift {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n\n/* Theme specific glow effects */\n.crypto .dashboard-stats-card {\n  box-shadow: 0 0 15px hsla(179, 82%, 51%, 0.1);\n}\n\n.crypto .dashboard-stats-card:hover {\n  box-shadow: 0 0 25px hsla(179, 82%, 51%, 0.2);\n}\n\n.neon .dashboard-stats-card {\n  box-shadow: 0 0 15px hsla(300, 100%, 50%, 0.1);\n}\n\n.neon .dashboard-stats-card:hover {\n  box-shadow: 0 0 25px hsla(300, 100%, 50%, 0.2);\n}","size_bytes":15242},"client/src/components/charts/complaint-chart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { BarChart3, TrendingUp, TrendingDown } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  BarChart,\n  Bar,\n  Area,\n  AreaChart,\n} from \"recharts\";\n\ninterface ComplaintChartProps {\n  title: string;\n  data?: any[];\n  type?: \"line\" | \"bar\" | \"area\";\n}\n\n// Generate realistic network performance data\nconst generateNetworkData = (days: number) => {\n  const data = [];\n  const baseUptime = 99.5;\n  const baseLatency = 15;\n  const baseSpeed = 950;\n  \n  // Adjust sample frequency based on time range\n  const sampleFrequency = days <= 7 ? 1 : days <= 30 ? 2 : 7;\n  \n  for (let i = days; i >= 0; i -= sampleFrequency) {\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n    \n    // Add some realistic variance with trending\n    const trendFactor = i / days; // Earlier data has more variance\n    const uptimeVariance = (Math.random() - 0.5) * 1.5 * (1 + trendFactor);\n    const latencyVariance = (Math.random() - 0.5) * 8 * (1 + trendFactor);\n    const speedVariance = (Math.random() - 0.5) * 200 * (1 + trendFactor);\n    \n    data.push({\n      date: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n      uptime: Math.max(95, Math.min(100, baseUptime + uptimeVariance)),\n      latency: Math.max(5, baseLatency + latencyVariance),\n      speed: Math.max(500, baseSpeed + speedVariance),\n      complaints: Math.floor(Math.random() * 12) + 1,\n      resolved: Math.floor(Math.random() * 15) + 5,\n    });\n  }\n  \n  return data.reverse(); // Show chronological order\n};\n\nconst generateComplaintData = (days: number) => {\n  const data = [];\n  // Adjust sample frequency based on time range\n  const sampleFrequency = days <= 7 ? 1 : days <= 30 ? 2 : 7;\n  \n  for (let i = days; i >= 0; i -= sampleFrequency) {\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n    \n    // Add trending - issues tend to be higher in the past\n    const trendFactor = i / days;\n    const basePending = 2 + Math.floor(trendFactor * 3);\n    const baseAssigned = 3 + Math.floor(trendFactor * 5);\n    const baseInProgress = 4 + Math.floor(trendFactor * 4);\n    const baseResolved = 8 + Math.floor(trendFactor * 8);\n    \n    data.push({\n      date: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n      pending: Math.floor(Math.random() * 8) + basePending,\n      assigned: Math.floor(Math.random() * 12) + baseAssigned,\n      inProgress: Math.floor(Math.random() * 10) + baseInProgress,\n      resolved: Math.floor(Math.random() * 20) + baseResolved,\n    });\n  }\n  \n  return data.reverse(); // Show chronological order\n};\n\nexport function ComplaintChart({ title, data = [], type = \"line\" }: ComplaintChartProps) {\n  const [timeRange, setTimeRange] = useState(\"7\");\n  const [chartType, setChartType] = useState<\"line\" | \"bar\" | \"area\">(type);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const chartData = title.toLowerCase().includes(\"network\") \n    ? generateNetworkData(parseInt(timeRange))\n    : generateComplaintData(parseInt(timeRange));\n\n  const handleTimeRangeChange = (newRange: string) => {\n    setIsLoading(true);\n    setTimeRange(newRange);\n    // Simulate loading time for better UX\n    setTimeout(() => setIsLoading(false), 300);\n  };\n\n  const handleChartTypeChange = (newType: string) => {\n    setIsLoading(true);\n    setChartType(newType as \"line\" | \"bar\" | \"area\");\n    setTimeout(() => setIsLoading(false), 200);\n  };\n  \n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-card border border-border rounded-lg p-3 shadow-lg\">\n          <p className=\"text-foreground font-medium\">{label}</p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              {entry.name}: {typeof entry.value === 'number' ? entry.value.toFixed(1) : entry.value}\n              {entry.name === 'uptime' && '%'}\n              {entry.name === 'latency' && 'ms'}\n              {entry.name === 'speed' && 'Mbps'}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const renderChart = () => {\n    const chartProps = {\n      data: chartData,\n      margin: { top: 5, right: 30, left: 20, bottom: 5 },\n    };\n\n    if (title.toLowerCase().includes(\"network\")) {\n      if (chartType === \"line\") {\n        return (\n          <LineChart {...chartProps}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n            <XAxis dataKey=\"date\" stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n            <YAxis stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n            <Tooltip content={<CustomTooltip />} />\n            <Legend />\n            <Line \n              type=\"monotone\" \n              dataKey=\"uptime\" \n              stroke=\"hsl(var(--primary))\" \n              strokeWidth={2}\n              name=\"Uptime (%)\"\n              dot={{ fill: \"hsl(var(--primary))\", strokeWidth: 2 }}\n            />\n            <Line \n              type=\"monotone\" \n              dataKey=\"latency\" \n              stroke=\"#ef4444\" \n              strokeWidth={2}\n              name=\"Latency (ms)\"\n              dot={{ fill: \"#ef4444\", strokeWidth: 2 }}\n            />\n          </LineChart>\n        );\n      } else if (chartType === \"area\") {\n        return (\n          <AreaChart {...chartProps}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n            <XAxis dataKey=\"date\" stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n            <YAxis stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n            <Tooltip content={<CustomTooltip />} />\n            <Legend />\n            <Area \n              type=\"monotone\" \n              dataKey=\"speed\" \n              stroke=\"hsl(var(--primary))\" \n              fill=\"hsl(var(--primary) / 0.2)\"\n              name=\"Speed (Mbps)\"\n            />\n            <Area \n              type=\"monotone\" \n              dataKey=\"uptime\" \n              stroke=\"#10b981\" \n              fill=\"rgba(16, 185, 129, 0.1)\"\n              name=\"Uptime (%)\"\n            />\n          </AreaChart>\n        );\n      }\n    } else {\n      return (\n        <BarChart {...chartProps}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n          <XAxis dataKey=\"date\" stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n          <YAxis stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n          <Tooltip content={<CustomTooltip />} />\n          <Legend />\n          <Bar dataKey=\"pending\" fill=\"#ef4444\" name=\"Pending\" />\n          <Bar dataKey=\"assigned\" fill=\"#f59e0b\" name=\"Assigned\" />\n          <Bar dataKey=\"inProgress\" fill=\"#3b82f6\" name=\"In Progress\" />\n          <Bar dataKey=\"resolved\" fill=\"#10b981\" name=\"Resolved\" />\n        </BarChart>\n      );\n    }\n  };\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-foreground\">{title}</h3>\n        <div className=\"flex items-center gap-3\">\n          <Select value={timeRange} onValueChange={handleTimeRangeChange} disabled={isLoading}>\n            <SelectTrigger className=\"w-[140px] h-8 text-sm border-border/50 hover:border-border transition-colors\">\n              <SelectValue placeholder=\"Select range\" />\n            </SelectTrigger>\n            <SelectContent className=\"min-w-[140px]\">\n              <SelectItem value=\"7\">Last 7 days</SelectItem>\n              <SelectItem value=\"30\">Last 30 days</SelectItem>\n              <SelectItem value=\"90\">Last 3 months</SelectItem>\n            </SelectContent>\n          </Select>\n          {title.toLowerCase().includes(\"network\") && (\n            <Select value={chartType} onValueChange={handleChartTypeChange} disabled={isLoading}>\n              <SelectTrigger className=\"w-[120px] h-8 text-sm border-border/50 hover:border-border transition-colors\">\n                <SelectValue placeholder=\"Chart type\" />\n              </SelectTrigger>\n              <SelectContent className=\"min-w-[120px]\">\n                <SelectItem value=\"line\">Line Chart</SelectItem>\n                <SelectItem value=\"area\">Area Chart</SelectItem>\n              </SelectContent>\n            </Select>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"h-64 w-full relative\">\n        {isLoading && (\n          <div className=\"absolute inset-0 bg-background/50 flex items-center justify-center z-10\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin\"></div>\n              <span className=\"text-sm text-muted-foreground\">Loading...</span>\n            </div>\n          </div>\n        )}\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          {renderChart()}\n        </ResponsiveContainer>\n      </div>\n      \n      {/* Chart Summary */}\n      <div className=\"mt-4 flex items-center justify-between text-sm text-muted-foreground\">\n        <div className=\"flex items-center gap-4\">\n          {title.toLowerCase().includes(\"network\") ? (\n            <>\n              <div className=\"flex items-center gap-1\">\n                <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                <span>Avg Uptime: {chartData.length > 0 ? (chartData.reduce((sum, item) => sum + item.uptime, 0) / chartData.length).toFixed(1) : '0'}%</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <TrendingDown className=\"h-4 w-4 text-red-500\" />\n                <span>Avg Latency: {chartData.length > 0 ? (chartData.reduce((sum, item) => sum + item.latency, 0) / chartData.length).toFixed(1) : '0'}ms</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <BarChart3 className=\"h-4 w-4 text-blue-500\" />\n                <span>Avg Speed: {chartData.length > 0 ? (chartData.reduce((sum, item) => sum + item.speed, 0) / chartData.length).toFixed(0) : '0'} Mbps</span>\n              </div>\n            </>\n          ) : (\n            <>\n              <div className=\"flex items-center gap-1\">\n                <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                <span>Resolution Rate: {chartData.length > 0 ? (chartData.reduce((sum, item) => sum + item.resolved, 0) / chartData.reduce((sum, item) => sum + item.pending + item.assigned + item.inProgress + item.resolved, 0) * 100).toFixed(1) : '0'}%</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <BarChart3 className=\"h-4 w-4 text-blue-500\" />\n                <span>Total Issues: {chartData.reduce((sum, item) => sum + item.pending + item.assigned + item.inProgress + item.resolved, 0)}</span>\n              </div>\n            </>\n          )}\n        </div>\n        <div className=\"text-xs text-muted-foreground\">\n          Data refreshes every {timeRange} days\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11306},"client/src/components/charts/heatmap-chart.tsx":{"content":"import { useState } from \"react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { MapPin, Clock, Users, AlertTriangle } from \"lucide-react\";\n\ninterface HeatmapChartProps {\n  title: string;\n}\n\nconst generateHeatmapData = (type: string) => {\n  const hours = Array.from({ length: 24 }, (_, i) => i);\n  const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n  \n  return days.map(day => ({\n    day,\n    hours: hours.map(hour => {\n      let intensity;\n      \n      if (type === \"complaints\") {\n        // More complaints during business hours and evenings\n        intensity = hour >= 9 && hour <= 17 ? 0.7 + Math.random() * 0.3 :\n                   hour >= 18 && hour <= 22 ? 0.5 + Math.random() * 0.4 :\n                   0.1 + Math.random() * 0.3;\n      } else if (type === \"traffic\") {\n        // Higher network usage during peak hours\n        intensity = hour >= 19 && hour <= 23 ? 0.8 + Math.random() * 0.2 :\n                   hour >= 8 && hour <= 10 ? 0.6 + Math.random() * 0.3 :\n                   hour >= 12 && hour <= 14 ? 0.5 + Math.random() * 0.3 :\n                   0.2 + Math.random() * 0.3;\n      } else {\n        // Engineer activity during work hours\n        intensity = hour >= 8 && hour <= 18 ? 0.8 + Math.random() * 0.2 :\n                   hour >= 19 && hour <= 21 ? 0.3 + Math.random() * 0.3 :\n                   0.05 + Math.random() * 0.15;\n      }\n      \n      // Weekend adjustments\n      if (day === 'Sat' || day === 'Sun') {\n        intensity *= type === \"complaints\" ? 0.6 : type === \"traffic\" ? 1.2 : 0.3;\n      }\n      \n      return {\n        hour,\n        intensity: Math.min(1, intensity),\n        value: Math.floor(intensity * 100)\n      };\n    })\n  }));\n};\n\nconst generateRegionalData = () => {\n  const regions = [\n    { name: 'North District', complaints: 45, customers: 850, satisfaction: 4.2 },\n    { name: 'South District', complaints: 32, customers: 720, satisfaction: 4.5 },\n    { name: 'East District', complaints: 28, customers: 640, satisfaction: 4.6 },\n    { name: 'West District', complaints: 51, customers: 920, satisfaction: 4.1 },\n    { name: 'Central District', complaints: 38, customers: 780, satisfaction: 4.4 },\n    { name: 'Suburban Area', complaints: 22, customers: 560, satisfaction: 4.7 },\n    { name: 'Industrial Zone', complaints: 42, customers: 480, satisfaction: 4.0 },\n    { name: 'Commercial Area', complaints: 35, customers: 690, satisfaction: 4.3 },\n  ];\n  \n  return regions.map(region => ({\n    ...region,\n    complaintRate: ((region.complaints / region.customers) * 100).toFixed(2),\n    efficiency: (region.satisfaction / 5 * 100).toFixed(1)\n  }));\n};\n\nexport function HeatmapChart({ title }: HeatmapChartProps) {\n  const [dataType, setDataType] = useState(\"complaints\");\n  const [viewMode, setViewMode] = useState(\"heatmap\");\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const heatmapData = generateHeatmapData(dataType);\n  const regionalData = generateRegionalData();\n\n  const handleDataTypeChange = (newType: string) => {\n    setIsLoading(true);\n    setDataType(newType);\n    setTimeout(() => setIsLoading(false), 300);\n  };\n\n  const handleViewModeChange = (newMode: string) => {\n    setIsLoading(true);\n    setViewMode(newMode);\n    setTimeout(() => setIsLoading(false), 200);\n  };\n\n  const getIntensityColor = (intensity: number) => {\n    if (intensity < 0.2) return 'bg-green-100 text-green-800';\n    if (intensity < 0.4) return 'bg-yellow-100 text-yellow-800';\n    if (intensity < 0.6) return 'bg-orange-100 text-orange-800';\n    if (intensity < 0.8) return 'bg-red-100 text-red-800';\n    return 'bg-red-200 text-red-900';\n  };\n\n  const getRegionColor = (rate: number) => {\n    if (rate < 3) return 'bg-green-100 text-green-800 border-green-200';\n    if (rate < 5) return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n    if (rate < 7) return 'bg-orange-100 text-orange-800 border-orange-200';\n    return 'bg-red-100 text-red-800 border-red-200';\n  };\n\n  const renderHeatmap = () => (\n    <div className=\"w-full overflow-x-auto\">\n      <div className=\"min-w-[800px]\">\n        {/* Hour headers */}\n        <div className=\"flex\">\n          <div className=\"w-16 text-xs text-muted-foreground font-medium py-2\"></div>\n          {Array.from({ length: 24 }, (_, i) => (\n            <div key={i} className=\"flex-1 text-xs text-muted-foreground font-medium text-center py-2 min-w-8\">\n              {i.toString().padStart(2, '0')}\n            </div>\n          ))}\n        </div>\n        \n        {/* Heatmap grid */}\n        {heatmapData.map((dayData) => (\n          <div key={dayData.day} className=\"flex items-center\">\n            <div className=\"w-16 text-xs text-muted-foreground font-medium py-1\">\n              {dayData.day}\n            </div>\n            {dayData.hours.map((hourData) => (\n              <div\n                key={hourData.hour}\n                className={`flex-1 min-w-8 h-8 m-0.5 rounded text-xs flex items-center justify-center font-medium transition-all duration-200 hover:scale-110 cursor-pointer ${getIntensityColor(hourData.intensity)}`}\n                title={`${dayData.day} ${hourData.hour}:00 - ${dataType === 'complaints' ? 'Complaints' : dataType === 'traffic' ? 'Traffic' : 'Activity'}: ${hourData.value}%`}\n              >\n                {hourData.value}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderRegionalView = () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n      {regionalData.map((region) => (\n        <div\n          key={region.name}\n          className={`p-4 rounded-lg border-2 transition-all duration-200 hover:shadow-lg cursor-pointer ${getRegionColor(Number(region.complaintRate))}`}\n        >\n          <div className=\"flex items-center justify-between mb-2\">\n            <h4 className=\"font-semibold text-sm\">{region.name}</h4>\n            <MapPin className=\"h-4 w-4\" />\n          </div>\n          <div className=\"space-y-1 text-xs\">\n            <div className=\"flex justify-between\">\n              <span>Customers:</span>\n              <span className=\"font-medium\">{region.customers.toLocaleString()}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Complaints:</span>\n              <span className=\"font-medium\">{region.complaints}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Rate:</span>\n              <span className=\"font-medium\">{region.complaintRate}%</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Satisfaction:</span>\n              <span className=\"font-medium\">{region.satisfaction}/5</span>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const getDataTypeMetrics = () => {\n    if (dataType === \"complaints\") {\n      return {\n        peak: \"18:00-22:00\",\n        low: \"02:00-06:00\", \n        avg: \"45\",\n        unit: \"complaints/day\"\n      };\n    } else if (dataType === \"traffic\") {\n      return {\n        peak: \"19:00-23:00\",\n        low: \"03:00-07:00\",\n        avg: \"78\",\n        unit: \"% utilization\"\n      };\n    } else {\n      return {\n        peak: \"09:00-17:00\",\n        low: \"22:00-08:00\",\n        avg: \"89\",\n        unit: \"% efficiency\"\n      };\n    }\n  };\n\n  const metrics = getDataTypeMetrics();\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-foreground\">{title}</h3>\n        <div className=\"flex items-center gap-3\">\n          <Select value={viewMode} onValueChange={handleViewModeChange} disabled={isLoading}>\n            <SelectTrigger className=\"w-[120px] h-8 text-sm border-border/50 hover:border-border transition-colors\">\n              <SelectValue placeholder=\"View mode\" />\n            </SelectTrigger>\n            <SelectContent className=\"min-w-[120px]\">\n              <SelectItem value=\"heatmap\">Heatmap</SelectItem>\n              <SelectItem value=\"regional\">Regional</SelectItem>\n            </SelectContent>\n          </Select>\n          {viewMode === \"heatmap\" && (\n            <Select value={dataType} onValueChange={handleDataTypeChange} disabled={isLoading}>\n              <SelectTrigger className=\"w-[120px] h-8 text-sm border-border/50 hover:border-border transition-colors\">\n                <SelectValue placeholder=\"Data type\" />\n              </SelectTrigger>\n              <SelectContent className=\"min-w-[120px]\">\n                <SelectItem value=\"complaints\">Complaints</SelectItem>\n                <SelectItem value=\"traffic\">Traffic</SelectItem>\n                <SelectItem value=\"activity\">Activity</SelectItem>\n              </SelectContent>\n            </Select>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"relative\">\n        {isLoading && (\n          <div className=\"absolute inset-0 bg-background/50 flex items-center justify-center z-10\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin\"></div>\n              <span className=\"text-sm text-muted-foreground\">Loading...</span>\n            </div>\n          </div>\n        )}\n        \n        <div className=\"bg-card rounded-lg border p-4\">\n          {viewMode === \"heatmap\" ? renderHeatmap() : renderRegionalView()}\n        </div>\n      </div>\n      \n      {/* Summary */}\n      <div className=\"mt-4 flex items-center justify-between text-sm text-muted-foreground\">\n        {viewMode === \"heatmap\" ? (\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-1\">\n              <Clock className=\"h-4 w-4 text-red-500\" />\n              <span>Peak: {metrics.peak}</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Users className=\"h-4 w-4 text-green-500\" />\n              <span>Low: {metrics.low}</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <AlertTriangle className=\"h-4 w-4 text-blue-500\" />\n              <span>Avg: {metrics.avg} {metrics.unit}</span>\n            </div>\n          </div>\n        ) : (\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-1\">\n              <MapPin className=\"h-4 w-4 text-blue-500\" />\n              <span>Total Regions: {regionalData.length}</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Users className=\"h-4 w-4 text-green-500\" />\n              <span>Total Customers: {regionalData.reduce((sum, r) => sum + r.customers, 0).toLocaleString()}</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\n              <span>Avg Satisfaction: {(regionalData.reduce((sum, r) => sum + r.satisfaction, 0) / regionalData.length).toFixed(1)}/5</span>\n            </div>\n          </div>\n        )}\n        <div className=\"text-xs text-muted-foreground\">\n          {viewMode === \"heatmap\" ? `${dataType.charAt(0).toUpperCase() + dataType.slice(1)} Pattern` : \"Geographic Overview\"}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11334},"client/src/components/charts/performance-chart.tsx":{"content":"import { useState } from \"react\";\nimport {\n  ResponsiveContainer,\n  RadarChart,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  Radar,\n  Legend,\n  Tooltip,\n  ScatterChart,\n  Scatter,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Cell,\n} from \"recharts\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Activity, Zap, Shield } from \"lucide-react\";\n\ninterface PerformanceChartProps {\n  title: string;\n}\n\nconst generatePerformanceData = () => {\n  return [\n    {\n      metric: 'Network Uptime',\n      current: 99.2 + Math.random() * 0.7,\n      target: 99.5,\n      industry: 98.8,\n    },\n    {\n      metric: 'Response Time',\n      current: 92 + Math.random() * 6,\n      target: 95,\n      industry: 85,\n    },\n    {\n      metric: 'Customer Satisfaction',\n      current: 88 + Math.random() * 8,\n      target: 90,\n      industry: 82,\n    },\n    {\n      metric: 'Issue Resolution',\n      current: 94 + Math.random() * 4,\n      target: 95,\n      industry: 87,\n    },\n    {\n      metric: 'Engineer Efficiency',\n      current: 89 + Math.random() * 7,\n      target: 92,\n      industry: 83,\n    },\n    {\n      metric: 'System Reliability',\n      current: 96 + Math.random() * 3,\n      target: 98,\n      industry: 91,\n    },\n  ];\n};\n\nconst generateScatterData = () => {\n  const regions = ['North', 'South', 'East', 'West', 'Central'];\n  const colors = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];\n  \n  return regions.map((region, index) => ({\n    region,\n    color: colors[index],\n    data: Array.from({ length: 15 }, (_, i) => ({\n      satisfaction: 75 + Math.random() * 20,\n      responseTime: 0.5 + Math.random() * 2.5,\n      customers: 50 + Math.random() * 200,\n    }))\n  }));\n};\n\nconst generateEngineersData = () => {\n  return Array.from({ length: 20 }, (_, i) => ({\n    name: `Engineer ${i + 1}`,\n    efficiency: 70 + Math.random() * 25,\n    satisfaction: 75 + Math.random() * 20,\n    issues: Math.floor(Math.random() * 50) + 10,\n    specialization: ['Network', 'Hardware', 'Software', 'Installation'][Math.floor(Math.random() * 4)],\n  }));\n};\n\nexport function PerformanceChart({ title }: PerformanceChartProps) {\n  const [chartType, setChartType] = useState(\"radar\");\n  const [dataSource, setDataSource] = useState(\"performance\");\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const performanceData = generatePerformanceData();\n  const scatterData = generateScatterData();\n  const engineersData = generateEngineersData();\n\n  const handleChartTypeChange = (newType: string) => {\n    setIsLoading(true);\n    setChartType(newType);\n    setTimeout(() => setIsLoading(false), 200);\n  };\n\n  const handleDataSourceChange = (newSource: string) => {\n    setIsLoading(true);\n    setDataSource(newSource);\n    setTimeout(() => setIsLoading(false), 300);\n  };\n  \n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-card border border-border rounded-lg p-3 shadow-lg\">\n          <p className=\"text-foreground font-medium\">{label}</p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              {entry.name}: {typeof entry.value === 'number' ? entry.value.toFixed(1) : entry.value}\n              {entry.name.includes('Time') ? 'h' : entry.name.includes('Satisfaction') || entry.name.includes('Uptime') ? '%' : ''}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const ScatterTooltip = ({ active, payload }: any) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload;\n      return (\n        <div className=\"bg-card border border-border rounded-lg p-3 shadow-lg\">\n          <p className=\"text-foreground font-medium\">Region Analysis</p>\n          <p className=\"text-sm text-blue-500\">Satisfaction: {data.satisfaction.toFixed(1)}%</p>\n          <p className=\"text-sm text-green-500\">Response Time: {data.responseTime.toFixed(1)}h</p>\n          <p className=\"text-sm text-purple-500\">Customers: {data.customers.toFixed(0)}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const renderChart = () => {\n    if (dataSource === \"regions\" && chartType === \"scatter\") {\n      return (\n        <ScatterChart margin={{ top: 20, right: 20, bottom: 20, left: 20 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n          <XAxis \n            type=\"number\" \n            dataKey=\"satisfaction\" \n            name=\"Satisfaction\" \n            unit=\"%\" \n            stroke=\"hsl(var(--muted-foreground))\" \n            fontSize={12}\n            domain={[70, 100]}\n          />\n          <YAxis \n            type=\"number\" \n            dataKey=\"responseTime\" \n            name=\"Response Time\" \n            unit=\"h\" \n            stroke=\"hsl(var(--muted-foreground))\" \n            fontSize={12}\n            domain={[0, 3]}\n          />\n          <Tooltip content={<ScatterTooltip />} />\n          <Legend />\n          {scatterData.map((regionData, index) => (\n            <Scatter\n              key={regionData.region}\n              name={regionData.region}\n              data={regionData.data}\n              fill={regionData.color}\n            />\n          ))}\n        </ScatterChart>\n      );\n    }\n\n    if (dataSource === \"engineers\") {\n      return (\n        <ScatterChart data={engineersData} margin={{ top: 20, right: 20, bottom: 20, left: 20 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n          <XAxis \n            dataKey=\"efficiency\" \n            name=\"Efficiency\" \n            unit=\"%\" \n            stroke=\"hsl(var(--muted-foreground))\" \n            fontSize={12}\n          />\n          <YAxis \n            dataKey=\"satisfaction\" \n            name=\"Customer Satisfaction\" \n            unit=\"%\" \n            stroke=\"hsl(var(--muted-foreground))\" \n            fontSize={12}\n          />\n          <Tooltip content={<CustomTooltip />} />\n          <Scatter dataKey=\"issues\" fill=\"#3b82f6\" name=\"Engineers\">\n            {engineersData.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={\n                entry.specialization === 'Network' ? '#3b82f6' :\n                entry.specialization === 'Hardware' ? '#10b981' :\n                entry.specialization === 'Software' ? '#f59e0b' : '#ef4444'\n              } />\n            ))}\n          </Scatter>\n        </ScatterChart>\n      );\n    }\n\n    // Default radar chart for performance data\n    return (\n      <RadarChart data={performanceData} margin={{ top: 20, right: 20, bottom: 20, left: 20 }}>\n        <PolarGrid stroke=\"hsl(var(--border))\" />\n        <PolarAngleAxis dataKey=\"metric\" tick={{ fontSize: 12, fill: 'hsl(var(--muted-foreground))' }} />\n        <PolarRadiusAxis \n          angle={90} \n          domain={[0, 100]} \n          tick={{ fontSize: 10, fill: 'hsl(var(--muted-foreground))' }}\n        />\n        <Radar\n          name=\"Current Performance\"\n          dataKey=\"current\"\n          stroke=\"#3b82f6\"\n          fill=\"#3b82f6\"\n          fillOpacity={0.2}\n          strokeWidth={2}\n        />\n        <Radar\n          name=\"Target\"\n          dataKey=\"target\"\n          stroke=\"#10b981\"\n          fill=\"#10b981\"\n          fillOpacity={0.1}\n          strokeWidth={2}\n          strokeDasharray=\"5 5\"\n        />\n        <Radar\n          name=\"Industry Average\"\n          dataKey=\"industry\"\n          stroke=\"#f59e0b\"\n          fill=\"#f59e0b\"\n          fillOpacity={0.05}\n          strokeWidth={1}\n          strokeDasharray=\"2 2\"\n        />\n        <Legend />\n        <Tooltip content={<CustomTooltip />} />\n      </RadarChart>\n    );\n  };\n\n  const getCurrentMetrics = () => {\n    if (dataSource === \"performance\") {\n      const avgCurrent = performanceData.reduce((sum, item) => sum + item.current, 0) / performanceData.length;\n      const avgTarget = performanceData.reduce((sum, item) => sum + item.target, 0) / performanceData.length;\n      const avgIndustry = performanceData.reduce((sum, item) => sum + item.industry, 0) / performanceData.length;\n      \n      return {\n        current: avgCurrent.toFixed(1),\n        target: avgTarget.toFixed(1),\n        industry: avgIndustry.toFixed(1),\n        gap: (avgCurrent - avgTarget).toFixed(1)\n      };\n    } else if (dataSource === \"engineers\") {\n      const avgEfficiency = engineersData.reduce((sum, item) => sum + item.efficiency, 0) / engineersData.length;\n      const avgSatisfaction = engineersData.reduce((sum, item) => sum + item.satisfaction, 0) / engineersData.length;\n      const topPerformer = engineersData.reduce((prev, current) => \n        (prev.efficiency + prev.satisfaction) > (current.efficiency + current.satisfaction) ? prev : current\n      );\n      \n      return {\n        efficiency: avgEfficiency.toFixed(1),\n        satisfaction: avgSatisfaction.toFixed(1),\n        topPerformer: topPerformer.name,\n        totalEngineers: engineersData.length\n      };\n    } else {\n      const allData = scatterData.flatMap(region => region.data);\n      const avgSatisfaction = allData.reduce((sum, item) => sum + item.satisfaction, 0) / allData.length;\n      const avgResponseTime = allData.reduce((sum, item) => sum + item.responseTime, 0) / allData.length;\n      const totalCustomers = allData.reduce((sum, item) => sum + item.customers, 0);\n      \n      return {\n        satisfaction: avgSatisfaction.toFixed(1),\n        responseTime: avgResponseTime.toFixed(1),\n        customers: Math.round(totalCustomers),\n        regions: scatterData.length\n      };\n    }\n  };\n\n  const metrics = getCurrentMetrics();\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-foreground\">{title}</h3>\n        <div className=\"flex items-center gap-3\">\n          <Select value={dataSource} onValueChange={handleDataSourceChange} disabled={isLoading}>\n            <SelectTrigger className=\"w-[140px] h-8 text-sm border-border/50 hover:border-border transition-colors\">\n              <SelectValue placeholder=\"Data source\" />\n            </SelectTrigger>\n            <SelectContent className=\"min-w-[140px]\">\n              <SelectItem value=\"performance\">Performance</SelectItem>\n              <SelectItem value=\"engineers\">Engineers</SelectItem>\n              <SelectItem value=\"regions\">Regions</SelectItem>\n            </SelectContent>\n          </Select>\n          <Select value={chartType} onValueChange={handleChartTypeChange} disabled={isLoading}>\n            <SelectTrigger className=\"w-[120px] h-8 text-sm border-border/50 hover:border-border transition-colors\">\n              <SelectValue placeholder=\"Chart type\" />\n            </SelectTrigger>\n            <SelectContent className=\"min-w-[120px]\">\n              <SelectItem value=\"radar\">Radar Chart</SelectItem>\n              <SelectItem value=\"scatter\">Scatter Plot</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n      \n      <div className=\"h-96 w-full relative\">\n        {isLoading && (\n          <div className=\"absolute inset-0 bg-background/50 flex items-center justify-center z-10\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin\"></div>\n              <span className=\"text-sm text-muted-foreground\">Loading...</span>\n            </div>\n          </div>\n        )}\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          {renderChart()}\n        </ResponsiveContainer>\n      </div>\n      \n      {/* Metrics Summary */}\n      <div className=\"mt-4 flex items-center justify-between text-sm text-muted-foreground\">\n        <div className=\"flex items-center gap-4\">\n          {dataSource === \"performance\" && (\n            <>\n              <div className=\"flex items-center gap-1\">\n                <Activity className=\"h-4 w-4 text-blue-500\" />\n                <span>Avg Performance: {metrics.current}%</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Zap className=\"h-4 w-4 text-green-500\" />\n                <span>Target Gap: {metrics.gap}%</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Shield className=\"h-4 w-4 text-orange-500\" />\n                <span>vs Industry: +{(Number(metrics.current) - Number(metrics.industry)).toFixed(1)}%</span>\n              </div>\n            </>\n          )}\n          {dataSource === \"engineers\" && (\n            <>\n              <div className=\"flex items-center gap-1\">\n                <Activity className=\"h-4 w-4 text-blue-500\" />\n                <span>Avg Efficiency: {metrics.efficiency}%</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Zap className=\"h-4 w-4 text-green-500\" />\n                <span>Satisfaction: {metrics.satisfaction}%</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Shield className=\"h-4 w-4 text-purple-500\" />\n                <span>Top: {metrics.topPerformer}</span>\n              </div>\n            </>\n          )}\n          {dataSource === \"regions\" && (\n            <>\n              <div className=\"flex items-center gap-1\">\n                <Activity className=\"h-4 w-4 text-blue-500\" />\n                <span>Avg Satisfaction: {metrics.satisfaction}%</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Zap className=\"h-4 w-4 text-green-500\" />\n                <span>Response Time: {metrics.responseTime}h</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Shield className=\"h-4 w-4 text-purple-500\" />\n                <span>{metrics.regions} Regions</span>\n              </div>\n            </>\n          )}\n        </div>\n        <div className=\"text-xs text-muted-foreground\">\n          {dataSource === \"performance\" ? \"Multi-KPI Analysis\" : \n           dataSource === \"engineers\" ? \"Team Performance\" : \"Geographic Analysis\"}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14204},"client/src/components/charts/revenue-chart.tsx":{"content":"import { useState } from \"react\";\nimport {\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  AreaChart,\n  Area,\n  ComposedChart,\n  Bar,\n} from \"recharts\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { TrendingUp, DollarSign, CreditCard } from \"lucide-react\";\n\ninterface RevenueChartProps {\n  title: string;\n}\n\nconst generateRevenueData = (months: number) => {\n  const data = [];\n  const baseRevenue = 125000;\n  const baseCustomers = 1200;\n  \n  for (let i = months; i >= 0; i--) {\n    const date = new Date();\n    date.setMonth(date.getMonth() - i);\n    \n    // Add growth trend\n    const growthFactor = (months - i) / months;\n    const seasonalVariance = Math.sin((date.getMonth() / 12) * 2 * Math.PI) * 0.1;\n    \n    const revenue = baseRevenue + (growthFactor * 50000) + (Math.random() - 0.5) * 20000 + (seasonalVariance * 15000);\n    const customers = baseCustomers + (growthFactor * 300) + Math.floor((Math.random() - 0.5) * 100);\n    const churn = 2 + Math.random() * 3;\n    const arpu = revenue / customers;\n    \n    data.push({\n      month: date.toLocaleDateString('en-US', { month: 'short', year: '2-digit' }),\n      revenue: Math.round(revenue),\n      customers,\n      churnRate: Number(churn.toFixed(1)),\n      arpu: Math.round(arpu),\n      newCustomers: Math.floor(customers * 0.08 + Math.random() * 20),\n    });\n  }\n  \n  return data.reverse();\n};\n\nexport function RevenueChart({ title }: RevenueChartProps) {\n  const [timeRange, setTimeRange] = useState(\"12\");\n  const [metric, setMetric] = useState(\"revenue\");\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const chartData = generateRevenueData(parseInt(timeRange));\n\n  const handleTimeRangeChange = (newRange: string) => {\n    setIsLoading(true);\n    setTimeRange(newRange);\n    setTimeout(() => setIsLoading(false), 300);\n  };\n\n  const handleMetricChange = (newMetric: string) => {\n    setIsLoading(true);\n    setMetric(newMetric);\n    setTimeout(() => setIsLoading(false), 200);\n  };\n  \n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-card border border-border rounded-lg p-3 shadow-lg\">\n          <p className=\"text-foreground font-medium\">{label}</p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              {entry.name}: {\n                entry.dataKey === 'revenue' ? `$${entry.value.toLocaleString()}` :\n                entry.dataKey === 'churnRate' ? `${entry.value}%` :\n                entry.dataKey === 'arpu' ? `$${entry.value}` :\n                entry.value.toLocaleString()\n              }\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const getMetricConfig = () => {\n    switch(metric) {\n      case \"revenue\":\n        return {\n          dataKey: \"revenue\",\n          color: \"#10b981\",\n          name: \"Revenue ($)\",\n          format: (value: number) => `$${value.toLocaleString()}`\n        };\n      case \"customers\":\n        return {\n          dataKey: \"customers\", \n          color: \"#3b82f6\",\n          name: \"Active Customers\",\n          format: (value: number) => value.toLocaleString()\n        };\n      case \"churn\":\n        return {\n          dataKey: \"churnRate\",\n          color: \"#ef4444\", \n          name: \"Churn Rate (%)\",\n          format: (value: number) => `${value}%`\n        };\n      case \"arpu\":\n        return {\n          dataKey: \"arpu\",\n          color: \"#f59e0b\",\n          name: \"ARPU ($)\",\n          format: (value: number) => `$${value}`\n        };\n      default:\n        return {\n          dataKey: \"revenue\",\n          color: \"#10b981\",\n          name: \"Revenue ($)\",\n          format: (value: number) => `$${value.toLocaleString()}`\n        };\n    }\n  };\n\n  const metricConfig = getMetricConfig();\n\n  const renderChart = () => {\n    if (metric === \"combined\") {\n      return (\n        <ComposedChart data={chartData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n          <XAxis dataKey=\"month\" stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n          <YAxis yAxisId=\"left\" stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n          <YAxis yAxisId=\"right\" orientation=\"right\" stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n          <Tooltip content={<CustomTooltip />} />\n          <Legend />\n          <Area \n            yAxisId=\"left\"\n            type=\"monotone\" \n            dataKey=\"revenue\" \n            fill=\"rgba(16, 185, 129, 0.1)\"\n            stroke=\"#10b981\"\n            name=\"Revenue ($)\"\n          />\n          <Bar yAxisId=\"right\" dataKey=\"newCustomers\" fill=\"#3b82f6\" name=\"New Customers\" />\n          <Line \n            yAxisId=\"right\"\n            type=\"monotone\" \n            dataKey=\"churnRate\" \n            stroke=\"#ef4444\" \n            strokeWidth={2}\n            name=\"Churn Rate (%)\"\n            dot={{ fill: \"#ef4444\", strokeWidth: 2 }}\n          />\n        </ComposedChart>\n      );\n    }\n\n    return (\n      <AreaChart data={chartData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n        <XAxis dataKey=\"month\" stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n        <YAxis stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n        <Tooltip content={<CustomTooltip />} />\n        <Legend />\n        <Area \n          type=\"monotone\" \n          dataKey={metricConfig.dataKey} \n          stroke={metricConfig.color}\n          fill={`${metricConfig.color}20`}\n          name={metricConfig.name}\n          strokeWidth={2}\n        />\n      </AreaChart>\n    );\n  };\n\n  const currentValue = chartData.length > 0 ? chartData[chartData.length - 1][metricConfig.dataKey] : 0;\n  const previousValue = chartData.length > 1 ? chartData[chartData.length - 2][metricConfig.dataKey] : 0;\n  const changePercent = previousValue ? ((currentValue - previousValue) / previousValue * 100).toFixed(1) : \"0\";\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-foreground\">{title}</h3>\n        <div className=\"flex items-center gap-3\">\n          <Select value={timeRange} onValueChange={handleTimeRangeChange} disabled={isLoading}>\n            <SelectTrigger className=\"w-[140px] h-8 text-sm border-border/50 hover:border-border transition-colors\">\n              <SelectValue placeholder=\"Select range\" />\n            </SelectTrigger>\n            <SelectContent className=\"min-w-[140px]\">\n              <SelectItem value=\"6\">Last 6 months</SelectItem>\n              <SelectItem value=\"12\">Last 12 months</SelectItem>\n              <SelectItem value=\"24\">Last 24 months</SelectItem>\n            </SelectContent>\n          </Select>\n          <Select value={metric} onValueChange={handleMetricChange} disabled={isLoading}>\n            <SelectTrigger className=\"w-[140px] h-8 text-sm border-border/50 hover:border-border transition-colors\">\n              <SelectValue placeholder=\"Select metric\" />\n            </SelectTrigger>\n            <SelectContent className=\"min-w-[140px]\">\n              <SelectItem value=\"revenue\">Revenue</SelectItem>\n              <SelectItem value=\"customers\">Customers</SelectItem>\n              <SelectItem value=\"churn\">Churn Rate</SelectItem>\n              <SelectItem value=\"arpu\">ARPU</SelectItem>\n              <SelectItem value=\"combined\">Combined View</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n      \n      <div className=\"h-80 w-full relative\">\n        {isLoading && (\n          <div className=\"absolute inset-0 bg-background/50 flex items-center justify-center z-10\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin\"></div>\n              <span className=\"text-sm text-muted-foreground\">Loading...</span>\n            </div>\n          </div>\n        )}\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          {renderChart()}\n        </ResponsiveContainer>\n      </div>\n      \n      {/* Chart Summary */}\n      <div className=\"mt-4 flex items-center justify-between text-sm text-muted-foreground\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex items-center gap-1\">\n            <TrendingUp className=\"h-4 w-4 text-green-500\" />\n            <span>Current: {metricConfig.format(currentValue)}</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <DollarSign className=\"h-4 w-4 text-blue-500\" />\n            <span>Change: {Number(changePercent) >= 0 ? '+' : ''}{changePercent}%</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <CreditCard className=\"h-4 w-4 text-purple-500\" />\n            <span>Avg: {metricConfig.format(chartData.reduce((sum, item) => sum + item[metricConfig.dataKey], 0) / chartData.length)}</span>\n          </div>\n        </div>\n        <div className=\"text-xs text-muted-foreground\">\n          {metric === \"combined\" ? \"Multi-metric\" : metricConfig.name} - {timeRange} months\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9436},"client/src/components/charts/status-chart.tsx":{"content":"import { useState } from \"react\";\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  PieChart,\n  Pie,\n  Cell,\n} from \"recharts\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface StatusChartProps {\n  title: string;\n  data?: any[];\n}\n\n// Generate realistic status data\nconst generateStatusData = (days: number) => {\n  const data = [];\n  // Adjust sample frequency based on time range\n  const sampleFrequency = days <= 7 ? 1 : days <= 30 ? 2 : 7;\n  \n  for (let i = days; i >= 0; i -= sampleFrequency) {\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n    \n    // Add trending - more issues in the past, improving over time\n    const trendFactor = i / days;\n    const basePending = 2 + Math.floor(trendFactor * 4);\n    const baseAssigned = 3 + Math.floor(trendFactor * 6);\n    const baseInProgress = 4 + Math.floor(trendFactor * 5);\n    const baseResolved = 8 + Math.floor(trendFactor * 10);\n    \n    data.push({\n      date: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n      pending: Math.floor(Math.random() * 8) + basePending,\n      assigned: Math.floor(Math.random() * 12) + baseAssigned,\n      inProgress: Math.floor(Math.random() * 10) + baseInProgress,\n      resolved: Math.floor(Math.random() * 20) + baseResolved,\n    });\n  }\n  \n  return data.reverse(); // Show chronological order\n};\n\nconst getCurrentStatusDistribution = (timeRange: string) => {\n  const multiplier = timeRange === \"7\" ? 1 : timeRange === \"30\" ? 4 : 12;\n  const baseValues = [\n    { name: 'Pending', value: 14, color: '#ef4444' },\n    { name: 'Assigned', value: 28, color: '#f59e0b' },\n    { name: 'In Progress', value: 31, color: '#3b82f6' },\n    { name: 'Resolved', value: 142, color: '#10b981' },\n  ];\n  \n  return baseValues.map(item => ({\n    ...item,\n    value: Math.floor(item.value * multiplier + (Math.random() - 0.5) * 10)\n  }));\n};\n\nexport function StatusChart({ title, data = [] }: StatusChartProps) {\n  const [timeRange, setTimeRange] = useState(\"7\");\n  const [chartType, setChartType] = useState<\"bar\" | \"pie\">(\"bar\");\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const chartData = generateStatusData(parseInt(timeRange));\n  const pieData = getCurrentStatusDistribution(timeRange);\n\n  const handleTimeRangeChange = (newRange: string) => {\n    setIsLoading(true);\n    setTimeRange(newRange);\n    setTimeout(() => setIsLoading(false), 300);\n  };\n\n  const handleChartTypeChange = (newType: string) => {\n    setIsLoading(true);\n    setChartType(newType as \"bar\" | \"pie\");\n    setTimeout(() => setIsLoading(false), 200);\n  };\n  \n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-card border border-border rounded-lg p-3 shadow-lg\">\n          <p className=\"text-foreground font-medium\">{label}</p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              {entry.name}: {entry.value}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const PieTooltip = ({ active, payload }: any) => {\n    if (active && payload && payload.length) {\n      const data = payload[0];\n      return (\n        <div className=\"bg-card border border-border rounded-lg p-3 shadow-lg\">\n          <p className=\"text-foreground font-medium\">{data.name}</p>\n          <p className=\"text-sm\" style={{ color: data.payload.color }}>\n            Count: {data.value}\n          </p>\n          <p className=\"text-sm text-muted-foreground\">\n            {((data.value / pieData.reduce((sum, item) => sum + item.value, 0)) * 100).toFixed(1)}%\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const renderChart = () => {\n    if (chartType === \"pie\") {\n      return (\n        <PieChart>\n          <Pie\n            data={pieData}\n            cx=\"50%\"\n            cy=\"50%\"\n            innerRadius={60}\n            outerRadius={100}\n            paddingAngle={5}\n            dataKey=\"value\"\n          >\n            {pieData.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={entry.color} />\n            ))}\n          </Pie>\n          <Tooltip content={<PieTooltip />} />\n          <Legend \n            formatter={(value) => <span className=\"text-foreground\">{value}</span>}\n          />\n        </PieChart>\n      );\n    }\n\n    return (\n      <BarChart data={chartData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n        <XAxis dataKey=\"date\" stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n        <YAxis stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n        <Tooltip content={<CustomTooltip />} />\n        <Legend />\n        <Bar dataKey=\"pending\" fill=\"#ef4444\" name=\"Pending\" />\n        <Bar dataKey=\"assigned\" fill=\"#f59e0b\" name=\"Assigned\" />\n        <Bar dataKey=\"inProgress\" fill=\"#3b82f6\" name=\"In Progress\" />\n        <Bar dataKey=\"resolved\" fill=\"#10b981\" name=\"Resolved\" />\n      </BarChart>\n    );\n  };\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-foreground\">{title}</h3>\n        <div className=\"flex items-center gap-3\">\n          <Select value={timeRange} onValueChange={handleTimeRangeChange} disabled={isLoading}>\n            <SelectTrigger className=\"w-[140px] h-8 text-sm border-border/50 hover:border-border transition-colors\">\n              <SelectValue placeholder=\"Select range\" />\n            </SelectTrigger>\n            <SelectContent className=\"min-w-[140px]\">\n              <SelectItem value=\"7\">Last 7 days</SelectItem>\n              <SelectItem value=\"30\">Last 30 days</SelectItem>\n              <SelectItem value=\"90\">Last 3 months</SelectItem>\n            </SelectContent>\n          </Select>\n          <Select value={chartType} onValueChange={handleChartTypeChange} disabled={isLoading}>\n            <SelectTrigger className=\"w-[120px] h-8 text-sm border-border/50 hover:border-border transition-colors\">\n              <SelectValue placeholder=\"Chart type\" />\n            </SelectTrigger>\n            <SelectContent className=\"min-w-[120px]\">\n              <SelectItem value=\"bar\">Bar Chart</SelectItem>\n              <SelectItem value=\"pie\">Pie Chart</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n      \n      <div className=\"h-64 w-full relative\">\n        {isLoading && (\n          <div className=\"absolute inset-0 bg-background/50 flex items-center justify-center z-10\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin\"></div>\n              <span className=\"text-sm text-muted-foreground\">Loading...</span>\n            </div>\n          </div>\n        )}\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          {renderChart()}\n        </ResponsiveContainer>\n      </div>\n      \n      {/* Chart Summary */}\n      <div className=\"mt-4 flex items-center justify-between text-sm text-muted-foreground\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex items-center gap-1\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n            <span>Resolution Rate: {pieData.length > 0 ? (pieData.find(item => item.name === 'Resolved')?.value || 0) / pieData.reduce((sum, item) => sum + item.value, 0) * 100 : 0}%</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n            <span>Total Issues: {pieData.reduce((sum, item) => sum + item.value, 0)}</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n            <span>Pending: {pieData.find(item => item.name === 'Pending')?.value || 0}</span>\n          </div>\n        </div>\n        <div className=\"text-xs text-muted-foreground\">\n          {chartType === \"pie\" ? \"Distribution\" : \"Trends\"} - {timeRange} days\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8335},"client/src/components/layout/header.tsx":{"content":"import { Bell, ChevronDown, Menu, User, Settings, LogOut, Shield, Mail, Phone, Search } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuLabel, \n  DropdownMenuSeparator, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { \n  Popover, \n  PopoverContent, \n  PopoverTrigger \n} from \"@/components/ui/popover\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { GlobalSearch } from \"@/components/search/GlobalSearch\";\n\ninterface HeaderProps {\n  title: string;\n  onMenuClick: () => void;\n}\n\nexport function Header({ title, onMenuClick }: HeaderProps) {\n  const { user, logout } = useAuth();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  \n  // Mock notifications data\n  const notifications = [\n    {\n      id: 1,\n      title: \"New Complaint Assigned\",\n      message: \"Complaint #C001 has been assigned to you\",\n      time: \"2 min ago\",\n      unread: true,\n      type: \"complaint\"\n    },\n    {\n      id: 2,\n      title: \"System Maintenance\",\n      message: \"Scheduled maintenance tonight at 2 AM\",\n      time: \"1 hour ago\",\n      unread: true,\n      type: \"system\"\n    },\n    {\n      id: 3,\n      title: \"Engineer Update\",\n      message: \"John completed installation at Location A\",\n      time: \"3 hours ago\",\n      unread: false,\n      type: \"update\"\n    },\n    {\n      id: 4,\n      title: \"Payment Received\",\n      message: \"Customer #12345 payment processed successfully\",\n      time: \"5 hours ago\",\n      unread: false,\n      type: \"payment\"\n    }\n  ];\n\n  const unreadCount = notifications.filter(n => n.unread).length;\n\n  const getRoleDisplayName = (role: string) => {\n    switch (role) {\n      case \"super-admin\":\n        return \"Super Admin\";\n      case \"admin\":\n        return \"Admin\";\n      case \"manager\":\n        return \"Manager\";\n      default:\n        return role;\n    }\n  };\n\n  const getUserInitials = (email: string) => {\n    return email.split('@')[0].substring(0, 2).toUpperCase();\n  };\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case \"complaint\":\n        return \"🎫\";\n      case \"system\":\n        return \"⚙️\";\n      case \"update\":\n        return \"📋\";\n      case \"payment\":\n        return \"💳\";\n      default:\n        return \"📢\";\n    }\n  };\n\n  return (\n    <header \n      className=\"backdrop-blur-md border-b sticky top-0 z-50 transition-all duration-300\"\n      style={{\n        background: \"var(--header-bg)\",\n        borderColor: \"var(--header-border)\"\n      }}\n    >\n      <div className=\"flex items-center justify-between px-4 sm:px-6 py-3 sm:py-4\">\n        {/* Left Section */}\n        <div className=\"flex items-center flex-1\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            className=\"lg:hidden mr-2 sm:mr-4 transition-all duration-200\"\n            style={{\n              color: \"var(--header-icon)\",\n            }}\n            onMouseEnter={(e) => e.currentTarget.style.color = \"var(--header-icon-hover)\"}\n            onMouseLeave={(e) => e.currentTarget.style.color = \"var(--header-icon)\"}\n            onClick={onMenuClick}\n          >\n            <Menu className=\"h-6 w-6\" />\n          </Button>\n          <h1 \n            className=\"text-lg sm:text-xl lg:text-2xl font-bold tracking-tight mr-4 transition-colors duration-200\"\n            style={{ color: \"var(--header-text)\" }}\n          >\n            {title}\n          </h1>\n          \n          {/* Global Search - Hidden on small screens */}\n          <div className=\"hidden md:flex items-center flex-1 max-w-md ml-4\">\n            <GlobalSearch />\n          </div>\n        </div>\n\n        {/* Right Section */}\n        <div className=\"flex items-center space-x-2 sm:space-x-4\">\n          {/* Search Button - Mobile Only */}\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            className=\"md:hidden transition-all duration-200\"\n            style={{ color: \"var(--header-icon)\" }}\n            onMouseEnter={(e) => e.currentTarget.style.color = \"var(--header-icon-hover)\"}\n            onMouseLeave={(e) => e.currentTarget.style.color = \"var(--header-icon)\"}\n          >\n            <Search className=\"h-5 w-5\" />\n          </Button>\n\n          {/* Notifications */}\n          <Popover>\n            <PopoverTrigger asChild>\n              <Button \n                variant=\"ghost\" \n                size=\"icon\" \n                className=\"relative transition-all duration-200\"\n                style={{ color: \"var(--header-icon)\" }}\n                onMouseEnter={(e) => e.currentTarget.style.color = \"var(--header-icon-hover)\"}\n                onMouseLeave={(e) => e.currentTarget.style.color = \"var(--header-icon)\"}\n              >\n                <Bell className=\"h-5 w-5\" />\n                {unreadCount > 0 && (\n                  <Badge \n                    variant=\"destructive\" \n                    className=\"absolute -top-1 -right-1 h-5 w-5 p-0 flex items-center justify-center text-xs animate-pulse\"\n                  >\n                    {unreadCount}\n                  </Badge>\n                )}\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent \n              className=\"w-80 p-0 shadow-xl border-0\" \n              align=\"end\"\n              style={{\n                background: \"var(--dropdown-bg)\",\n                border: \"1px solid var(--dropdown-border)\"\n              }}\n            >\n              <div className=\"p-4 border-b\" style={{ borderColor: \"var(--dropdown-border)\" }}>\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"font-semibold\" style={{ color: \"var(--dropdown-item)\" }}>Notifications</h3>\n                  <Badge variant=\"secondary\">{unreadCount} new</Badge>\n                </div>\n              </div>\n              <div className=\"max-h-80 overflow-y-auto\">\n                {notifications.map((notification) => (\n                  <div \n                    key={notification.id}\n                    className=\"p-4 border-b cursor-pointer transition-all duration-200\"\n                    style={{ \n                      borderColor: \"var(--dropdown-border)\",\n                      background: notification.unread ? \"var(--dropdown-item-hover)\" : \"transparent\"\n                    }}\n                    onMouseEnter={(e) => e.currentTarget.style.background = \"var(--dropdown-item-hover)\"}\n                    onMouseLeave={(e) => e.currentTarget.style.background = notification.unread ? \"var(--dropdown-item-hover)\" : \"transparent\"}\n                  >\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"text-lg\">{getNotificationIcon(notification.type)}</div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center justify-between\">\n                          <p className=\"text-sm font-medium truncate\" style={{ color: \"var(--dropdown-item)\" }}>\n                            {notification.title}\n                          </p>\n                          {notification.unread && (\n                            <div className=\"h-2 w-2 bg-primary rounded-full ml-2\" />\n                          )}\n                        </div>\n                        <p className=\"text-sm mt-1 truncate opacity-80\" style={{ color: \"var(--dropdown-item)\" }}>\n                          {notification.message}\n                        </p>\n                        <p className=\"text-xs mt-1 opacity-60\" style={{ color: \"var(--dropdown-item)\" }}>\n                          {notification.time}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              <div className=\"p-4 border-t\" style={{ borderColor: \"var(--dropdown-border)\" }}>\n                <Button variant=\"outline\" className=\"w-full\" size=\"sm\">\n                  <Link href=\"/notifications\">View All Notifications</Link>\n                </Button>\n              </div>\n            </PopoverContent>\n          </Popover>\n\n          {/* User Dropdown */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button \n                variant=\"ghost\" \n                className=\"flex items-center space-x-2 p-2 transition-all duration-200\"\n                style={{ color: \"var(--header-text)\" }}\n                onMouseEnter={(e) => {\n                  e.currentTarget.style.background = \"var(--dropdown-item-hover)\";\n                  e.currentTarget.style.color = \"var(--header-icon-hover)\";\n                }}\n                onMouseLeave={(e) => {\n                  e.currentTarget.style.background = \"transparent\";\n                  e.currentTarget.style.color = \"var(--header-text)\";\n                }}\n              >\n                <Avatar className=\"h-8 w-8\">\n                  <AvatarImage src=\"\" alt=\"User\" />\n                  <AvatarFallback className=\"bg-primary text-primary-foreground text-sm\">\n                    {user ? getUserInitials(user.email) : \"U\"}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"hidden sm:flex flex-col items-start\">\n                  <span className=\"text-sm font-medium\" style={{ color: \"var(--header-text)\" }}>\n                    {user ? getRoleDisplayName(user.role) : \"User\"}\n                  </span>\n                  <span className=\"text-xs opacity-70\" style={{ color: \"var(--header-text)\" }}>\n                    {user?.email || \"user@example.com\"}\n                  </span>\n                </div>\n                <ChevronDown className=\"h-4 w-4 opacity-70\" style={{ color: \"var(--header-icon)\" }} />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent \n              className=\"w-56 shadow-xl border-0\" \n              align=\"end\"\n              style={{\n                background: \"var(--dropdown-bg)\",\n                border: \"1px solid var(--dropdown-border)\"\n              }}\n            >\n              <DropdownMenuLabel style={{ borderColor: \"var(--dropdown-border)\" }}>\n                <div className=\"flex flex-col space-y-1\">\n                  <p className=\"text-sm font-medium\" style={{ color: \"var(--dropdown-item)\" }}>\n                    {user ? getRoleDisplayName(user.role) : \"User\"}\n                  </p>\n                  <p className=\"text-xs opacity-70\" style={{ color: \"var(--dropdown-item)\" }}>\n                    {user?.email || \"user@example.com\"}\n                  </p>\n                </div>\n              </DropdownMenuLabel>\n              <DropdownMenuSeparator style={{ backgroundColor: \"var(--dropdown-border)\" }} />\n              \n              <DropdownMenuItem \n                className=\"cursor-pointer transition-all duration-200\"\n                style={{ color: \"var(--dropdown-item)\" }}\n                onMouseEnter={(e) => e.currentTarget.style.background = \"var(--dropdown-item-hover)\"}\n                onMouseLeave={(e) => e.currentTarget.style.background = \"transparent\"}\n              >\n                <User className=\"mr-2 h-4 w-4\" />\n                <Link href=\"/profile\">Profile</Link>\n              </DropdownMenuItem>\n              \n              <DropdownMenuItem \n                className=\"cursor-pointer transition-all duration-200\"\n                style={{ color: \"var(--dropdown-item)\" }}\n                onMouseEnter={(e) => e.currentTarget.style.background = \"var(--dropdown-item-hover)\"}\n                onMouseLeave={(e) => e.currentTarget.style.background = \"transparent\"}\n              >\n                <Settings className=\"mr-2 h-4 w-4\" />\n                <Link href=\"/settings\">Settings</Link>\n              </DropdownMenuItem>\n              \n              {user?.role === \"super-admin\" && (\n                <DropdownMenuItem \n                  className=\"cursor-pointer transition-all duration-200\"\n                  style={{ color: \"var(--dropdown-item)\" }}\n                  onMouseEnter={(e) => e.currentTarget.style.background = \"var(--dropdown-item-hover)\"}\n                  onMouseLeave={(e) => e.currentTarget.style.background = \"transparent\"}\n                >\n                  <Shield className=\"mr-2 h-4 w-4\" />\n                  <span>Admin Panel</span>\n                </DropdownMenuItem>\n              )}\n              \n              <DropdownMenuSeparator style={{ backgroundColor: \"var(--dropdown-border)\" }} />\n              \n              <DropdownMenuItem \n                className=\"cursor-pointer transition-all duration-200\"\n                style={{ color: \"var(--dropdown-item)\" }}\n                onMouseEnter={(e) => e.currentTarget.style.background = \"var(--dropdown-item-hover)\"}\n                onMouseLeave={(e) => e.currentTarget.style.background = \"transparent\"}\n              >\n                <Mail className=\"mr-2 h-4 w-4\" />\n                <span>Support</span>\n              </DropdownMenuItem>\n              \n              <DropdownMenuItem \n                className=\"cursor-pointer transition-all duration-200\"\n                style={{ color: \"var(--dropdown-item)\" }}\n                onMouseEnter={(e) => e.currentTarget.style.background = \"var(--dropdown-item-hover)\"}\n                onMouseLeave={(e) => e.currentTarget.style.background = \"transparent\"}\n              >\n                <Phone className=\"mr-2 h-4 w-4\" />\n                <span>Contact</span>\n              </DropdownMenuItem>\n              \n              <DropdownMenuSeparator style={{ backgroundColor: \"var(--dropdown-border)\" }} />\n              \n              <DropdownMenuItem \n                className=\"cursor-pointer transition-all duration-200 text-red-600 focus:text-red-600\"\n                onClick={logout}\n                onMouseEnter={(e) => {\n                  e.currentTarget.style.background = \"var(--dropdown-item-hover)\";\n                  e.currentTarget.style.color = \"#dc2626\";\n                }}\n                onMouseLeave={(e) => {\n                  e.currentTarget.style.background = \"transparent\";\n                  e.currentTarget.style.color = \"#dc2626\";\n                }}\n              >\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                <span>Sign out</span>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":14621},"client/src/components/layout/main-layout.tsx":{"content":"import { ReactNode, useState } from \"react\";\nimport { Sidebar } from \"./sidebar\";\nimport { Header } from \"./header\";\n\ninterface MainLayoutProps {\n  children: ReactNode;\n  title: string;\n}\n\nexport function MainLayout({ children, title }: MainLayoutProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const toggleSidebar = () => setSidebarOpen(!sidebarOpen);\n  const closeSidebar = () => setSidebarOpen(false);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-muted/20\">\n      {/* Mobile backdrop */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-40 lg:hidden transition-opacity duration-300 ease-in-out\"\n          onClick={closeSidebar}\n        />\n      )}\n      \n      <Sidebar isOpen={sidebarOpen} onClose={closeSidebar} />\n      <div className=\"lg:pl-64 transition-all duration-300 ease-in-out\">\n        <Header title={title} onMenuClick={toggleSidebar} />\n        <main className=\"min-h-[calc(100vh-4rem)] p-4 sm:p-6 lg:p-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            {children}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1185},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport {\n  LayoutDashboard,\n  AlertCircle,\n  Users,\n  UserCheck,\n  CreditCard,\n  BarChart3,\n  Bell,\n  Headphones,\n  Settings,\n  Wifi,\n  LogOut,\n  Palette,\n  Sun,\n  Moon,\n  Zap,\n  Sparkles,\n  X,\n  Package,\n  HardHat,\n  Phone,\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/dashboard\", icon: LayoutDashboard, permission: \"view-dashboard\" },\n  { name: \"Complaints\", href: \"/complaints\", icon: AlertCircle, permission: \"assign-complaints\" },\n  { name: \"Engineers\", href: \"/engineers\", icon: Users, permission: \"manage-engineers\" },\n  { name: \"User Management\", href: \"/users\", icon: UserCheck, permission: \"manage-users\" },\n  { name: \"Products\", href: \"/products\", icon: Package, permission: \"manage-products\" },\n  { name: \"Service Plans\", href: \"/plans\", icon: CreditCard, permission: \"manage-plans\" },\n  { name: \"New Installation & Leads\", href: \"/installations-leads\", icon: HardHat, permission: \"manage-installations\" },\n  { name: \"Analytics\", href: \"/analytics\", icon: BarChart3, permission: \"view-analytics\" },\n  { name: \"Notifications\", href: \"/notifications\", icon: Bell, permission: \"manage-notifications\" },\n  { name: \"Support & Rating\", href: \"/support\", icon: Headphones, permission: \"manage-support\" },\n  { name: \"Settings\", href: \"/settings\", icon: Settings, permission: \"system-settings\" },\n];\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function Sidebar({ isOpen, onClose }: SidebarProps) {\n  const [location] = useLocation();\n  const { user, logout, hasPermission } = useAuth();\n  const { theme, setTheme } = useTheme();\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  const handleNavClick = () => {\n    // Auto-close sidebar on mobile when navigation item is clicked\n    if (window.innerWidth < 1024) {\n      onClose();\n    }\n  };\n\n  const themeIcons = {\n    light: Sun,\n    dark: Moon,\n    crypto: Zap,\n    neon: Sparkles,\n  };\n\n  const ThemeIcon = themeIcons[theme];\n\n  return (\n    <div className={cn(\n      \"fixed inset-y-0 left-0 z-50 w-64 sidebar-gradient border-r border-[var(--sidebar-border)] shadow-2xl transition-transform duration-300 ease-in-out\",\n      \"lg:translate-x-0\",\n      isOpen ? \"translate-x-0\" : \"-translate-x-full\"\n    )}>\n      <div className=\"flex flex-col h-full\">\n        {/* Logo */}\n        <div className=\"flex items-center justify-between h-16 px-4 border-b border-[var(--sidebar-border)]\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"h-9 w-9 bg-gradient-to-br from-primary to-primary/80 rounded-xl flex items-center justify-center shadow-lg animate-pulse-slow\">\n              <Wifi className=\"h-5 w-5 text-primary-foreground\" />\n            </div>\n            <span className=\"text-[var(--sidebar-text)] font-bold text-xl tracking-tight\">WiFiCare</span>\n          </div>\n          \n          {/* Mobile close button */}\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            className=\"lg:hidden h-8 w-8 p-0 text-[var(--sidebar-icon)] hover:bg-[var(--sidebar-item-hover)] hover:text-[var(--sidebar-item-active)]\"\n            onClick={onClose}\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n          \n          {/* Theme Switcher - Hidden on mobile to save space */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"hidden lg:flex h-8 w-8 p-0 text-[var(--sidebar-icon)] hover:bg-[var(--sidebar-item-hover)] hover:text-[var(--sidebar-item-active)]\"\n              >\n                <ThemeIcon className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"theme-dropdown w-40\">\n              <DropdownMenuItem \n                onClick={() => setTheme(\"light\")}\n                className=\"theme-dropdown-item flex items-center\"\n              >\n                <Sun className=\"mr-2 h-4 w-4\" />\n                <span className=\"font-medium\">Light</span>\n                {theme === \"light\" && <div className=\"ml-auto w-2 h-2 bg-primary rounded-full\" />}\n              </DropdownMenuItem>\n              <DropdownMenuItem \n                onClick={() => setTheme(\"dark\")}\n                className=\"theme-dropdown-item flex items-center\"\n              >\n                <Moon className=\"mr-2 h-4 w-4\" />\n                <span className=\"font-medium\">Dark</span>\n                {theme === \"dark\" && <div className=\"ml-auto w-2 h-2 bg-primary rounded-full\" />}\n              </DropdownMenuItem>\n              <DropdownMenuItem \n                onClick={() => setTheme(\"crypto\")}\n                className=\"theme-dropdown-item flex items-center\"\n              >\n                <Zap className=\"mr-2 h-4 w-4\" />\n                <span className=\"font-medium\">Crypto</span>\n                {theme === \"crypto\" && <div className=\"ml-auto w-2 h-2 bg-primary rounded-full\" />}\n              </DropdownMenuItem>\n              <DropdownMenuItem \n                onClick={() => setTheme(\"neon\")}\n                className=\"theme-dropdown-item flex items-center\"\n              >\n                <Sparkles className=\"mr-2 h-4 w-4\" />\n                <span className=\"font-medium\">Neon</span>\n                {theme === \"neon\" && <div className=\"ml-auto w-2 h-2 bg-primary rounded-full\" />}\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 px-3 py-6 space-y-1 overflow-y-auto\">\n          {navigation.map((item, index) => {\n            if (!hasPermission(item.permission)) return null;\n            \n            const isActive = location === item.href;\n            return (\n              <Link key={item.name} href={item.href}>\n                <div\n                  onClick={handleNavClick}\n                  className={cn(\n                    \"group flex items-center px-3 py-3 text-sm font-medium rounded-xl transition-all duration-200 cursor-pointer relative overflow-hidden\",\n                    isActive\n                      ? \"bg-[var(--sidebar-item-active-bg)] shadow-lg transform scale-105\"\n                      : \"hover:bg-[var(--sidebar-item-hover)] hover:transform hover:scale-102\"\n                  )}\n                  style={{\n                    animationDelay: `${index * 50}ms`\n                  }}\n                >\n                  <div className={cn(\n                    \"flex items-center justify-center w-9 h-9 rounded-lg mr-3 transition-all duration-200 backdrop-blur-sm\",\n                    isActive \n                      ? \"bg-[var(--sidebar-item-active)] text-white shadow-md\" \n                      : \"bg-transparent group-hover:bg-[var(--sidebar-item-active)]/20\"\n                  )}>\n                    <item.icon \n                      className={cn(\n                        \"h-4 w-4 transition-all duration-200\",\n                        isActive \n                          ? \"text-white\" \n                          : \"text-[var(--sidebar-icon)] group-hover:text-[var(--sidebar-item-active)]\"\n                      )} \n                    />\n                  </div>\n                  <span className={cn(\n                    \"tracking-wide font-medium transition-all duration-200\",\n                    isActive \n                      ? \"text-[var(--sidebar-text-active)]\" \n                      : \"text-[var(--sidebar-text)] group-hover:text-[var(--sidebar-item-active)]\"\n                  )}>\n                    {item.name}\n                  </span>\n                  {isActive && (\n                    <div className=\"ml-auto w-1 h-8 bg-[var(--sidebar-item-active)] rounded-full animate-pulse-slow shadow-md\" />\n                  )}\n                  {/* Subtle hover effect */}\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-transparent to-[var(--sidebar-item-active)]/5 opacity-0 group-hover:opacity-100 transition-opacity duration-200\" />\n                </div>\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* User Profile */}\n        <div className=\"px-3 py-4 border-t border-[var(--sidebar-border)]\">\n          <div className=\"flex items-center p-3 rounded-xl bg-[var(--sidebar-item-hover)] border border-[var(--sidebar-border)]\">\n            <div className=\"h-10 w-10 bg-gradient-to-br from-primary to-primary/80 rounded-lg flex items-center justify-center shadow-md\">\n              <span className=\"text-primary-foreground font-semibold text-sm\">\n                {user?.role === \"super-admin\" ? \"SA\" : user?.role === \"admin\" ? \"A\" : \"M\"}\n              </span>\n            </div>\n            <div className=\"ml-3 flex-1 min-w-0\">\n              <p className=\"text-sm font-semibold text-[var(--sidebar-text)] truncate\">\n                {user?.role === \"super-admin\" ? \"Super Admin\" : \n                 user?.role === \"admin\" ? \"Admin\" : \"Manager\"}\n              </p>\n              <p className=\"text-xs text-[var(--sidebar-text)] opacity-70 truncate\">{user?.email}</p>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleLogout}\n              className=\"h-8 w-8 p-0 text-[var(--sidebar-icon)] hover:bg-[var(--sidebar-item-active)] hover:text-white transition-all duration-200\"\n            >\n              <LogOut className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          {/* Mobile Theme Switcher */}\n          <div className=\"mt-3 lg:hidden\">\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-between text-[var(--sidebar-text)] border-[var(--sidebar-border)] hover:bg-[var(--sidebar-item-hover)]\"\n                >\n                  <span className=\"flex items-center\">\n                    <ThemeIcon className=\"h-4 w-4 mr-2\" />\n                    Theme\n                  </span>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"start\" className=\"theme-dropdown w-40\">\n                <DropdownMenuItem \n                  onClick={() => setTheme(\"light\")}\n                  className=\"theme-dropdown-item flex items-center\"\n                >\n                  <Sun className=\"mr-2 h-4 w-4\" />\n                  <span className=\"font-medium\">Light</span>\n                  {theme === \"light\" && <div className=\"ml-auto w-2 h-2 bg-primary rounded-full\" />}\n                </DropdownMenuItem>\n                <DropdownMenuItem \n                  onClick={() => setTheme(\"dark\")}\n                  className=\"theme-dropdown-item flex items-center\"\n                >\n                  <Moon className=\"mr-2 h-4 w-4\" />\n                  <span className=\"font-medium\">Dark</span>\n                  {theme === \"dark\" && <div className=\"ml-auto w-2 h-2 bg-primary rounded-full\" />}\n                </DropdownMenuItem>\n                <DropdownMenuItem \n                  onClick={() => setTheme(\"crypto\")}\n                  className=\"theme-dropdown-item flex items-center\"\n                >\n                  <Zap className=\"mr-2 h-4 w-4\" />\n                  <span className=\"font-medium\">Crypto</span>\n                  {theme === \"crypto\" && <div className=\"ml-auto w-2 h-2 bg-primary rounded-full\" />}\n                </DropdownMenuItem>\n                <DropdownMenuItem \n                  onClick={() => setTheme(\"neon\")}\n                  className=\"theme-dropdown-item flex items-center\"\n                >\n                  <Sparkles className=\"mr-2 h-4 w-4\" />\n                  <span className=\"font-medium\">Neon</span>\n                  {theme === \"neon\" && <div className=\"ml-auto w-2 h-2 bg-primary rounded-full\" />}\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12330},"client/src/components/notifications/notification-composer.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { MultiSelect, Option } from \"@/components/ui/multi-select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Send, \n  Clock, \n  Users, \n  UserCheck, \n  Settings, \n  CalendarDays,\n  Bell,\n  AlertTriangle,\n  Info,\n  CheckCircle,\n  X\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { format } from \"date-fns\";\n\nconst notificationSchema = z.object({\n  title: z.string().min(1, \"Title is required\").max(100, \"Title must be less than 100 characters\"),\n  message: z.string().min(1, \"Message is required\").max(500, \"Message must be less than 500 characters\"),\n  type: z.enum([\"info\", \"warning\", \"error\", \"success\"]),\n  priority: z.enum([\"low\", \"medium\", \"high\", \"urgent\"]),\n  recipientType: z.enum([\"all-users\", \"all-engineers\", \"all-managers\", \"specific-users\", \"specific-engineers\", \"specific-managers\", \"location-based\", \"role-based\"]),\n  specificRecipients: z.array(z.string()).optional(),\n  locationFilter: z.string().optional(),\n  roleFilter: z.string().optional(),\n  scheduleType: z.enum([\"immediate\", \"scheduled\"]),\n  scheduledDate: z.date().optional(),\n  enablePushNotification: z.boolean().default(true),\n  enableEmailNotification: z.boolean().default(false),\n  enableSMSNotification: z.boolean().default(false),\n});\n\ntype NotificationFormData = z.infer<typeof notificationSchema>;\n\ninterface NotificationComposerProps {\n  onSend: (notification: NotificationFormData) => void;\n}\n\n// Dummy data for users, engineers, and managers\nconst users: Option[] = [\n  { value: \"user1\", label: \"John Smith\", avatar: \"JS\", role: \"Premium Customer\", department: \"North District\" },\n  { value: \"user2\", label: \"Sarah Johnson\", avatar: \"SJ\", role: \"Basic Customer\", department: \"South District\" },\n  { value: \"user3\", label: \"Mike Davis\", avatar: \"MD\", role: \"Business Customer\", department: \"East District\" },\n  { value: \"user4\", label: \"Emily Brown\", avatar: \"EB\", role: \"Premium Customer\", department: \"West District\" },\n  { value: \"user5\", label: \"David Wilson\", avatar: \"DW\", role: \"Basic Customer\", department: \"Central District\" },\n];\n\nconst engineers: Option[] = [\n  { value: \"eng1\", label: \"Alex Rodriguez\", avatar: \"AR\", role: \"Senior Engineer\", department: \"Network Team\" },\n  { value: \"eng2\", label: \"Lisa Chen\", avatar: \"LC\", role: \"Field Engineer\", department: \"Installation Team\" },\n  { value: \"eng3\", label: \"James Park\", avatar: \"JP\", role: \"Technical Lead\", department: \"Support Team\" },\n  { value: \"eng4\", label: \"Maria Garcia\", avatar: \"MG\", role: \"Network Engineer\", department: \"Infrastructure Team\" },\n  { value: \"eng5\", label: \"Kevin Lee\", avatar: \"KL\", role: \"Junior Engineer\", department: \"Maintenance Team\" },\n];\n\nconst managers: Option[] = [\n  { value: \"mgr1\", label: \"Robert Taylor\", avatar: \"RT\", role: \"Regional Manager\", department: \"Operations\" },\n  { value: \"mgr2\", label: \"Jennifer White\", avatar: \"JW\", role: \"Technical Manager\", department: \"Engineering\" },\n  { value: \"mgr3\", label: \"Thomas Anderson\", avatar: \"TA\", role: \"Customer Success Manager\", department: \"Customer Relations\" },\n  { value: \"mgr4\", label: \"Amanda Martinez\", avatar: \"AM\", role: \"Network Operations Manager\", department: \"NOC\" },\n];\n\nconst locations = [\n  \"North District\", \"South District\", \"East District\", \"West District\", \"Central District\"\n];\n\nconst roles = [\n  \"Premium Customer\", \"Basic Customer\", \"Business Customer\", \"Senior Engineer\", \"Field Engineer\", \"Technical Lead\", \"Regional Manager\", \"Technical Manager\"\n];\n\nexport function NotificationComposer({ onSend }: NotificationComposerProps) {\n  const { toast } = useToast();\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [selectedRecipients, setSelectedRecipients] = useState<string[]>([]);\n\n  const form = useForm<NotificationFormData>({\n    resolver: zodResolver(notificationSchema),\n    defaultValues: {\n      title: \"\",\n      message: \"\",\n      type: \"info\",\n      priority: \"medium\",\n      recipientType: \"all-users\",\n      specificRecipients: [],\n      scheduleType: \"immediate\",\n      enablePushNotification: true,\n      enableEmailNotification: false,\n      enableSMSNotification: false,\n    },\n  });\n\n  const recipientType = form.watch(\"recipientType\");\n  const scheduleType = form.watch(\"scheduleType\");\n  const messageLength = form.watch(\"message\")?.length || 0;\n\n  const getRecipientOptions = () => {\n    switch (recipientType) {\n      case \"specific-users\":\n        return users;\n      case \"specific-engineers\":\n        return engineers;\n      case \"specific-managers\":\n        return managers;\n      default:\n        return [];\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"success\":\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case \"warning\":\n        return <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />;\n      case \"error\":\n        return <X className=\"h-4 w-4 text-red-600\" />;\n      default:\n        return <Info className=\"h-4 w-4 text-blue-600\" />;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"urgent\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      case \"high\":\n        return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"medium\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      default:\n        return \"bg-blue-100 text-blue-800 border-blue-200\";\n    }\n  };\n\n  const getEstimatedReach = () => {\n    switch (recipientType) {\n      case \"all-users\":\n        return `~${users.length * 50} users`;\n      case \"all-engineers\":\n        return `${engineers.length} engineers`;\n      case \"all-managers\":\n        return `${managers.length} managers`;\n      case \"specific-users\":\n      case \"specific-engineers\":\n      case \"specific-managers\":\n        return `${selectedRecipients.length} selected`;\n      case \"location-based\":\n        return form.watch(\"locationFilter\") ? `~${Math.floor(users.length * 50 / locations.length)} users` : \"Select location\";\n      case \"role-based\":\n        return form.watch(\"roleFilter\") ? `~${Math.floor(users.length * 50 / roles.length)} users` : \"Select role\";\n      default:\n        return \"0 recipients\";\n    }\n  };\n\n  const onSubmit = (data: NotificationFormData) => {\n    if (data.scheduleType === \"scheduled\" && !data.scheduledDate) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a scheduled date\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (recipientType.includes(\"specific\") && selectedRecipients.length === 0) {\n      toast({\n        title: \"Error\", \n        description: \"Please select at least one recipient\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const notificationData = {\n      ...data,\n      specificRecipients: selectedRecipients,\n    };\n\n    onSend(notificationData);\n    form.reset();\n    setSelectedRecipients([]);\n    toast({\n      title: \"Success\",\n      description: data.scheduleType === \"immediate\" ? \"Notification sent successfully\" : \"Notification scheduled successfully\",\n    });\n  };\n\n  return (\n    <Card className=\"border-2 border-primary/10\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Bell className=\"h-5 w-5 text-primary\" />\n            <span>Compose Notification</span>\n          </div>\n          <Badge variant=\"outline\" className=\"text-xs\">\n            Reach: {getEstimatedReach()}\n          </Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Basic Information */}\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"type\" className=\"flex items-center space-x-2\">\n                  <span>Type</span>\n                  {getTypeIcon(form.watch(\"type\"))}\n                </Label>\n                <Select\n                  value={form.watch(\"type\")}\n                  onValueChange={(value) => form.setValue(\"type\", value as any)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"info\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Info className=\"h-4 w-4 text-blue-600\" />\n                        <span>Information</span>\n                      </div>\n                    </SelectItem>\n                    <SelectItem value=\"success\">\n                      <div className=\"flex items-center space-x-2\">\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                        <span>Success</span>\n                      </div>\n                    </SelectItem>\n                    <SelectItem value=\"warning\">\n                      <div className=\"flex items-center space-x-2\">\n                        <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n                        <span>Warning</span>\n                      </div>\n                    </SelectItem>\n                    <SelectItem value=\"error\">\n                      <div className=\"flex items-center space-x-2\">\n                        <X className=\"h-4 w-4 text-red-600\" />\n                        <span>Error</span>\n                      </div>\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"priority\">Priority</Label>\n                <Select\n                  value={form.watch(\"priority\")}\n                  onValueChange={(value) => form.setValue(\"priority\", value as any)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select priority\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"low\">\n                      <Badge className=\"bg-blue-100 text-blue-800 border-blue-200\">Low</Badge>\n                    </SelectItem>\n                    <SelectItem value=\"medium\">\n                      <Badge className=\"bg-yellow-100 text-yellow-800 border-yellow-200\">Medium</Badge>\n                    </SelectItem>\n                    <SelectItem value=\"high\">\n                      <Badge className=\"bg-orange-100 text-orange-800 border-orange-200\">High</Badge>\n                    </SelectItem>\n                    <SelectItem value=\"urgent\">\n                      <Badge className=\"bg-red-100 text-red-800 border-red-200\">Urgent</Badge>\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"title\">Subject</Label>\n              <Input\n                id=\"title\"\n                placeholder=\"Enter notification subject\"\n                {...form.register(\"title\")}\n                className=\"text-base\"\n              />\n              {form.formState.errors.title && (\n                <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.title.message}</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"message\" className=\"flex items-center justify-between\">\n                <span>Message</span>\n                <span className={cn(\n                  \"text-xs\",\n                  messageLength > 400 ? \"text-red-600\" : messageLength > 300 ? \"text-yellow-600\" : \"text-muted-foreground\"\n                )}>\n                  {messageLength}/500\n                </span>\n              </Label>\n              <Textarea\n                id=\"message\"\n                rows={4}\n                placeholder=\"Enter notification message\"\n                {...form.register(\"message\")}\n                className=\"text-base resize-none\"\n              />\n              {form.formState.errors.message && (\n                <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.message.message}</p>\n              )}\n            </div>\n          </div>\n\n          {/* Recipients */}\n          <div className=\"space-y-4 border-t pt-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label className=\"text-base font-semibold\">Recipients</Label>\n              <div className=\"flex items-center space-x-2\">\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"text-sm text-muted-foreground\">{getEstimatedReach()}</span>\n              </div>\n            </div>\n\n            <Select\n              value={recipientType}\n              onValueChange={(value) => {\n                form.setValue(\"recipientType\", value as any);\n                setSelectedRecipients([]);\n              }}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select recipients\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all-users\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Users className=\"h-4 w-4\" />\n                    <span>All Users</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"all-engineers\">\n                  <div className=\"flex items-center space-x-2\">\n                    <UserCheck className=\"h-4 w-4\" />\n                    <span>All Engineers</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"all-managers\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Settings className=\"h-4 w-4\" />\n                    <span>All Managers</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"specific-users\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Users className=\"h-4 w-4\" />\n                    <span>Specific Users</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"specific-engineers\">\n                  <div className=\"flex items-center space-x-2\">\n                    <UserCheck className=\"h-4 w-4\" />\n                    <span>Specific Engineers</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"specific-managers\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Settings className=\"h-4 w-4\" />\n                    <span>Specific Managers</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"location-based\">Location Based</SelectItem>\n                <SelectItem value=\"role-based\">Role Based</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {/* Specific Recipients Selection */}\n            {recipientType.includes(\"specific\") && (\n              <div>\n                <Label>Select Recipients</Label>\n                <MultiSelect\n                  options={getRecipientOptions()}\n                  selected={selectedRecipients}\n                  onChange={setSelectedRecipients}\n                  placeholder={`Select ${recipientType.replace(\"specific-\", \"\")}...`}\n                  maxItems={3}\n                  searchPlaceholder={`Search ${recipientType.replace(\"specific-\", \"\")}...`}\n                />\n              </div>\n            )}\n\n            {/* Location Filter */}\n            {recipientType === \"location-based\" && (\n              <div>\n                <Label htmlFor=\"locationFilter\">Location</Label>\n                <Select\n                  value={form.watch(\"locationFilter\") || \"\"}\n                  onValueChange={(value) => form.setValue(\"locationFilter\", value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select location\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {locations.map((location) => (\n                      <SelectItem key={location} value={location}>\n                        {location}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            {/* Role Filter */}\n            {recipientType === \"role-based\" && (\n              <div>\n                <Label htmlFor=\"roleFilter\">Role</Label>\n                <Select\n                  value={form.watch(\"roleFilter\") || \"\"}\n                  onValueChange={(value) => form.setValue(\"roleFilter\", value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {roles.map((role) => (\n                      <SelectItem key={role} value={role}>\n                        {role}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n          </div>\n\n          {/* Advanced Options */}\n          <div className=\"space-y-4 border-t pt-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label className=\"text-base font-semibold\">Advanced Options</Label>\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowAdvanced(!showAdvanced)}\n              >\n                <Settings className=\"h-4 w-4 mr-2\" />\n                {showAdvanced ? \"Hide\" : \"Show\"} Advanced\n              </Button>\n            </div>\n\n            {showAdvanced && (\n              <div className=\"space-y-4 bg-muted/20 rounded-lg p-4\">\n                {/* Scheduling */}\n                <div className=\"space-y-3\">\n                  <Label className=\"text-sm font-medium\">Scheduling</Label>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        checked={scheduleType === \"immediate\"}\n                        onCheckedChange={(checked) => \n                          form.setValue(\"scheduleType\", checked ? \"immediate\" : \"scheduled\")\n                        }\n                      />\n                      <Label className=\"text-sm\">Send Immediately</Label>\n                    </div>\n                    {scheduleType === \"scheduled\" && (\n                      <div className=\"flex items-center space-x-2\">\n                        <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                        <Popover>\n                          <PopoverTrigger asChild>\n                            <Button variant=\"outline\" size=\"sm\">\n                              <CalendarDays className=\"h-4 w-4 mr-2\" />\n                              {form.watch(\"scheduledDate\") \n                                ? format(form.watch(\"scheduledDate\")!, \"PPP\") \n                                : \"Pick date\"\n                              }\n                            </Button>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-auto p-0\">\n                            <Calendar\n                              mode=\"single\"\n                              selected={form.watch(\"scheduledDate\")}\n                              onSelect={(date) => form.setValue(\"scheduledDate\", date)}\n                              disabled={(date) => date < new Date()}\n                              initialFocus\n                            />\n                          </PopoverContent>\n                        </Popover>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Delivery Channels */}\n                <div className=\"space-y-3\">\n                  <Label className=\"text-sm font-medium\">Delivery Channels</Label>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        checked={form.watch(\"enablePushNotification\")}\n                        onCheckedChange={(checked) => form.setValue(\"enablePushNotification\", checked)}\n                      />\n                      <Label className=\"text-sm\">Push Notification</Label>\n                      <Badge variant=\"secondary\" className=\"text-xs\">Recommended</Badge>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        checked={form.watch(\"enableEmailNotification\")}\n                        onCheckedChange={(checked) => form.setValue(\"enableEmailNotification\", checked)}\n                      />\n                      <Label className=\"text-sm\">Email</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        checked={form.watch(\"enableSMSNotification\")}\n                        onCheckedChange={(checked) => form.setValue(\"enableSMSNotification\", checked)}\n                      />\n                      <Label className=\"text-sm\">SMS</Label>\n                      <Badge variant=\"outline\" className=\"text-xs\">Premium</Badge>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex justify-between items-center pt-4 border-t\">\n            <div className=\"flex items-center space-x-2\">\n              <Badge className={getPriorityColor(form.watch(\"priority\"))}>\n                {form.watch(\"priority\").toUpperCase()}\n              </Badge>\n              {getTypeIcon(form.watch(\"type\"))}\n            </div>\n            <div className=\"flex space-x-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  form.reset();\n                  setSelectedRecipients([]);\n                }}\n              >\n                Clear\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"bg-primary hover:bg-primary/90\"\n              >\n                <Send className=\"h-4 w-4 mr-2\" />\n                {scheduleType === \"immediate\" ? \"Send Now\" : \"Schedule\"}\n              </Button>\n            </div>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":23330},"client/src/components/notifications/notification-history.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Search, \n  Filter, \n  Eye, \n  MoreHorizontal, \n  Clock, \n  CheckCircle, \n  AlertTriangle, \n  Info, \n  X,\n  Users,\n  Mail,\n  MessageSquare,\n  Calendar,\n  TrendingUp,\n  BarChart3\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { format } from \"date-fns\";\n\ninterface Notification {\n  id: number;\n  title: string;\n  message: string;\n  type: \"info\" | \"warning\" | \"error\" | \"success\";\n  priority: \"low\" | \"medium\" | \"high\" | \"urgent\";\n  recipientType: string;\n  specificRecipients?: string[];\n  locationFilter?: string;\n  roleFilter?: string;\n  deliveredCount: number;\n  readCount: number;\n  totalRecipients: number;\n  sentAt: string;\n  sentBy: string;\n  status: \"sent\" | \"scheduled\" | \"failed\" | \"draft\";\n  channels: {\n    push: boolean;\n    email: boolean;\n    sms: boolean;\n  };\n}\n\ninterface NotificationHistoryProps {\n  notifications: Notification[];\n  onDeleteNotification?: (id: number) => void;\n  onResendNotification?: (id: number) => void;\n}\n\nexport function NotificationHistory({ \n  notifications, \n  onDeleteNotification, \n  onResendNotification \n}: NotificationHistoryProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filterType, setFilterType] = useState(\"all\");\n  const [filterPriority, setFilterPriority] = useState(\"all\");\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n  const [selectedNotification, setSelectedNotification] = useState<Notification | null>(null);\n\n  const filteredNotifications = notifications.filter((notification) => {\n    const matchesSearch = notification.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         notification.message.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesType = filterType === \"all\" || notification.type === filterType;\n    const matchesPriority = filterPriority === \"all\" || notification.priority === filterPriority;\n    const matchesStatus = filterStatus === \"all\" || notification.status === filterStatus;\n\n    return matchesSearch && matchesType && matchesPriority && matchesStatus;\n  });\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"success\":\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case \"warning\":\n        return <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />;\n      case \"error\":\n        return <X className=\"h-4 w-4 text-red-600\" />;\n      default:\n        return <Info className=\"h-4 w-4 text-blue-600\" />;\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case \"success\":\n        return \"bg-green-100 text-green-800 border-green-200\";\n      case \"warning\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      case \"error\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      default:\n        return \"bg-blue-100 text-blue-800 border-blue-200\";\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"urgent\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      case \"high\":\n        return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"medium\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      default:\n        return \"bg-blue-100 text-blue-800 border-blue-200\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"sent\":\n        return \"bg-green-100 text-green-800 border-green-200\";\n      case \"scheduled\":\n        return \"bg-blue-100 text-blue-800 border-blue-200\";\n      case \"failed\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      case \"draft\":\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getDeliveryRate = (notification: Notification) => {\n    return notification.totalRecipients > 0 \n      ? (notification.deliveredCount / notification.totalRecipients) * 100\n      : 0;\n  };\n\n  const getReadRate = (notification: Notification) => {\n    return notification.deliveredCount > 0 \n      ? (notification.readCount / notification.deliveredCount) * 100\n      : 0;\n  };\n\n  const formatRecipientType = (type: string) => {\n    const typeMap: { [key: string]: string } = {\n      \"all-users\": \"All Users\",\n      \"all-engineers\": \"All Engineers\", \n      \"all-managers\": \"All Managers\",\n      \"specific-users\": \"Specific Users\",\n      \"specific-engineers\": \"Specific Engineers\",\n      \"specific-managers\": \"Specific Managers\",\n      \"location-based\": \"Location Based\",\n      \"role-based\": \"Role Based\"\n    };\n    return typeMap[type] || type;\n  };\n\n  return (\n    <Card className=\"border-2 border-muted/50\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <MessageSquare className=\"h-5 w-5 text-primary\" />\n            <span>Notification History</span>\n            <Badge variant=\"outline\" className=\"ml-2\">\n              {filteredNotifications.length} notifications\n            </Badge>\n          </CardTitle>\n          \n          {/* Quick Stats */}\n          <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n            <div className=\"flex items-center space-x-1\">\n              <TrendingUp className=\"h-4 w-4\" />\n              <span>\n                {notifications.length > 0 \n                  ? (notifications.reduce((sum, n) => sum + getReadRate(n), 0) / notifications.length).toFixed(1)\n                  : 0}% avg read rate\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <BarChart3 className=\"h-4 w-4\" />\n              <span>\n                {notifications.reduce((sum, n) => sum + n.totalRecipients, 0)} total reach\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex flex-col sm:flex-row gap-3 mt-4\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search notifications...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Select value={filterType} onValueChange={setFilterType}>\n              <SelectTrigger className=\"w-[120px]\">\n                <SelectValue placeholder=\"Type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"info\">Info</SelectItem>\n                <SelectItem value=\"success\">Success</SelectItem>\n                <SelectItem value=\"warning\">Warning</SelectItem>\n                <SelectItem value=\"error\">Error</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={filterPriority} onValueChange={setFilterPriority}>\n              <SelectTrigger className=\"w-[120px]\">\n                <SelectValue placeholder=\"Priority\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Priorities</SelectItem>\n                <SelectItem value=\"low\">Low</SelectItem>\n                <SelectItem value=\"medium\">Medium</SelectItem>\n                <SelectItem value=\"high\">High</SelectItem>\n                <SelectItem value=\"urgent\">Urgent</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={filterStatus} onValueChange={setFilterStatus}>\n              <SelectTrigger className=\"w-[120px]\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"sent\">Sent</SelectItem>\n                <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                <SelectItem value=\"failed\">Failed</SelectItem>\n                <SelectItem value=\"draft\">Draft</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"p-0\">\n        <div className=\"divide-y divide-border\">\n          {filteredNotifications.length === 0 ? (\n            <div className=\"p-8 text-center text-muted-foreground\">\n              <MessageSquare className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p className=\"text-lg font-medium\">No notifications found</p>\n              <p className=\"text-sm\">Try adjusting your search or filters</p>\n            </div>\n          ) : (\n            filteredNotifications.map((notification) => {\n              const deliveryRate = getDeliveryRate(notification);\n              const readRate = getReadRate(notification);\n\n              return (\n                <div key={notification.id} className=\"p-6 hover:bg-muted/30 transition-colors\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      {/* Header */}\n                      <div className=\"flex items-center space-x-2 mb-3\">\n                        <Badge className={cn(\"text-xs\", getTypeColor(notification.type))}>\n                          {getTypeIcon(notification.type)}\n                          <span className=\"ml-1\">{notification.type}</span>\n                        </Badge>\n                        <Badge className={cn(\"text-xs\", getPriorityColor(notification.priority))}>\n                          {notification.priority}\n                        </Badge>\n                        <Badge className={cn(\"text-xs\", getStatusColor(notification.status))}>\n                          {notification.status}\n                        </Badge>\n                        <div className=\"flex items-center text-xs text-muted-foreground ml-2\">\n                          {notification.channels.push && <div className=\"w-2 h-2 bg-blue-500 rounded-full mr-1\" title=\"Push\" />}\n                          {notification.channels.email && <Mail className=\"h-3 w-3 mr-1\" title=\"Email\" />}\n                          {notification.channels.sms && <MessageSquare className=\"h-3 w-3\" title=\"SMS\" />}\n                        </div>\n                      </div>\n\n                      {/* Content */}\n                      <h4 className=\"font-semibold text-foreground mb-1\">{notification.title}</h4>\n                      <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">\n                        {notification.message}\n                      </p>\n\n                      {/* Recipients */}\n                      <div className=\"flex items-center space-x-4 mb-3 text-sm\">\n                        <div className=\"flex items-center space-x-1\">\n                          <Users className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"font-medium\">{formatRecipientType(notification.recipientType)}</span>\n                          {notification.specificRecipients && (\n                            <span className=\"text-muted-foreground\">({notification.specificRecipients.length} selected)</span>\n                          )}\n                          {notification.locationFilter && (\n                            <span className=\"text-muted-foreground\">• {notification.locationFilter}</span>\n                          )}\n                          {notification.roleFilter && (\n                            <span className=\"text-muted-foreground\">• {notification.roleFilter}</span>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Metrics */}\n                      {notification.status === \"sent\" && (\n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-3\">\n                          <div className=\"space-y-2\">\n                            <div className=\"flex justify-between text-xs\">\n                              <span className=\"text-muted-foreground\">Delivery Rate</span>\n                              <span className=\"font-medium\">{deliveryRate.toFixed(1)}%</span>\n                            </div>\n                            <Progress value={deliveryRate} className=\"h-2\" />\n                            <div className=\"text-xs text-muted-foreground\">\n                              {notification.deliveredCount}/{notification.totalRecipients} delivered\n                            </div>\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <div className=\"flex justify-between text-xs\">\n                              <span className=\"text-muted-foreground\">Read Rate</span>\n                              <span className=\"font-medium\">{readRate.toFixed(1)}%</span>\n                            </div>\n                            <Progress value={readRate} className=\"h-2\" />\n                            <div className=\"text-xs text-muted-foreground\">\n                              {notification.readCount}/{notification.deliveredCount} read\n                            </div>\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <div className=\"flex justify-between text-xs\">\n                              <span className=\"text-muted-foreground\">Engagement</span>\n                              <span className=\"font-medium\">\n                                {notification.totalRecipients > 0 \n                                  ? ((notification.readCount / notification.totalRecipients) * 100).toFixed(1)\n                                  : 0}%\n                              </span>\n                            </div>\n                            <Progress \n                              value={notification.totalRecipients > 0 \n                                ? (notification.readCount / notification.totalRecipients) * 100\n                                : 0} \n                              className=\"h-2\" \n                            />\n                            <div className=\"text-xs text-muted-foreground\">\n                              Overall engagement rate\n                            </div>\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Timestamp and Sender */}\n                      <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"flex items-center space-x-1\">\n                            <Clock className=\"h-3 w-3\" />\n                            <span>{format(new Date(notification.sentAt), \"MMM d, yyyy 'at' h:mm a\")}</span>\n                          </div>\n                          <span>Sent by {notification.sentBy}</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Actions */}\n                    <div className=\"flex items-center space-x-2 ml-4\">\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => setSelectedNotification(notification)}\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-2xl\">\n                          <DialogHeader>\n                            <DialogTitle className=\"flex items-center space-x-2\">\n                              {getTypeIcon(notification.type)}\n                              <span>{notification.title}</span>\n                            </DialogTitle>\n                          </DialogHeader>\n                          <div className=\"space-y-4\">\n                            <div>\n                              <Label className=\"text-sm font-medium\">Message</Label>\n                              <p className=\"text-sm text-muted-foreground mt-1\">{notification.message}</p>\n                            </div>\n                            \n                            <div className=\"grid grid-cols-2 gap-4\">\n                              <div>\n                                <Label className=\"text-sm font-medium\">Recipients</Label>\n                                <p className=\"text-sm text-muted-foreground mt-1\">\n                                  {formatRecipientType(notification.recipientType)}\n                                  {notification.totalRecipients && ` (${notification.totalRecipients} users)`}\n                                </p>\n                              </div>\n                              <div>\n                                <Label className=\"text-sm font-medium\">Priority</Label>\n                                <Badge className={cn(\"text-xs mt-1\", getPriorityColor(notification.priority))}>\n                                  {notification.priority}\n                                </Badge>\n                              </div>\n                            </div>\n\n                            {notification.status === \"sent\" && (\n                              <div className=\"space-y-2\">\n                                <Label className=\"text-sm font-medium\">Performance Metrics</Label>\n                                <div className=\"grid grid-cols-3 gap-4 text-center\">\n                                  <div className=\"p-3 bg-muted/50 rounded-lg\">\n                                    <div className=\"text-lg font-bold text-foreground\">{notification.deliveredCount}</div>\n                                    <div className=\"text-xs text-muted-foreground\">Delivered</div>\n                                  </div>\n                                  <div className=\"p-3 bg-muted/50 rounded-lg\">\n                                    <div className=\"text-lg font-bold text-foreground\">{notification.readCount}</div>\n                                    <div className=\"text-xs text-muted-foreground\">Read</div>\n                                  </div>\n                                  <div className=\"p-3 bg-muted/50 rounded-lg\">\n                                    <div className=\"text-lg font-bold text-foreground\">{readRate.toFixed(1)}%</div>\n                                    <div className=\"text-xs text-muted-foreground\">Read Rate</div>\n                                  </div>\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n\n                      <Button variant=\"outline\" size=\"sm\">\n                        <MoreHorizontal className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              );\n            })\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":19701},"client/src/components/search/GlobalSearch.tsx":{"content":"import React, { useState, useRef, useEffect } from 'react';\nimport { Search, User, Wrench, AlertCircle, ChevronRight, X, Clock, MapPin, Phone, Mail } from 'lucide-react';\nimport { useLocation } from 'wouter';\nimport { dummyCustomers, dummyEngineers, dummyComplaints } from '@/lib/dummyData';\nimport { cn } from '@/lib/utils';\n\ninterface SearchResult {\n  id: number;\n  type: 'user' | 'engineer' | 'complaint';\n  title: string;\n  subtitle: string;\n  status?: string;\n  priority?: string;\n  location?: string;\n  details: string;\n}\n\nexport function GlobalSearch() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState<SearchResult[]>([]);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const searchRef = useRef<HTMLInputElement>(null);\n  const resultsRef = useRef<HTMLDivElement>(null);\n  const [, navigate] = useLocation();\n\n  // Search functionality\n  const performSearch = (searchQuery: string) => {\n    if (!searchQuery.trim()) {\n      setResults([]);\n      return;\n    }\n\n    const searchResults: SearchResult[] = [];\n    const lowercaseQuery = searchQuery.toLowerCase();\n\n    // Search customers/users\n    dummyCustomers.forEach(customer => {\n      if (\n        customer.name.toLowerCase().includes(lowercaseQuery) ||\n        customer.email.toLowerCase().includes(lowercaseQuery) ||\n        customer.phone.includes(searchQuery) ||\n        customer.location.toLowerCase().includes(lowercaseQuery)\n      ) {\n        searchResults.push({\n          id: customer.id,\n          type: 'user',\n          title: customer.name,\n          subtitle: customer.email,\n          status: customer.status,\n          location: customer.location,\n          details: `${customer.serviceProvider || 'No Service'} • ${customer.area} • ${customer.phone}`\n        });\n      }\n    });\n\n    // Search engineers\n    dummyEngineers.forEach(engineer => {\n      if (\n        engineer.name.toLowerCase().includes(lowercaseQuery) ||\n        engineer.email.toLowerCase().includes(lowercaseQuery) ||\n        engineer.phone.includes(searchQuery) ||\n        engineer.location.toLowerCase().includes(lowercaseQuery) ||\n        engineer.specialization.toLowerCase().includes(lowercaseQuery)\n      ) {\n        searchResults.push({\n          id: engineer.id,\n          type: 'engineer',\n          title: engineer.name,\n          subtitle: engineer.specialization,\n          status: engineer.isActive ? 'active' : 'inactive',\n          location: engineer.location,\n          details: `Rating: ${engineer.rating}/50 • ${engineer.completedJobs} jobs completed • ${engineer.phone}`\n        });\n      }\n    });\n\n    // Search complaints\n    dummyComplaints.forEach(complaint => {\n      if (\n        complaint.title.toLowerCase().includes(lowercaseQuery) ||\n        complaint.description.toLowerCase().includes(lowercaseQuery) ||\n        complaint.customerName.toLowerCase().includes(lowercaseQuery) ||\n        complaint.location.toLowerCase().includes(lowercaseQuery)\n      ) {\n        searchResults.push({\n          id: complaint.id,\n          type: 'complaint',\n          title: complaint.title,\n          subtitle: `By ${complaint.customerName}`,\n          status: complaint.status,\n          priority: complaint.priority,\n          location: complaint.location,\n          details: `${complaint.priority.toUpperCase()} • ${complaint.location} • ${new Date(complaint.createdAt).toLocaleDateString()}`\n        });\n      }\n    });\n\n    // Sort results by relevance (exact matches first)\n    searchResults.sort((a, b) => {\n      const aExact = a.title.toLowerCase().startsWith(lowercaseQuery) ? 1 : 0;\n      const bExact = b.title.toLowerCase().startsWith(lowercaseQuery) ? 1 : 0;\n      return bExact - aExact;\n    });\n\n    setResults(searchResults.slice(0, 8)); // Limit to 8 results\n    setSelectedIndex(0);\n  };\n\n  // Handle input change\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      performSearch(query);\n    }, 150);\n\n    return () => clearTimeout(timeoutId);\n  }, [query]);\n\n  // Handle keyboard navigation\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (!isOpen) return;\n\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setSelectedIndex((prev) => (prev < results.length - 1 ? prev + 1 : prev));\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setSelectedIndex((prev) => (prev > 0 ? prev - 1 : prev));\n        break;\n      case 'Enter':\n        e.preventDefault();\n        if (results[selectedIndex]) {\n          handleResultClick(results[selectedIndex]);\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        setIsOpen(false);\n        setQuery('');\n        searchRef.current?.blur();\n        break;\n    }\n  };\n\n  // Handle result click\n  const handleResultClick = (result: SearchResult) => {\n    let path = '';\n    \n    switch (result.type) {\n      case 'user':\n        path = `/users/${result.id}`;\n        break;\n      case 'engineer':\n        path = `/engineers/${result.id}`;\n        break;\n      case 'complaint':\n        path = `/complaints/${result.id}`;\n        break;\n    }\n    \n    navigate(path);\n    setIsOpen(false);\n    setQuery('');\n    searchRef.current?.blur();\n  };\n\n  // Get icon for result type\n  const getIcon = (type: string) => {\n    switch (type) {\n      case 'user':\n        return <User className=\"h-4 w-4\" />;\n      case 'engineer':\n        return <Wrench className=\"h-4 w-4\" />;\n      case 'complaint':\n        return <AlertCircle className=\"h-4 w-4\" />;\n      default:\n        return <Search className=\"h-4 w-4\" />;\n    }\n  };\n\n  // Get status color\n  const getStatusColor = (type: string, status?: string, priority?: string) => {\n    if (type === 'complaint' && priority) {\n      switch (priority) {\n        case 'urgent':\n          return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300';\n        case 'high':\n          return 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-300';\n        case 'medium':\n          return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300';\n        case 'low':\n          return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300';\n      }\n    }\n    \n    if (status) {\n      switch (status) {\n        case 'active':\n          return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300';\n        case 'inactive':\n        case 'suspended':\n          return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300';\n        case 'pending':\n          return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300';\n        case 'resolved':\n          return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300';\n        default:\n          return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-300';\n      }\n    }\n    \n    return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-300';\n  };\n\n  return (\n    <div className=\"relative flex-1 max-w-md\">\n      {/* Search Input */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500 h-4 w-4\" />\n        <input\n          ref={searchRef}\n          type=\"text\"\n          placeholder=\"Search complaints, users, engineers...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          onFocus={() => setIsOpen(true)}\n          onKeyDown={handleKeyDown}\n          className=\"w-full pl-10 pr-4 py-2 bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors\"\n        />\n        {query && (\n          <button\n            onClick={() => {\n              setQuery('');\n              setResults([]);\n              searchRef.current?.focus();\n            }}\n            className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300\"\n          >\n            <X className=\"h-4 w-4\" />\n          </button>\n        )}\n      </div>\n\n      {/* Search Results Dropdown */}\n      {isOpen && (query || results.length > 0) && (\n        <>\n          {/* Backdrop */}\n          <div\n            className=\"fixed inset-0 bg-black/10 dark:bg-black/20 z-40\"\n            onClick={() => setIsOpen(false)}\n          />\n          \n          {/* Results Panel */}\n          <div\n            ref={resultsRef}\n            className=\"absolute top-full left-0 right-0 mt-2 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-50 max-h-96 overflow-y-auto\"\n          >\n            {results.length > 0 ? (\n              <>\n                <div className=\"p-3 border-b border-gray-100 dark:border-gray-800\">\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    Found {results.length} result{results.length !== 1 ? 's' : ''} for \"{query}\"\n                  </p>\n                </div>\n                <div className=\"py-2\">\n                  {results.map((result, index) => (\n                    <button\n                      key={`${result.type}-${result.id}`}\n                      onClick={() => handleResultClick(result)}\n                      className={cn(\n                        \"w-full px-4 py-3 text-left hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors flex items-center gap-3 group\",\n                        selectedIndex === index && \"bg-gray-50 dark:bg-gray-800\"\n                      )}\n                    >\n                      {/* Icon */}\n                      <div className=\"flex-shrink-0 p-2 bg-gray-100 dark:bg-gray-800 rounded-lg group-hover:bg-white dark:group-hover:bg-gray-700 transition-colors\">\n                        {getIcon(result.type)}\n                      </div>\n                      \n                      {/* Content */}\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <p className=\"font-medium text-gray-900 dark:text-white text-sm truncate\">\n                            {result.title}\n                          </p>\n                          {(result.status || result.priority) && (\n                            <span className={cn(\n                              \"px-2 py-0.5 rounded-full text-xs font-medium\",\n                              getStatusColor(result.type, result.status, result.priority)\n                            )}>\n                              {result.priority || result.status}\n                            </span>\n                          )}\n                        </div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400 truncate\">\n                          {result.subtitle}\n                        </p>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-500 truncate mt-1\">\n                          {result.details}\n                        </p>\n                      </div>\n                      \n                      {/* Arrow */}\n                      <div className=\"flex-shrink-0 text-gray-400 dark:text-gray-500\">\n                        <ChevronRight className=\"h-4 w-4\" />\n                      </div>\n                    </button>\n                  ))}\n                </div>\n              </>\n            ) : query ? (\n              <div className=\"p-8 text-center text-gray-500 dark:text-gray-400\">\n                <Search className=\"h-8 w-8 mx-auto mb-3 opacity-50\" />\n                <p className=\"text-sm\">No results found for \"{query}\"</p>\n                <p className=\"text-xs mt-1\">Try searching for names, emails, or locations</p>\n              </div>\n            ) : (\n              <div className=\"p-6 text-center text-gray-500 dark:text-gray-400\">\n                <Search className=\"h-8 w-8 mx-auto mb-3 opacity-50\" />\n                <p className=\"text-sm\">Search across all data</p>\n                <p className=\"text-xs mt-1\">Find complaints, users, and engineers instantly</p>\n              </div>\n            )}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}","size_bytes":12244},"client/src/components/support/rating-system.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { \n  Star, \n  Search, \n  Filter, \n  ThumbsUp, \n  ThumbsDown,\n  MessageSquare,\n  TrendingUp,\n  Award,\n  Users,\n  Calendar,\n  Download\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface Rating {\n  id: number;\n  ticketId: number;\n  customerName: string;\n  customerEmail: string;\n  rating: number;\n  feedback: string;\n  category: string;\n  engineerName?: string;\n  createdAt: string;\n  helpful: number;\n  notHelpful: number;\n  tags: string[];\n}\n\ninterface RatingSystemProps {\n  ratings: Rating[];\n  currentPage: number;\n  totalPages: number;\n  onPageChange: (page: number) => void;\n  itemsPerPage: number;\n}\n\nexport function RatingSystem({\n  ratings,\n  currentPage,\n  totalPages,\n  onPageChange,\n  itemsPerPage\n}: RatingSystemProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filterRating, setFilterRating] = useState(\"all\");\n  const [filterCategory, setFilterCategory] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"newest\");\n  const [selectedRating, setSelectedRating] = useState<Rating | null>(null);\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((part) => part[0])\n      .join(\"\")\n      .toUpperCase();\n  };\n\n  const filteredRatings = ratings.filter((rating) => {\n    const matchesSearch = \n      rating.customerName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      rating.feedback.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      rating.engineerName?.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesRating = filterRating === \"all\" || rating.rating.toString() === filterRating;\n    const matchesCategory = filterCategory === \"all\" || rating.category === filterCategory;\n\n    return matchesSearch && matchesRating && matchesCategory;\n  });\n\n  const sortedRatings = [...filteredRatings].sort((a, b) => {\n    switch (sortBy) {\n      case \"newest\":\n        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n      case \"oldest\":\n        return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\n      case \"highest\":\n        return b.rating - a.rating;\n      case \"lowest\":\n        return a.rating - b.rating;\n      case \"most-helpful\":\n        return b.helpful - a.helpful;\n      default:\n        return 0;\n    }\n  });\n\n  const renderStars = (rating: number, size: \"sm\" | \"md\" | \"lg\" = \"md\") => {\n    const sizeClasses = {\n      sm: \"h-3 w-3\",\n      md: \"h-4 w-4\",\n      lg: \"h-5 w-5\"\n    };\n\n    return (\n      <div className=\"flex\">\n        {[...Array(5)].map((_, i) => (\n          <Star\n            key={i}\n            className={`${sizeClasses[size]} ${\n              i < rating ? \"text-yellow-400 fill-current\" : \"text-gray-300\"\n            }`}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  const getRatingColor = (rating: number) => {\n    if (rating >= 4) return \"text-green-600 bg-green-50\";\n    if (rating >= 3) return \"text-yellow-600 bg-yellow-50\";\n    return \"text-red-600 bg-red-50\";\n  };\n\n  const getAvatarColor = (index: number) => {\n    const colors = [\n      \"bg-blue-500\", \"bg-purple-500\", \"bg-green-500\", \n      \"bg-yellow-500\", \"bg-red-500\", \"bg-indigo-500\",\n      \"bg-pink-500\", \"bg-orange-500\"\n    ];\n    return colors[index % colors.length];\n  };\n\n  // Calculate analytics\n  const averageRating = ratings.length > 0 \n    ? ratings.reduce((sum, r) => sum + r.rating, 0) / ratings.length \n    : 0;\n\n  const ratingDistribution = [\n    { stars: 5, count: ratings.filter(r => r.rating === 5).length },\n    { stars: 4, count: ratings.filter(r => r.rating === 4).length },\n    { stars: 3, count: ratings.filter(r => r.rating === 3).length },\n    { stars: 2, count: ratings.filter(r => r.rating === 2).length },\n    { stars: 1, count: ratings.filter(r => r.rating === 1).length },\n  ];\n\n  const totalRatings = ratings.length;\n  const positiveRatings = ratings.filter(r => r.rating >= 4).length;\n  const satisfactionRate = totalRatings > 0 ? (positiveRatings / totalRatings) * 100 : 0;\n\n  const PaginationControls = () => {\n    const startItem = (currentPage - 1) * itemsPerPage + 1;\n    const endItem = Math.min(currentPage * itemsPerPage, sortedRatings.length);\n\n    return (\n      <div className=\"flex items-center justify-between py-4 border-t\">\n        <div className=\"text-sm text-muted-foreground\">\n          Showing {startItem}-{endItem} of {sortedRatings.length} ratings\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => onPageChange(currentPage - 1)}\n            disabled={currentPage === 1}\n          >\n            Previous\n          </Button>\n          \n          {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n            <Button\n              key={page}\n              variant={currentPage === page ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => onPageChange(page)}\n              className=\"w-8 h-8 p-0\"\n            >\n              {page}\n            </Button>\n          ))}\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => onPageChange(currentPage + 1)}\n            disabled={currentPage === totalPages}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Rating Analytics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"border-2 border-yellow-200 bg-yellow-50/50\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center text-sm font-medium text-yellow-700\">\n              <Star className=\"h-4 w-4 mr-2\" />\n              Average Rating\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-2xl font-bold text-yellow-900\">{averageRating.toFixed(1)}</span>\n              {renderStars(Math.floor(averageRating), \"sm\")}\n            </div>\n            <p className=\"text-xs text-yellow-600 mt-1\">Based on {totalRatings} reviews</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-2 border-green-200 bg-green-50/50\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center text-sm font-medium text-green-700\">\n              <ThumbsUp className=\"h-4 w-4 mr-2\" />\n              Satisfaction Rate\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-900\">{satisfactionRate.toFixed(1)}%</div>\n            <p className=\"text-xs text-green-600 mt-1\">{positiveRatings} of {totalRatings} positive</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-2 border-blue-200 bg-blue-50/50\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center text-sm font-medium text-blue-700\">\n              <MessageSquare className=\"h-4 w-4 mr-2\" />\n              Total Reviews\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-900\">{totalRatings}</div>\n            <p className=\"text-xs text-blue-600 mt-1\">Customer feedback</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-2 border-purple-200 bg-purple-50/50\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center text-sm font-medium text-purple-700\">\n              <TrendingUp className=\"h-4 w-4 mr-2\" />\n              Trend\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-900\">+5.2%</div>\n            <p className=\"text-xs text-purple-600 mt-1\">vs last month</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Rating Distribution */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Award className=\"h-5 w-5 mr-2 text-primary\" />\n            Rating Distribution\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {ratingDistribution.map((item) => {\n              const percentage = totalRatings > 0 ? (item.count / totalRatings) * 100 : 0;\n              return (\n                <div key={item.stars} className=\"flex items-center space-x-3\">\n                  <div className=\"flex items-center space-x-1 w-16\">\n                    <span className=\"text-sm font-medium\">{item.stars}</span>\n                    <Star className=\"h-3 w-3 text-yellow-400 fill-current\" />\n                  </div>\n                  <div className=\"flex-1 h-2 bg-gray-200 rounded-full overflow-hidden\">\n                    <div \n                      className=\"h-full bg-yellow-400 transition-all duration-300\"\n                      style={{ width: `${percentage}%` }}\n                    />\n                  </div>\n                  <div className=\"text-sm text-muted-foreground w-12 text-right\">\n                    {item.count}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground w-12 text-right\">\n                    {percentage.toFixed(0)}%\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Ratings List */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center\">\n              <MessageSquare className=\"h-5 w-5 mr-2 text-primary\" />\n              Customer Reviews & Ratings\n              <Badge variant=\"outline\" className=\"ml-2\">\n                {sortedRatings.length} reviews\n              </Badge>\n            </CardTitle>\n            <Button variant=\"outline\" size=\"sm\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export\n            </Button>\n          </div>\n\n          {/* Filters */}\n          <div className=\"flex flex-col sm:flex-row gap-3 mt-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search reviews...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Select value={filterRating} onValueChange={setFilterRating}>\n                <SelectTrigger className=\"w-[120px]\">\n                  <SelectValue placeholder=\"Rating\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Ratings</SelectItem>\n                  <SelectItem value=\"5\">5 Stars</SelectItem>\n                  <SelectItem value=\"4\">4 Stars</SelectItem>\n                  <SelectItem value=\"3\">3 Stars</SelectItem>\n                  <SelectItem value=\"2\">2 Stars</SelectItem>\n                  <SelectItem value=\"1\">1 Star</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={filterCategory} onValueChange={setFilterCategory}>\n                <SelectTrigger className=\"w-[120px]\">\n                  <SelectValue placeholder=\"Category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  <SelectItem value=\"technical\">Technical</SelectItem>\n                  <SelectItem value=\"billing\">Billing</SelectItem>\n                  <SelectItem value=\"general\">General</SelectItem>\n                  <SelectItem value=\"installation\">Installation</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"w-[120px]\">\n                  <SelectValue placeholder=\"Sort by\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"newest\">Newest</SelectItem>\n                  <SelectItem value=\"oldest\">Oldest</SelectItem>\n                  <SelectItem value=\"highest\">Highest Rating</SelectItem>\n                  <SelectItem value=\"lowest\">Lowest Rating</SelectItem>\n                  <SelectItem value=\"most-helpful\">Most Helpful</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"p-0\">\n          <div className=\"divide-y divide-border\">\n            {sortedRatings.length === 0 ? (\n              <div className=\"p-8 text-center text-muted-foreground\">\n                <Star className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-lg font-medium\">No reviews found</p>\n                <p className=\"text-sm\">Try adjusting your search or filters</p>\n              </div>\n            ) : (\n              sortedRatings.map((rating, index) => (\n                <div key={rating.id} className=\"p-6 hover:bg-muted/30 transition-colors\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex space-x-4 flex-1\">\n                      <Avatar className=\"h-10 w-10\">\n                        <AvatarFallback className={`text-white font-semibold ${getAvatarColor(index)}`}>\n                          {getInitials(rating.customerName)}\n                        </AvatarFallback>\n                      </Avatar>\n                      \n                      <div className=\"flex-1\">\n                        {/* Header */}\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"flex items-center space-x-3\">\n                            <h4 className=\"font-semibold text-foreground\">{rating.customerName}</h4>\n                            <div className=\"flex items-center space-x-1\">\n                              {renderStars(rating.rating)}\n                              <span className=\"text-sm font-medium ml-1\">{rating.rating}.0</span>\n                            </div>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {rating.category}\n                            </Badge>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              Ticket #{rating.ticketId}\n                            </Badge>\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {format(new Date(rating.createdAt), \"MMM d, yyyy\")}\n                          </div>\n                        </div>\n\n                        {/* Feedback */}\n                        <p className=\"text-sm text-muted-foreground mb-3 leading-relaxed\">\n                          \"{rating.feedback}\"\n                        </p>\n\n                        {/* Tags */}\n                        {rating.tags && rating.tags.length > 0 && (\n                          <div className=\"flex flex-wrap gap-1 mb-3\">\n                            {rating.tags.map((tag, tagIndex) => (\n                              <Badge key={tagIndex} variant=\"secondary\" className=\"text-xs\">\n                                {tag}\n                              </Badge>\n                            ))}\n                          </div>\n                        )}\n\n                        {/* Footer */}\n                        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                          <div className=\"flex items-center space-x-4\">\n                            {rating.engineerName && (\n                              <span>Engineer: {rating.engineerName}</span>\n                            )}\n                            <span>Customer: {rating.customerEmail}</span>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-3\">\n                            <button className=\"flex items-center space-x-1 hover:text-green-600 transition-colors\">\n                              <ThumbsUp className=\"h-3 w-3\" />\n                              <span>{rating.helpful}</span>\n                            </button>\n                            <button className=\"flex items-center space-x-1 hover:text-red-600 transition-colors\">\n                              <ThumbsDown className=\"h-3 w-3\" />\n                              <span>{rating.notHelpful}</span>\n                            </button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Actions */}\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => setSelectedRating(rating)}\n                        >\n                          View Details\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-2xl\">\n                        <DialogHeader>\n                          <DialogTitle className=\"flex items-center space-x-2\">\n                            <span>Review Details</span>\n                            <div className=\"flex items-center space-x-1\">\n                              {renderStars(rating.rating)}\n                              <span className=\"text-sm ml-1\">{rating.rating}.0</span>\n                            </div>\n                          </DialogTitle>\n                          <DialogDescription>\n                            Review for Ticket #{rating.ticketId}\n                          </DialogDescription>\n                        </DialogHeader>\n                        \n                        <div className=\"space-y-4\">\n                          <div className=\"grid grid-cols-2 gap-4 p-4 bg-muted/50 rounded-lg\">\n                            <div>\n                              <label className=\"text-sm font-medium\">Customer</label>\n                              <p className=\"text-sm\">{rating.customerName}</p>\n                            </div>\n                            <div>\n                              <label className=\"text-sm font-medium\">Email</label>\n                              <p className=\"text-sm\">{rating.customerEmail}</p>\n                            </div>\n                            <div>\n                              <label className=\"text-sm font-medium\">Category</label>\n                              <p className=\"text-sm\">{rating.category}</p>\n                            </div>\n                            <div>\n                              <label className=\"text-sm font-medium\">Engineer</label>\n                              <p className=\"text-sm\">{rating.engineerName || \"N/A\"}</p>\n                            </div>\n                          </div>\n\n                          <div>\n                            <label className=\"text-sm font-medium\">Feedback</label>\n                            <p className=\"text-sm text-muted-foreground mt-1 p-3 bg-muted/50 rounded-lg\">\n                              \"{rating.feedback}\"\n                            </p>\n                          </div>\n\n                          {rating.tags && rating.tags.length > 0 && (\n                            <div>\n                              <label className=\"text-sm font-medium\">Tags</label>\n                              <div className=\"flex flex-wrap gap-1 mt-1\">\n                                {rating.tags.map((tag, tagIndex) => (\n                                  <Badge key={tagIndex} variant=\"secondary\" className=\"text-xs\">\n                                    {tag}\n                                  </Badge>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n\n                          <div className=\"flex items-center justify-between pt-4 border-t\">\n                            <div className=\"text-sm text-muted-foreground\">\n                              Submitted on {format(new Date(rating.createdAt), \"MMMM d, yyyy 'at' h:mm a\")}\n                            </div>\n                            <div className=\"flex items-center space-x-3\">\n                              <button className=\"flex items-center space-x-1 text-sm hover:text-green-600 transition-colors\">\n                                <ThumbsUp className=\"h-4 w-4\" />\n                                <span>{rating.helpful} helpful</span>\n                              </button>\n                              <button className=\"flex items-center space-x-1 text-sm hover:text-red-600 transition-colors\">\n                                <ThumbsDown className=\"h-4 w-4\" />\n                                <span>{rating.notHelpful} not helpful</span>\n                              </button>\n                            </div>\n                          </div>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n\n          {/* Pagination */}\n          {sortedRatings.length > 0 && <PaginationControls />}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":22080},"client/src/components/support/settings-panel.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Settings, \n  User, \n  Bell, \n  Clock, \n  Shield, \n  Mail, \n  MessageSquare,\n  Save,\n  RefreshCw,\n  Download,\n  Upload,\n  Eye,\n  EyeOff,\n  Zap,\n  Target,\n  Users,\n  AlertTriangle,\n  CheckCircle,\n  Trash2,\n  Plus\n} from \"lucide-react\";\n\ninterface SettingsPanelProps {\n  onSettingsUpdate: (settings: any) => void;\n}\n\nexport function SettingsPanel({ onSettingsUpdate }: SettingsPanelProps) {\n  const { toast } = useToast();\n\n  // Settings state\n  const [settings, setSettings] = useState({\n    // General Settings\n    companyName: \"WiFi Self-Care Platform\",\n    supportEmail: \"support@wificare.com\",\n    businessHours: \"Monday - Friday, 9:00 AM - 6:00 PM\",\n    timezone: \"Asia/Kolkata\",\n    \n    // SLA Settings\n    responseTime: \"2\", // hours\n    resolutionTime: \"24\", // hours\n    urgentTicketResponse: \"30\", // minutes\n    escalationTime: \"4\", // hours\n    \n    // Notification Settings\n    emailNotifications: true,\n    smsNotifications: false,\n    pushNotifications: true,\n    customerUpdates: true,\n    agentAssignments: true,\n    ticketEscalation: true,\n    \n    // Rating Settings\n    enableRatings: true,\n    mandatoryRating: false,\n    ratingThreshold: \"3\", // minimum rating to flag for review\n    feedbackRequired: true,\n    publicReviews: false,\n    moderateReviews: true,\n    \n    // Auto-Assignment Settings\n    autoAssignment: true,\n    loadBalancing: true,\n    skillBasedRouting: true,\n    roundRobinAssignment: false,\n    \n    // Security Settings\n    requireAuth: true,\n    sessionTimeout: \"30\", // minutes\n    twoFactorAuth: false,\n    auditLog: true,\n    \n    // Integration Settings\n    slackIntegration: false,\n    teamsIntegration: false,\n    webhookUrl: \"\",\n    apiAccessEnabled: true,\n    \n    // Custom Templates\n    welcomeMessage: \"Thank you for contacting our support team. We'll respond to your ticket within 2 hours.\",\n    resolvedMessage: \"Your ticket has been resolved. Please rate our service to help us improve.\",\n    escalationMessage: \"Your ticket has been escalated to our senior team for priority handling.\",\n    \n    // Department Settings\n    departments: [\n      { id: 1, name: \"Technical Support\", active: true, agents: 8 },\n      { id: 2, name: \"Billing\", active: true, agents: 4 },\n      { id: 3, name: \"Sales\", active: true, agents: 6 },\n      { id: 4, name: \"Installation\", active: true, agents: 5 }\n    ],\n    \n    // Priority Settings\n    priorities: [\n      { level: \"Low\", color: \"#3b82f6\", autoEscalate: false, escalateAfter: \"72\" },\n      { level: \"Medium\", color: \"#f59e0b\", autoEscalate: true, escalateAfter: \"24\" },\n      { level: \"High\", color: \"#ef4444\", autoEscalate: true, escalateAfter: \"8\" },\n      { level: \"Urgent\", color: \"#dc2626\", autoEscalate: true, escalateAfter: \"2\" }\n    ]\n  });\n\n  const [activeTab, setActiveTab] = useState(\"general\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSettingChange = (key: string, value: any) => {\n    const newSettings = { ...settings, [key]: value };\n    setSettings(newSettings);\n  };\n\n  const handleSaveSettings = async () => {\n    setIsLoading(true);\n    \n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    onSettingsUpdate(settings);\n    setIsLoading(false);\n    \n    toast({\n      title: \"Settings Saved\",\n      description: \"Your support settings have been updated successfully\",\n    });\n  };\n\n  const handleResetSettings = () => {\n    toast({\n      title: \"Settings Reset\",\n      description: \"All settings have been reset to default values\",\n    });\n  };\n\n  const handleExportSettings = () => {\n    const dataStr = JSON.stringify(settings, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'support-settings.json';\n    link.click();\n    \n    toast({\n      title: \"Settings Exported\",\n      description: \"Settings have been downloaded as JSON file\",\n    });\n  };\n\n  const tabs = [\n    { id: \"general\", label: \"General\", icon: Settings },\n    { id: \"sla\", label: \"SLA & Performance\", icon: Target },\n    { id: \"notifications\", label: \"Notifications\", icon: Bell },\n    { id: \"ratings\", label: \"Ratings & Reviews\", icon: MessageSquare },\n    { id: \"assignment\", label: \"Auto-Assignment\", icon: Users },\n    { id: \"security\", label: \"Security\", icon: Shield },\n    { id: \"integrations\", label: \"Integrations\", icon: Zap },\n    { id: \"templates\", label: \"Templates\", icon: Mail }\n  ];\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case \"general\":\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"companyName\">Company Name</Label>\n                <Input\n                  id=\"companyName\"\n                  value={settings.companyName}\n                  onChange={(e) => handleSettingChange(\"companyName\", e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"supportEmail\">Support Email</Label>\n                <Input\n                  id=\"supportEmail\"\n                  type=\"email\"\n                  value={settings.supportEmail}\n                  onChange={(e) => handleSettingChange(\"supportEmail\", e.target.value)}\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"businessHours\">Business Hours</Label>\n                <Input\n                  id=\"businessHours\"\n                  value={settings.businessHours}\n                  onChange={(e) => handleSettingChange(\"businessHours\", e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"timezone\">Timezone</Label>\n                <Select value={settings.timezone} onValueChange={(value) => handleSettingChange(\"timezone\", value)}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Asia/Kolkata\">Asia/Kolkata (IST)</SelectItem>\n                    <SelectItem value=\"America/New_York\">America/New_York (EST)</SelectItem>\n                    <SelectItem value=\"Europe/London\">Europe/London (GMT)</SelectItem>\n                    <SelectItem value=\"Asia/Tokyo\">Asia/Tokyo (JST)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div>\n              <Label className=\"text-base font-semibold mb-3 block\">Departments</Label>\n              <div className=\"space-y-3\">\n                {settings.departments.map((dept) => (\n                  <div key={dept.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Switch\n                        checked={dept.active}\n                        onCheckedChange={(checked) => {\n                          const newDepts = settings.departments.map(d => \n                            d.id === dept.id ? { ...d, active: checked } : d\n                          );\n                          handleSettingChange(\"departments\", newDepts);\n                        }}\n                      />\n                      <span className=\"font-medium\">{dept.name}</span>\n                      <Badge variant=\"outline\">{dept.agents} agents</Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        );\n\n      case \"sla\":\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"responseTime\">Response Time (hours)</Label>\n                <Input\n                  id=\"responseTime\"\n                  type=\"number\"\n                  value={settings.responseTime}\n                  onChange={(e) => handleSettingChange(\"responseTime\", e.target.value)}\n                />\n                <p className=\"text-sm text-muted-foreground mt-1\">Target time to respond to new tickets</p>\n              </div>\n              <div>\n                <Label htmlFor=\"resolutionTime\">Resolution Time (hours)</Label>\n                <Input\n                  id=\"resolutionTime\"\n                  type=\"number\"\n                  value={settings.resolutionTime}\n                  onChange={(e) => handleSettingChange(\"resolutionTime\", e.target.value)}\n                />\n                <p className=\"text-sm text-muted-foreground mt-1\">Target time to resolve tickets</p>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"urgentTicketResponse\">Urgent Ticket Response (minutes)</Label>\n                <Input\n                  id=\"urgentTicketResponse\"\n                  type=\"number\"\n                  value={settings.urgentTicketResponse}\n                  onChange={(e) => handleSettingChange(\"urgentTicketResponse\", e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"escalationTime\">Auto-Escalation Time (hours)</Label>\n                <Input\n                  id=\"escalationTime\"\n                  type=\"number\"\n                  value={settings.escalationTime}\n                  onChange={(e) => handleSettingChange(\"escalationTime\", e.target.value)}\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label className=\"text-base font-semibold mb-3 block\">Priority Settings</Label>\n              <div className=\"space-y-3\">\n                {settings.priorities.map((priority, index) => (\n                  <div key={priority.level} className=\"p-4 border rounded-lg\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div\n                          className=\"w-4 h-4 rounded-full\"\n                          style={{ backgroundColor: priority.color }}\n                        />\n                        <span className=\"font-medium\">{priority.level} Priority</span>\n                      </div>\n                      <Switch\n                        checked={priority.autoEscalate}\n                        onCheckedChange={(checked) => {\n                          const newPriorities = [...settings.priorities];\n                          newPriorities[index] = { ...priority, autoEscalate: checked };\n                          handleSettingChange(\"priorities\", newPriorities);\n                        }}\n                      />\n                    </div>\n                    {priority.autoEscalate && (\n                      <div className=\"flex items-center space-x-2\">\n                        <Label className=\"text-sm\">Escalate after:</Label>\n                        <Input\n                          className=\"w-20\"\n                          type=\"number\"\n                          value={priority.escalateAfter}\n                          onChange={(e) => {\n                            const newPriorities = [...settings.priorities];\n                            newPriorities[index] = { ...priority, escalateAfter: e.target.value };\n                            handleSettingChange(\"priorities\", newPriorities);\n                          }}\n                        />\n                        <span className=\"text-sm text-muted-foreground\">hours</span>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        );\n\n      case \"notifications\":\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Email Notifications</Label>\n                  <p className=\"text-sm text-muted-foreground\">Send notifications via email</p>\n                </div>\n                <Switch\n                  checked={settings.emailNotifications}\n                  onCheckedChange={(checked) => handleSettingChange(\"emailNotifications\", checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">SMS Notifications</Label>\n                  <p className=\"text-sm text-muted-foreground\">Send urgent notifications via SMS</p>\n                </div>\n                <Switch\n                  checked={settings.smsNotifications}\n                  onCheckedChange={(checked) => handleSettingChange(\"smsNotifications\", checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Push Notifications</Label>\n                  <p className=\"text-sm text-muted-foreground\">Browser push notifications</p>\n                </div>\n                <Switch\n                  checked={settings.pushNotifications}\n                  onCheckedChange={(checked) => handleSettingChange(\"pushNotifications\", checked)}\n                />\n              </div>\n            </div>\n\n            <Separator />\n\n            <div className=\"space-y-4\">\n              <h4 className=\"text-base font-semibold\">Notification Types</h4>\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Customer Updates</Label>\n                  <p className=\"text-sm text-muted-foreground\">Notify customers of ticket status changes</p>\n                </div>\n                <Switch\n                  checked={settings.customerUpdates}\n                  onCheckedChange={(checked) => handleSettingChange(\"customerUpdates\", checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Agent Assignments</Label>\n                  <p className=\"text-sm text-muted-foreground\">Notify agents when tickets are assigned</p>\n                </div>\n                <Switch\n                  checked={settings.agentAssignments}\n                  onCheckedChange={(checked) => handleSettingChange(\"agentAssignments\", checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Ticket Escalation</Label>\n                  <p className=\"text-sm text-muted-foreground\">Notify supervisors of escalated tickets</p>\n                </div>\n                <Switch\n                  checked={settings.ticketEscalation}\n                  onCheckedChange={(checked) => handleSettingChange(\"ticketEscalation\", checked)}\n                />\n              </div>\n            </div>\n          </div>\n        );\n\n      case \"ratings\":\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Enable Ratings</Label>\n                  <p className=\"text-sm text-muted-foreground\">Allow customers to rate support interactions</p>\n                </div>\n                <Switch\n                  checked={settings.enableRatings}\n                  onCheckedChange={(checked) => handleSettingChange(\"enableRatings\", checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Mandatory Rating</Label>\n                  <p className=\"text-sm text-muted-foreground\">Require rating before closing tickets</p>\n                </div>\n                <Switch\n                  checked={settings.mandatoryRating}\n                  onCheckedChange={(checked) => handleSettingChange(\"mandatoryRating\", checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Feedback Required</Label>\n                  <p className=\"text-sm text-muted-foreground\">Require written feedback with ratings</p>\n                </div>\n                <Switch\n                  checked={settings.feedbackRequired}\n                  onCheckedChange={(checked) => handleSettingChange(\"feedbackRequired\", checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Public Reviews</Label>\n                  <p className=\"text-sm text-muted-foreground\">Make reviews visible to other customers</p>\n                </div>\n                <Switch\n                  checked={settings.publicReviews}\n                  onCheckedChange={(checked) => handleSettingChange(\"publicReviews\", checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Moderate Reviews</Label>\n                  <p className=\"text-sm text-muted-foreground\">Review feedback before publishing</p>\n                </div>\n                <Switch\n                  checked={settings.moderateReviews}\n                  onCheckedChange={(checked) => handleSettingChange(\"moderateReviews\", checked)}\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"ratingThreshold\">Rating Alert Threshold</Label>\n              <Select value={settings.ratingThreshold} onValueChange={(value) => handleSettingChange(\"ratingThreshold\", value)}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"1\">1 Star - Alert on very poor ratings</SelectItem>\n                  <SelectItem value=\"2\">2 Stars - Alert on poor ratings</SelectItem>\n                  <SelectItem value=\"3\">3 Stars - Alert on average ratings</SelectItem>\n                  <SelectItem value=\"4\">4 Stars - Alert on good ratings</SelectItem>\n                </SelectContent>\n              </Select>\n              <p className=\"text-sm text-muted-foreground mt-1\">Ratings below this threshold will trigger alerts</p>\n            </div>\n          </div>\n        );\n\n      case \"assignment\":\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Auto-Assignment</Label>\n                  <p className=\"text-sm text-muted-foreground\">Automatically assign tickets to agents</p>\n                </div>\n                <Switch\n                  checked={settings.autoAssignment}\n                  onCheckedChange={(checked) => handleSettingChange(\"autoAssignment\", checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Load Balancing</Label>\n                  <p className=\"text-sm text-muted-foreground\">Distribute tickets based on agent workload</p>\n                </div>\n                <Switch\n                  checked={settings.loadBalancing}\n                  onCheckedChange={(checked) => handleSettingChange(\"loadBalancing\", checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Skill-Based Routing</Label>\n                  <p className=\"text-sm text-muted-foreground\">Assign tickets based on agent expertise</p>\n                </div>\n                <Switch\n                  checked={settings.skillBasedRouting}\n                  onCheckedChange={(checked) => handleSettingChange(\"skillBasedRouting\", checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Round Robin Assignment</Label>\n                  <p className=\"text-sm text-muted-foreground\">Assign tickets in sequential order</p>\n                </div>\n                <Switch\n                  checked={settings.roundRobinAssignment}\n                  onCheckedChange={(checked) => handleSettingChange(\"roundRobinAssignment\", checked)}\n                />\n              </div>\n            </div>\n          </div>\n        );\n\n      case \"security\":\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Require Authentication</Label>\n                  <p className=\"text-sm text-muted-foreground\">Users must login to create tickets</p>\n                </div>\n                <Switch\n                  checked={settings.requireAuth}\n                  onCheckedChange={(checked) => handleSettingChange(\"requireAuth\", checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Two-Factor Authentication</Label>\n                  <p className=\"text-sm text-muted-foreground\">Require 2FA for agent accounts</p>\n                </div>\n                <Switch\n                  checked={settings.twoFactorAuth}\n                  onCheckedChange={(checked) => handleSettingChange(\"twoFactorAuth\", checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Audit Logging</Label>\n                  <p className=\"text-sm text-muted-foreground\">Log all user actions for security</p>\n                </div>\n                <Switch\n                  checked={settings.auditLog}\n                  onCheckedChange={(checked) => handleSettingChange(\"auditLog\", checked)}\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"sessionTimeout\">Session Timeout (minutes)</Label>\n              <Input\n                id=\"sessionTimeout\"\n                type=\"number\"\n                value={settings.sessionTimeout}\n                onChange={(e) => handleSettingChange(\"sessionTimeout\", e.target.value)}\n              />\n              <p className=\"text-sm text-muted-foreground mt-1\">Auto-logout users after inactivity</p>\n            </div>\n          </div>\n        );\n\n      case \"integrations\":\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Slack Integration</Label>\n                  <p className=\"text-sm text-muted-foreground\">Send notifications to Slack channels</p>\n                </div>\n                <Switch\n                  checked={settings.slackIntegration}\n                  onCheckedChange={(checked) => handleSettingChange(\"slackIntegration\", checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Microsoft Teams Integration</Label>\n                  <p className=\"text-sm text-muted-foreground\">Send notifications to Teams channels</p>\n                </div>\n                <Switch\n                  checked={settings.teamsIntegration}\n                  onCheckedChange={(checked) => handleSettingChange(\"teamsIntegration\", checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">API Access</Label>\n                  <p className=\"text-sm text-muted-foreground\">Enable REST API for integrations</p>\n                </div>\n                <Switch\n                  checked={settings.apiAccessEnabled}\n                  onCheckedChange={(checked) => handleSettingChange(\"apiAccessEnabled\", checked)}\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"webhookUrl\">Webhook URL</Label>\n              <Input\n                id=\"webhookUrl\"\n                type=\"url\"\n                placeholder=\"https://your-webhook-url.com/endpoint\"\n                value={settings.webhookUrl}\n                onChange={(e) => handleSettingChange(\"webhookUrl\", e.target.value)}\n              />\n              <p className=\"text-sm text-muted-foreground mt-1\">Receive ticket events via webhook</p>\n            </div>\n          </div>\n        );\n\n      case \"templates\":\n        return (\n          <div className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"welcomeMessage\">Welcome Message</Label>\n              <Textarea\n                id=\"welcomeMessage\"\n                rows={3}\n                value={settings.welcomeMessage}\n                onChange={(e) => handleSettingChange(\"welcomeMessage\", e.target.value)}\n              />\n              <p className=\"text-sm text-muted-foreground mt-1\">Sent when tickets are created</p>\n            </div>\n\n            <div>\n              <Label htmlFor=\"resolvedMessage\">Resolution Message</Label>\n              <Textarea\n                id=\"resolvedMessage\"\n                rows={3}\n                value={settings.resolvedMessage}\n                onChange={(e) => handleSettingChange(\"resolvedMessage\", e.target.value)}\n              />\n              <p className=\"text-sm text-muted-foreground mt-1\">Sent when tickets are resolved</p>\n            </div>\n\n            <div>\n              <Label htmlFor=\"escalationMessage\">Escalation Message</Label>\n              <Textarea\n                id=\"escalationMessage\"\n                rows={3}\n                value={settings.escalationMessage}\n                onChange={(e) => handleSettingChange(\"escalationMessage\", e.target.value)}\n              />\n              <p className=\"text-sm text-muted-foreground mt-1\">Sent when tickets are escalated</p>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Support Settings</h2>\n          <p className=\"text-muted-foreground\">Configure your support system preferences and policies</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" onClick={handleExportSettings}>\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n          <Button variant=\"outline\" onClick={handleResetSettings}>\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Reset\n          </Button>\n          <Button onClick={handleSaveSettings} disabled={isLoading}>\n            <Save className=\"h-4 w-4 mr-2\" />\n            {isLoading ? \"Saving...\" : \"Save Changes\"}\n          </Button>\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"border rounded-lg\">\n        <div className=\"flex flex-wrap border-b\">\n          {tabs.map((tab) => {\n            const Icon = tab.icon;\n            return (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium border-b-2 transition-colors ${\n                  activeTab === tab.id\n                    ? \"border-primary text-primary bg-primary/5\"\n                    : \"border-transparent text-muted-foreground hover:text-foreground hover:border-border\"\n                }`}\n              >\n                <Icon className=\"h-4 w-4\" />\n                <span>{tab.label}</span>\n              </button>\n            );\n          })}\n        </div>\n\n        {/* Tab Content */}\n        <div className=\"p-6\">\n          {renderTabContent()}\n        </div>\n      </div>\n\n      {/* Save Progress */}\n      {isLoading && (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-3\">\n              <RefreshCw className=\"h-4 w-4 animate-spin\" />\n              <span>Saving settings...</span>\n            </div>\n            <Progress value={66} className=\"mt-2\" />\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":30003},"client/src/components/support/support-analytics.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  TrendingUp, \n  Clock, \n  Star, \n  Users, \n  MessageCircle, \n  CheckCircle,\n  AlertTriangle,\n  BarChart3,\n  PieChart,\n  Target,\n  Calendar,\n  Download\n} from \"lucide-react\";\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  PieChart as RechartsPieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line,\n  Area,\n  AreaChart,\n} from \"recharts\";\nimport { useState } from \"react\";\n\ninterface SupportAnalyticsProps {\n  supportTickets: any[];\n  ratings: any[];\n}\n\nexport function SupportAnalytics({ supportTickets, ratings }: SupportAnalyticsProps) {\n  const [timeRange, setTimeRange] = useState(\"30\");\n  const [chartType, setChartType] = useState(\"overview\");\n\n  // Calculate analytics data\n  const totalTickets = supportTickets.length;\n  const resolvedTickets = supportTickets.filter(t => t.status === \"resolved\").length;\n  const openTickets = supportTickets.filter(t => t.status === \"open\").length;\n  const inProgressTickets = supportTickets.filter(t => t.status === \"in-progress\").length;\n  const resolutionRate = totalTickets > 0 ? (resolvedTickets / totalTickets) * 100 : 0;\n\n  const avgRating = ratings.length > 0 \n    ? ratings.reduce((sum, r) => sum + r.rating, 0) / ratings.length \n    : 0;\n\n  const avgResponseTime = 1.2; // hours\n  const customerSatisfaction = 87.5; // percentage\n\n  // Generate chart data\n  const ticketStatusData = [\n    { name: \"Open\", value: openTickets, color: \"#ef4444\" },\n    { name: \"In Progress\", value: inProgressTickets, color: \"#f59e0b\" },\n    { name: \"Resolved\", value: resolvedTickets, color: \"#10b981\" },\n  ];\n\n  const ratingDistribution = [\n    { rating: \"5 Stars\", count: ratings.filter(r => r.rating === 5).length, color: \"#10b981\" },\n    { rating: \"4 Stars\", count: ratings.filter(r => r.rating === 4).length, color: \"#84cc16\" },\n    { rating: \"3 Stars\", count: ratings.filter(r => r.rating === 3).length, color: \"#f59e0b\" },\n    { rating: \"2 Stars\", count: ratings.filter(r => r.rating === 2).length, color: \"#ef4444\" },\n    { rating: \"1 Star\", count: ratings.filter(r => r.rating === 1).length, color: \"#dc2626\" },\n  ];\n\n  const generateTrendData = () => {\n    const days = parseInt(timeRange);\n    const data = [];\n    \n    for (let i = days; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      \n      data.push({\n        date: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n        tickets: Math.floor(Math.random() * 15) + 5,\n        resolved: Math.floor(Math.random() * 12) + 3,\n        satisfaction: 75 + Math.random() * 20,\n      });\n    }\n    \n    return data;\n  };\n\n  const trendData = generateTrendData();\n\n  const categoryData = [\n    { category: \"Technical\", count: supportTickets.filter(t => t.category === \"technical\").length },\n    { category: \"Billing\", count: supportTickets.filter(t => t.category === \"billing\").length },\n    { category: \"General\", count: supportTickets.filter(t => t.category === \"general\").length },\n    { category: \"Installation\", count: supportTickets.filter(t => t.category === \"installation\").length },\n  ];\n\n  const priorityData = [\n    { priority: \"Low\", count: supportTickets.filter(t => t.priority === \"low\").length, color: \"#3b82f6\" },\n    { priority: \"Medium\", count: supportTickets.filter(t => t.priority === \"medium\").length, color: \"#f59e0b\" },\n    { priority: \"High\", count: supportTickets.filter(t => t.priority === \"high\").length, color: \"#ef4444\" },\n    { priority: \"Urgent\", count: supportTickets.filter(t => t.priority === \"urgent\").length, color: \"#dc2626\" },\n  ];\n\n  const renderChart = () => {\n    switch (chartType) {\n      case \"trends\":\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <AreaChart data={trendData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n              <XAxis dataKey=\"date\" stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n              <YAxis stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n              <Tooltip />\n              <Legend />\n              <Area \n                type=\"monotone\" \n                dataKey=\"tickets\" \n                stackId=\"1\"\n                stroke=\"#3b82f6\" \n                fill=\"#3b82f620\"\n                name=\"New Tickets\"\n              />\n              <Area \n                type=\"monotone\" \n                dataKey=\"resolved\" \n                stackId=\"1\"\n                stroke=\"#10b981\" \n                fill=\"#10b98120\"\n                name=\"Resolved\"\n              />\n            </AreaChart>\n          </ResponsiveContainer>\n        );\n\n      case \"ratings\":\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={ratingDistribution}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n              <XAxis dataKey=\"rating\" stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n              <YAxis stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n              <Tooltip />\n              <Bar dataKey=\"count\" name=\"Count\">\n                {ratingDistribution.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={entry.color} />\n                ))}\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        );\n\n      case \"categories\":\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={categoryData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n              <XAxis dataKey=\"category\" stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n              <YAxis stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n              <Tooltip />\n              <Bar dataKey=\"count\" fill=\"#3b82f6\" name=\"Tickets\" />\n            </BarChart>\n          </ResponsiveContainer>\n        );\n\n      default:\n        return (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"text-sm font-medium mb-3\">Ticket Status Distribution</h4>\n              <ResponsiveContainer width=\"100%\" height={200}>\n                <RechartsPieChart>\n                  <Pie\n                    data={ticketStatusData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={40}\n                    outerRadius={80}\n                    paddingAngle={5}\n                    dataKey=\"value\"\n                  >\n                    {ticketStatusData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                  <Legend />\n                </RechartsPieChart>\n              </ResponsiveContainer>\n            </div>\n            \n            <div>\n              <h4 className=\"text-sm font-medium mb-3\">Priority Distribution</h4>\n              <ResponsiveContainer width=\"100%\" height={200}>\n                <BarChart data={priorityData}>\n                  <XAxis dataKey=\"priority\" fontSize={12} />\n                  <YAxis fontSize={12} />\n                  <Tooltip />\n                  <Bar dataKey=\"count\" name=\"Count\">\n                    {priorityData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Bar>\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"border-2 border-blue-200 bg-blue-50/50\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center text-sm font-medium text-blue-700\">\n              <MessageCircle className=\"h-4 w-4 mr-2\" />\n              Total Tickets\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-900\">{totalTickets}</div>\n            <div className=\"flex items-center mt-2 text-xs\">\n              <Badge variant=\"outline\" className=\"mr-2\">Open: {openTickets}</Badge>\n              <Badge variant=\"outline\">Resolved: {resolvedTickets}</Badge>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-2 border-green-200 bg-green-50/50\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center text-sm font-medium text-green-700\">\n              <CheckCircle className=\"h-4 w-4 mr-2\" />\n              Resolution Rate\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-900\">{resolutionRate.toFixed(1)}%</div>\n            <Progress value={resolutionRate} className=\"mt-2 h-2\" />\n            <p className=\"text-xs text-green-600 mt-2\">Target: 95%</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-2 border-yellow-200 bg-yellow-50/50\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center text-sm font-medium text-yellow-700\">\n              <Clock className=\"h-4 w-4 mr-2\" />\n              Avg Response Time\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-900\">{avgResponseTime}h</div>\n            <p className=\"text-xs text-yellow-600 mt-2\">Target: &lt;2h</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-2 border-purple-200 bg-purple-50/50\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center text-sm font-medium text-purple-700\">\n              <Star className=\"h-4 w-4 mr-2\" />\n              Avg Rating\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-900\">{avgRating.toFixed(1)}</div>\n            <div className=\"flex items-center mt-2\">\n              {[...Array(5)].map((_, i) => (\n                <Star\n                  key={i}\n                  className={`h-4 w-4 ${\n                    i < Math.floor(avgRating) ? \"text-yellow-400 fill-current\" : \"text-gray-300\"\n                  }`}\n                />\n              ))}\n            </div>\n            <p className=\"text-xs text-purple-600 mt-1\">{ratings.length} total ratings</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Additional Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card className=\"border-2 border-orange-200 bg-orange-50/50\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center text-sm font-medium text-orange-700\">\n              <Users className=\"h-4 w-4 mr-2\" />\n              Customer Satisfaction\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-900\">{customerSatisfaction}%</div>\n            <Progress value={customerSatisfaction} className=\"mt-2 h-2\" />\n            <p className=\"text-xs text-orange-600 mt-2\">Based on feedback</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-2 border-red-200 bg-red-50/50\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center text-sm font-medium text-red-700\">\n              <AlertTriangle className=\"h-4 w-4 mr-2\" />\n              Urgent Tickets\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-900\">\n              {supportTickets.filter(t => t.priority === \"urgent\").length}\n            </div>\n            <p className=\"text-xs text-red-600 mt-2\">Require immediate attention</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-2 border-indigo-200 bg-indigo-50/50\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center text-sm font-medium text-indigo-700\">\n              <Target className=\"h-4 w-4 mr-2\" />\n              SLA Compliance\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-indigo-900\">94.2%</div>\n            <Progress value={94.2} className=\"mt-2 h-2\" />\n            <p className=\"text-xs text-indigo-600 mt-2\">Response time SLA</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center\">\n              <BarChart3 className=\"h-5 w-5 mr-2 text-primary\" />\n              Support Analytics\n            </CardTitle>\n            <div className=\"flex items-center gap-3\">\n              <Select value={timeRange} onValueChange={setTimeRange}>\n                <SelectTrigger className=\"w-[140px] h-8 text-sm\">\n                  <SelectValue placeholder=\"Time range\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"7\">Last 7 days</SelectItem>\n                  <SelectItem value=\"30\">Last 30 days</SelectItem>\n                  <SelectItem value=\"90\">Last 3 months</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={chartType} onValueChange={setChartType}>\n                <SelectTrigger className=\"w-[140px] h-8 text-sm\">\n                  <SelectValue placeholder=\"Chart type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"overview\">Overview</SelectItem>\n                  <SelectItem value=\"trends\">Trends</SelectItem>\n                  <SelectItem value=\"ratings\">Ratings</SelectItem>\n                  <SelectItem value=\"categories\">Categories</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\" size=\"sm\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {renderChart()}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":14625},"client/src/components/support/ticket-management.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Search, \n  Filter, \n  Plus, \n  Eye, \n  MessageSquare, \n  Clock, \n  User, \n  Phone, \n  Mail,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  MoreHorizontal,\n  Edit,\n  Trash2,\n  Reply,\n  Send\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface SupportTicket {\n  id: number;\n  title: string;\n  description: string;\n  customerName: string;\n  email: string;\n  phone: string;\n  status: \"open\" | \"in-progress\" | \"resolved\" | \"closed\";\n  priority: \"low\" | \"medium\" | \"high\" | \"urgent\";\n  category: \"technical\" | \"billing\" | \"general\" | \"installation\";\n  assignedTo?: string;\n  rating?: number;\n  feedback?: string;\n  createdAt: string;\n  updatedAt: string;\n  responses?: {\n    id: number;\n    message: string;\n    sender: string;\n    timestamp: string;\n    isCustomer: boolean;\n  }[];\n}\n\ninterface TicketManagementProps {\n  tickets: SupportTicket[];\n  onUpdateTicket: (id: number, updates: Partial<SupportTicket>) => void;\n  onDeleteTicket: (id: number) => void;\n  onCreateTicket: (ticket: Omit<SupportTicket, \"id\" | \"createdAt\" | \"updatedAt\">) => void;\n  currentPage: number;\n  totalPages: number;\n  onPageChange: (page: number) => void;\n  itemsPerPage: number;\n}\n\nexport function TicketManagement({\n  tickets,\n  onUpdateTicket,\n  onDeleteTicket,\n  onCreateTicket,\n  currentPage,\n  totalPages,\n  onPageChange,\n  itemsPerPage\n}: TicketManagementProps) {\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n  const [filterPriority, setFilterPriority] = useState(\"all\");\n  const [filterCategory, setFilterCategory] = useState(\"all\");\n  const [selectedTicket, setSelectedTicket] = useState<SupportTicket | null>(null);\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [replyMessage, setReplyMessage] = useState(\"\");\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"open\":\n        return <AlertTriangle className=\"h-4 w-4 text-red-600\" />;\n      case \"in-progress\":\n        return <Clock className=\"h-4 w-4 text-yellow-600\" />;\n      case \"resolved\":\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case \"closed\":\n        return <XCircle className=\"h-4 w-4 text-gray-600\" />;\n      default:\n        return <AlertTriangle className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"open\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      case \"in-progress\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      case \"resolved\":\n        return \"bg-green-100 text-green-800 border-green-200\";\n      case \"closed\":\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"urgent\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      case \"high\":\n        return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"medium\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      case \"low\":\n        return \"bg-blue-100 text-blue-800 border-blue-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((part) => part[0])\n      .join(\"\")\n      .toUpperCase();\n  };\n\n  const filteredTickets = tickets.filter((ticket) => {\n    const matchesSearch = \n      ticket.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      ticket.customerName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      ticket.description.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = filterStatus === \"all\" || ticket.status === filterStatus;\n    const matchesPriority = filterPriority === \"all\" || ticket.priority === filterPriority;\n    const matchesCategory = filterCategory === \"all\" || ticket.category === filterCategory;\n\n    return matchesSearch && matchesStatus && matchesPriority && matchesCategory;\n  });\n\n  const handleStatusChange = (ticketId: number, newStatus: string) => {\n    onUpdateTicket(ticketId, { \n      status: newStatus as SupportTicket[\"status\"], \n      updatedAt: new Date().toISOString() \n    });\n    toast({\n      title: \"Status Updated\",\n      description: `Ticket status changed to ${newStatus}`,\n    });\n  };\n\n  const handleReply = (ticketId: number) => {\n    if (!replyMessage.trim()) return;\n\n    const newResponse = {\n      id: Date.now(),\n      message: replyMessage,\n      sender: \"Support Agent\",\n      timestamp: new Date().toISOString(),\n      isCustomer: false\n    };\n\n    const ticket = tickets.find(t => t.id === ticketId);\n    const responses = ticket?.responses || [];\n    \n    onUpdateTicket(ticketId, {\n      responses: [...responses, newResponse],\n      status: \"in-progress\",\n      updatedAt: new Date().toISOString()\n    });\n\n    setReplyMessage(\"\");\n    toast({\n      title: \"Reply Sent\",\n      description: \"Your response has been sent to the customer\",\n    });\n  };\n\n  const CreateTicketForm = () => {\n    const [formData, setFormData] = useState({\n      title: \"\",\n      description: \"\",\n      customerName: \"\",\n      email: \"\",\n      phone: \"\",\n      priority: \"medium\" as SupportTicket[\"priority\"],\n      category: \"general\" as SupportTicket[\"category\"],\n    });\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      onCreateTicket({\n        ...formData,\n        status: \"open\",\n        responses: []\n      });\n      setShowCreateDialog(false);\n      setFormData({\n        title: \"\",\n        description: \"\",\n        customerName: \"\",\n        email: \"\",\n        phone: \"\",\n        priority: \"medium\",\n        category: \"general\",\n      });\n      toast({\n        title: \"Ticket Created\",\n        description: \"New support ticket has been created successfully\",\n      });\n    };\n\n    return (\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"customerName\">Customer Name</Label>\n            <Input\n              id=\"customerName\"\n              value={formData.customerName}\n              onChange={(e) => setFormData({ ...formData, customerName: e.target.value })}\n              required\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n              required\n            />\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"phone\">Phone</Label>\n            <Input\n              id=\"phone\"\n              value={formData.phone}\n              onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"category\">Category</Label>\n            <Select value={formData.category} onValueChange={(value) => setFormData({ ...formData, category: value as SupportTicket[\"category\"] })}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"technical\">Technical</SelectItem>\n                <SelectItem value=\"billing\">Billing</SelectItem>\n                <SelectItem value=\"general\">General</SelectItem>\n                <SelectItem value=\"installation\">Installation</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <div>\n          <Label htmlFor=\"title\">Subject</Label>\n          <Input\n            id=\"title\"\n            value={formData.title}\n            onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n            required\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"description\">Description</Label>\n          <Textarea\n            id=\"description\"\n            rows={4}\n            value={formData.description}\n            onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n            required\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"priority\">Priority</Label>\n          <Select value={formData.priority} onValueChange={(value) => setFormData({ ...formData, priority: value as SupportTicket[\"priority\"] })}>\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"low\">Low</SelectItem>\n              <SelectItem value=\"medium\">Medium</SelectItem>\n              <SelectItem value=\"high\">High</SelectItem>\n              <SelectItem value=\"urgent\">Urgent</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"flex justify-end space-x-2\">\n          <Button type=\"button\" variant=\"outline\" onClick={() => setShowCreateDialog(false)}>\n            Cancel\n          </Button>\n          <Button type=\"submit\">Create Ticket</Button>\n        </div>\n      </form>\n    );\n  };\n\n  const PaginationControls = () => {\n    const startItem = (currentPage - 1) * itemsPerPage + 1;\n    const endItem = Math.min(currentPage * itemsPerPage, filteredTickets.length);\n\n    return (\n      <div className=\"flex items-center justify-between py-4 border-t\">\n        <div className=\"text-sm text-muted-foreground\">\n          Showing {startItem}-{endItem} of {filteredTickets.length} tickets\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => onPageChange(currentPage - 1)}\n            disabled={currentPage === 1}\n          >\n            Previous\n          </Button>\n          \n          {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n            <Button\n              key={page}\n              variant={currentPage === page ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => onPageChange(page)}\n              className=\"w-8 h-8 p-0\"\n            >\n              {page}\n            </Button>\n          ))}\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => onPageChange(currentPage + 1)}\n            disabled={currentPage === totalPages}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center\">\n            <MessageSquare className=\"h-5 w-5 mr-2 text-primary\" />\n            Support Tickets\n            <Badge variant=\"outline\" className=\"ml-2\">\n              {filteredTickets.length} tickets\n            </Badge>\n          </CardTitle>\n          <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                New Ticket\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create New Support Ticket</DialogTitle>\n                <DialogDescription>\n                  Create a new support ticket for customer assistance.\n                </DialogDescription>\n              </DialogHeader>\n              <CreateTicketForm />\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex flex-col sm:flex-row gap-3 mt-4\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search tickets...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Select value={filterStatus} onValueChange={setFilterStatus}>\n              <SelectTrigger className=\"w-[120px]\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"open\">Open</SelectItem>\n                <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                <SelectItem value=\"resolved\">Resolved</SelectItem>\n                <SelectItem value=\"closed\">Closed</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={filterPriority} onValueChange={setFilterPriority}>\n              <SelectTrigger className=\"w-[120px]\">\n                <SelectValue placeholder=\"Priority\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Priorities</SelectItem>\n                <SelectItem value=\"low\">Low</SelectItem>\n                <SelectItem value=\"medium\">Medium</SelectItem>\n                <SelectItem value=\"high\">High</SelectItem>\n                <SelectItem value=\"urgent\">Urgent</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={filterCategory} onValueChange={setFilterCategory}>\n              <SelectTrigger className=\"w-[120px]\">\n                <SelectValue placeholder=\"Category\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                <SelectItem value=\"technical\">Technical</SelectItem>\n                <SelectItem value=\"billing\">Billing</SelectItem>\n                <SelectItem value=\"general\">General</SelectItem>\n                <SelectItem value=\"installation\">Installation</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"p-0\">\n        <div className=\"divide-y divide-border\">\n          {filteredTickets.length === 0 ? (\n            <div className=\"p-8 text-center text-muted-foreground\">\n              <MessageSquare className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p className=\"text-lg font-medium\">No tickets found</p>\n              <p className=\"text-sm\">Try adjusting your search or filters</p>\n            </div>\n          ) : (\n            filteredTickets.map((ticket) => (\n              <div key={ticket.id} className=\"p-6 hover:bg-muted/30 transition-colors\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    {/* Header */}\n                    <div className=\"flex items-center space-x-2 mb-3\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        #{ticket.id.toString().padStart(4, '0')}\n                      </Badge>\n                      <Badge className={`text-xs ${getStatusColor(ticket.status)}`}>\n                        {getStatusIcon(ticket.status)}\n                        <span className=\"ml-1\">{ticket.status}</span>\n                      </Badge>\n                      <Badge className={`text-xs ${getPriorityColor(ticket.priority)}`}>\n                        {ticket.priority}\n                      </Badge>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {ticket.category}\n                      </Badge>\n                    </div>\n\n                    {/* Content */}\n                    <h4 className=\"font-semibold text-foreground mb-2\">{ticket.title}</h4>\n                    <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">\n                      {ticket.description}\n                    </p>\n\n                    {/* Customer Info */}\n                    <div className=\"flex items-center space-x-4 mb-3 text-sm\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Avatar className=\"h-6 w-6\">\n                          <AvatarFallback className=\"text-xs bg-primary/10\">\n                            {getInitials(ticket.customerName)}\n                          </AvatarFallback>\n                        </Avatar>\n                        <span className=\"font-medium\">{ticket.customerName}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1 text-muted-foreground\">\n                        <Mail className=\"h-3 w-3\" />\n                        <span>{ticket.email}</span>\n                      </div>\n                      {ticket.phone && (\n                        <div className=\"flex items-center space-x-1 text-muted-foreground\">\n                          <Phone className=\"h-3 w-3\" />\n                          <span>{ticket.phone}</span>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Timestamp */}\n                    <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Clock className=\"h-3 w-3\" />\n                        <span>Created: {format(new Date(ticket.createdAt), \"MMM d, yyyy 'at' h:mm a\")}</span>\n                      </div>\n                      <span>Updated: {format(new Date(ticket.updatedAt), \"MMM d, yyyy 'at' h:mm a\")}</span>\n                      {ticket.responses && ticket.responses.length > 0 && (\n                        <span>{ticket.responses.length} responses</span>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"flex items-center space-x-2 ml-4\">\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => setSelectedTicket(ticket)}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\n                        <DialogHeader>\n                          <DialogTitle className=\"flex items-center space-x-2\">\n                            <span>Ticket #{ticket.id.toString().padStart(4, '0')}</span>\n                            <Badge className={`text-xs ${getStatusColor(ticket.status)}`}>\n                              {ticket.status}\n                            </Badge>\n                          </DialogTitle>\n                          <DialogDescription>\n                            {ticket.title}\n                          </DialogDescription>\n                        </DialogHeader>\n                        \n                        <div className=\"space-y-6\">\n                          {/* Customer Info */}\n                          <div className=\"grid grid-cols-2 gap-4 p-4 bg-muted/50 rounded-lg\">\n                            <div>\n                              <Label className=\"text-sm font-medium\">Customer</Label>\n                              <p className=\"text-sm\">{ticket.customerName}</p>\n                            </div>\n                            <div>\n                              <Label className=\"text-sm font-medium\">Email</Label>\n                              <p className=\"text-sm\">{ticket.email}</p>\n                            </div>\n                            <div>\n                              <Label className=\"text-sm font-medium\">Phone</Label>\n                              <p className=\"text-sm\">{ticket.phone || \"N/A\"}</p>\n                            </div>\n                            <div>\n                              <Label className=\"text-sm font-medium\">Priority</Label>\n                              <Badge className={`text-xs ${getPriorityColor(ticket.priority)}`}>\n                                {ticket.priority}\n                              </Badge>\n                            </div>\n                          </div>\n\n                          {/* Description */}\n                          <div>\n                            <Label className=\"text-sm font-medium\">Description</Label>\n                            <p className=\"text-sm text-muted-foreground mt-1\">{ticket.description}</p>\n                          </div>\n\n                          {/* Responses */}\n                          {ticket.responses && ticket.responses.length > 0 && (\n                            <div>\n                              <Label className=\"text-sm font-medium\">Conversation</Label>\n                              <div className=\"space-y-3 mt-2 max-h-60 overflow-y-auto\">\n                                {ticket.responses.map((response) => (\n                                  <div \n                                    key={response.id} \n                                    className={`p-3 rounded-lg ${\n                                      response.isCustomer \n                                        ? \"bg-blue-50 border-l-4 border-blue-500\" \n                                        : \"bg-green-50 border-l-4 border-green-500\"\n                                    }`}\n                                  >\n                                    <div className=\"flex justify-between items-center mb-1\">\n                                      <span className=\"text-sm font-medium\">\n                                        {response.isCustomer ? ticket.customerName : response.sender}\n                                      </span>\n                                      <span className=\"text-xs text-muted-foreground\">\n                                        {format(new Date(response.timestamp), \"MMM d, h:mm a\")}\n                                      </span>\n                                    </div>\n                                    <p className=\"text-sm\">{response.message}</p>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n\n                          {/* Reply */}\n                          <div>\n                            <Label className=\"text-sm font-medium\">Reply</Label>\n                            <div className=\"flex space-x-2 mt-2\">\n                              <Textarea\n                                placeholder=\"Type your response...\"\n                                value={replyMessage}\n                                onChange={(e) => setReplyMessage(e.target.value)}\n                                rows={3}\n                                className=\"flex-1\"\n                              />\n                              <Button \n                                onClick={() => handleReply(ticket.id)}\n                                disabled={!replyMessage.trim()}\n                                className=\"self-end\"\n                              >\n                                <Send className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n\n                          {/* Status Actions */}\n                          <div className=\"flex space-x-2 pt-4 border-t\">\n                            <Select value={ticket.status} onValueChange={(value) => handleStatusChange(ticket.id, value)}>\n                              <SelectTrigger className=\"w-[140px]\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"open\">Open</SelectItem>\n                                <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                                <SelectItem value=\"resolved\">Resolved</SelectItem>\n                                <SelectItem value=\"closed\">Closed</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <Button variant=\"outline\" onClick={() => onDeleteTicket(ticket.id)}>\n                              <Trash2 className=\"h-4 w-4 mr-2\" />\n                              Delete\n                            </Button>\n                          </div>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n\n                    <Select value={ticket.status} onValueChange={(value) => handleStatusChange(ticket.id, value)}>\n                      <SelectTrigger className=\"w-[120px] h-8 text-sm\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"open\">Open</SelectItem>\n                        <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                        <SelectItem value=\"resolved\">Resolved</SelectItem>\n                        <SelectItem value=\"closed\">Closed</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n\n        {/* Pagination */}\n        {filteredTickets.length > 0 && <PaginationControls />}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":26256},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/data-table.tsx":{"content":"import { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  ChevronLeft, \n  ChevronRight, \n  Search, \n  ArrowUpDown, \n  ArrowUp, \n  ArrowDown \n} from \"lucide-react\";\n\ninterface Column {\n  key: string;\n  label: string;\n  sortable?: boolean;\n  render?: (value: any, row: any) => React.ReactNode;\n}\n\ninterface DataTableProps {\n  data: any[];\n  columns: Column[];\n  searchPlaceholder?: string;\n  itemsPerPage?: number;\n}\n\nexport function DataTable({ \n  data, \n  columns, \n  searchPlaceholder = \"Search...\", \n  itemsPerPage = 10 \n}: DataTableProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sortColumn, setSortColumn] = useState<string>(\"\");\n  const [sortDirection, setSortDirection] = useState<\"asc\" | \"desc\">(\"asc\");\n\n  // Filter data based on search term\n  const filteredData = data.filter(row => {\n    if (!searchTerm) return true;\n    \n    return columns.some(column => {\n      const value = row[column.key];\n      if (value === null || value === undefined) return false;\n      \n      const stringValue = String(value).toLowerCase();\n      return stringValue.includes(searchTerm.toLowerCase());\n    });\n  });\n\n  // Sort data\n  const sortedData = [...filteredData].sort((a, b) => {\n    if (!sortColumn) return 0;\n    \n    const aValue = a[sortColumn];\n    const bValue = b[sortColumn];\n    \n    if (aValue === null || aValue === undefined) return 1;\n    if (bValue === null || bValue === undefined) return -1;\n    \n    let comparison = 0;\n    if (aValue < bValue) comparison = -1;\n    if (aValue > bValue) comparison = 1;\n    \n    return sortDirection === \"asc\" ? comparison : -comparison;\n  });\n\n  // Pagination\n  const totalPages = Math.ceil(sortedData.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const currentData = sortedData.slice(startIndex, endIndex);\n\n  const handleSort = (columnKey: string) => {\n    if (sortColumn === columnKey) {\n      setSortDirection(sortDirection === \"asc\" ? \"desc\" : \"asc\");\n    } else {\n      setSortColumn(columnKey);\n      setSortDirection(\"asc\");\n    }\n  };\n\n  const getSortIcon = (columnKey: string) => {\n    if (sortColumn !== columnKey) return <ArrowUpDown className=\"h-4 w-4\" />;\n    return sortDirection === \"asc\" ? <ArrowUp className=\"h-4 w-4\" /> : <ArrowDown className=\"h-4 w-4\" />;\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Search */}\n      <div className=\"relative max-w-sm\">\n        <Search className=\"h-4 w-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n        <Input\n          placeholder={searchPlaceholder}\n          value={searchTerm}\n          onChange={(e) => {\n            setSearchTerm(e.target.value);\n            setCurrentPage(1);\n          }}\n          className=\"pl-10\"\n        />\n      </div>\n\n      {/* Table */}\n      <div className=\"rounded-lg border border-border overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-muted/50\">\n              <tr>\n                {columns.map((column) => (\n                  <th key={column.key} className=\"text-left p-4 font-medium\">\n                    {column.sortable !== false ? (\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => handleSort(column.key)}\n                        className=\"h-auto p-0 font-medium hover:bg-transparent\"\n                      >\n                        {column.label}\n                        {getSortIcon(column.key)}\n                      </Button>\n                    ) : (\n                      column.label\n                    )}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {currentData.map((row, index) => (\n                <tr key={index} className=\"border-t border-border hover:bg-muted/20\">\n                  {columns.map((column) => (\n                    <td key={column.key} className=\"p-4\">\n                      {column.render \n                        ? column.render(row[column.key], row) \n                        : String(row[column.key] || \"\")}\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Pagination */}\n      {totalPages > 1 && (\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-muted-foreground\">\n            Showing {startIndex + 1} to {Math.min(endIndex, sortedData.length)} of {sortedData.length} entries\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n              disabled={currentPage === 1}\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n              Previous\n            </Button>\n            \n            <div className=\"flex items-center space-x-1\">\n              {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                const pageNumber = i + 1;\n                return (\n                  <Button\n                    key={pageNumber}\n                    variant={currentPage === pageNumber ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(pageNumber)}\n                    className=\"w-8\"\n                  >\n                    {pageNumber}\n                  </Button>\n                );\n              })}\n            </div>\n            \n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n              disabled={currentPage === totalPages}\n            >\n              Next\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport function StatusBadge({ status }: { status: string }) {\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'active':\n      case 'resolved':\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'pending':\n      case 'open':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'in-progress':\n      case 'assigned':\n        return 'bg-blue-100 text-blue-800';\n      case 'inactive':\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <Badge className={getStatusColor(status)}>\n      {status}\n    </Badge>\n  );\n}","size_bytes":6861},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/multi-select.tsx":{"content":"import * as React from \"react\";\nimport { Check, ChevronsUpDown, X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport interface Option {\n  label: string;\n  value: string;\n  avatar?: string;\n  role?: string;\n  department?: string;\n}\n\ninterface MultiSelectProps {\n  options: Option[];\n  selected: string[];\n  onChange: (selected: string[]) => void;\n  placeholder?: string;\n  maxItems?: number;\n  searchPlaceholder?: string;\n  emptyText?: string;\n  selectAllText?: string;\n  clearAllText?: string;\n  className?: string;\n}\n\nexport function MultiSelect({\n  options,\n  selected,\n  onChange,\n  placeholder = \"Select items...\",\n  maxItems,\n  searchPlaceholder = \"Search...\",\n  emptyText = \"No results found.\",\n  selectAllText = \"Select all\",\n  clearAllText = \"Clear all\",\n  className,\n}: MultiSelectProps) {\n  const [open, setOpen] = React.useState(false);\n\n  const handleUnselect = (item: string) => {\n    onChange(selected.filter((i) => i !== item));\n  };\n\n  const handleSelectAll = () => {\n    onChange(options.map((option) => option.value));\n  };\n\n  const handleClearAll = () => {\n    onChange([]);\n  };\n\n  const isSelected = (value: string) => selected.includes(value);\n  const isAllSelected = selected.length === options.length && options.length > 0;\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className={cn(\n            \"w-full justify-between text-left font-normal\",\n            selected.length === 0 && \"text-muted-foreground\",\n            className\n          )}\n        >\n          <div className=\"flex gap-1 flex-wrap\">\n            {selected.length === 0 && <span>{placeholder}</span>}\n            {selected.slice(0, maxItems).map((item) => {\n              const option = options.find((opt) => opt.value === item);\n              return (\n                <Badge\n                  variant=\"secondary\"\n                  key={item}\n                  className=\"mr-1 mb-1\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    handleUnselect(item);\n                  }}\n                >\n                  {option?.label}\n                  <button\n                    className=\"ml-1 ring-offset-background rounded-full outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n                    onKeyDown={(e) => {\n                      if (e.key === \"Enter\") {\n                        handleUnselect(item);\n                      }\n                    }}\n                    onMouseDown={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                    }}\n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      handleUnselect(item);\n                    }}\n                  >\n                    <X className=\"h-3 w-3 text-muted-foreground hover:text-foreground\" />\n                  </button>\n                </Badge>\n              );\n            })}\n            {maxItems && selected.length > maxItems && (\n              <Badge variant=\"secondary\" className=\"mr-1 mb-1\">\n                +{selected.length - maxItems} more\n              </Badge>\n            )}\n          </div>\n          <ChevronsUpDown className=\"h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-full p-0\" align=\"start\">\n        <Command className=\"w-full\">\n          <CommandInput placeholder={searchPlaceholder} />\n          <CommandList>\n            <CommandEmpty>{emptyText}</CommandEmpty>\n            <CommandGroup>\n              <CommandItem\n                onSelect={isAllSelected ? handleClearAll : handleSelectAll}\n                className=\"cursor-pointer\"\n              >\n                <Check\n                  className={cn(\n                    \"mr-2 h-4 w-4\",\n                    isAllSelected ? \"opacity-100\" : \"opacity-0\"\n                  )}\n                />\n                {isAllSelected ? clearAllText : selectAllText}\n              </CommandItem>\n              {options.map((option) => (\n                <CommandItem\n                  key={option.value}\n                  onSelect={() => {\n                    const newSelected = isSelected(option.value)\n                      ? selected.filter((item) => item !== option.value)\n                      : [...selected, option.value];\n                    onChange(newSelected);\n                  }}\n                  className=\"cursor-pointer\"\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      isSelected(option.value) ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  <div className=\"flex items-center space-x-2 flex-1\">\n                    {option.avatar && (\n                      <div className=\"w-6 h-6 rounded-full bg-gradient-to-br from-primary to-primary/80 flex items-center justify-center text-primary-foreground text-xs font-semibold\">\n                        {option.avatar}\n                      </div>\n                    )}\n                    <div className=\"flex flex-col\">\n                      <span className=\"text-sm font-medium\">{option.label}</span>\n                      {option.role && (\n                        <span className=\"text-xs text-muted-foreground\">\n                          {option.role}\n                          {option.department && ` • ${option.department}`}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":6226},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/stats-card.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  change?: string;\n  changeType?: \"positive\" | \"negative\" | \"neutral\";\n  icon: LucideIcon;\n  iconColor?: string;\n  gradient?: boolean;\n  className?: string;\n}\n\nexport function StatsCard({\n  title,\n  value,\n  change,\n  changeType = \"neutral\",\n  icon: Icon,\n  iconColor = \"text-primary\",\n  gradient = false,\n  className,\n}: StatsCardProps) {\n  const changeColors = {\n    positive: \"text-green-600 bg-green-50 dark:bg-green-900/20\",\n    negative: \"text-red-600 bg-red-50 dark:bg-red-900/20\", \n    neutral: \"text-gray-600 bg-gray-50 dark:bg-gray-900/20\",\n  };\n\n  return (\n    <div className={cn(\n      \"stats-card p-6 group relative overflow-hidden\",\n      gradient && \"crypto-card\",\n      className\n    )}>\n      <div className=\"flex items-center justify-between relative z-10\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className={cn(\n              \"p-3 rounded-xl transition-all duration-200 ease-in-out\",\n              gradient \n                ? \"bg-gradient-to-br from-primary/20 to-primary/5 border border-primary/20\" \n                : \"bg-primary/10\"\n            )}>\n              <Icon className={cn(\"h-6 w-6 transition-transform duration-200\", iconColor)} />\n            </div>\n            {change && (\n              <div className={cn(\n                \"px-2 py-1 rounded-full text-xs font-medium transition-all duration-200\",\n                changeColors[changeType]\n              )}>\n                {changeType === \"positive\" && \"+\"}\n                {change}\n              </div>\n            )}\n          </div>\n          \n          <div className=\"space-y-1\">\n            <p className=\"text-sm font-medium text-foreground/70 transition-colors duration-200\">{title}</p>\n            <p className=\"text-3xl font-bold tracking-tight text-foreground transition-colors duration-200\">\n              {value}\n            </p>\n          </div>\n        </div>\n      </div>\n      \n      {/* Subtle hover effect without layout shift */}\n      <div className=\"absolute inset-0 rounded-xl bg-gradient-to-r from-primary/3 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none\" />\n    </div>\n  );\n}","size_bytes":2362},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}